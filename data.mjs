
        const data = {
            "posts": [{"title":"Learn Express Routes","date":null,"description":"","slug":"learn-express-routes","id":"learn-express-routes-9006","tags":[{"name":"express","id":"express-446556"}],"content":"<h2>Introduction</h2>\n<p>A huge portion of the internet's data travels over HTTP/HTTPS through request-response cycles between client and servers. Every time that you use a website, your browser sends requests to one or many servers requesting resources. Every image, meme, post, and video is requested by a client and sent in a response from a server.</p>\n<p>Express is a powerful but flexible JavaScript framework for creating web servers and APIs. It can be user for everything from simple file servers to JSON APIs to full production servers.</p>\n<p>In this lesson, You will be learning all the necessary skills to implement an API allowing clients to Create, Read, Update and Delete Expressions. These four functionalities together are known as CRUD, and they form the backbone of many real-life APIs.</p>\n<h2>Starting a Server</h2>\n<p>Express is a node module, so in order to use it, we will need to import it in our program file. To create a server, the imported <code>express</code> function must be invoked.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// import the express module</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>)\n<span class=\"hljs-comment\">// create an instance of an Express application</span>\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>()</code></pre>\n<p>On the first line, we import the Express library with <code>require</code>. When invoked on the second line, it returns an instance of an Express application. This application can be used to start a server and specify server behavior.</p>\n<p>The purpose of a server is to listen for requests, perform whatever action is required to satisfy the request, and then return a response.</p>\n<p>In order for our server to start responding, we have to tell the server where to <em>listen</em> for new requests by providing a port number argument to a method called <code>app.listen()</code>. The server will then listen on the specified <code>port</code> and respond to any requests that come into it.</p>\n<p>The second argument is a callback function that will be called once the server is running and ready to receive responses.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = <span class=\"hljs-number\">4001</span>\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =></span> {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Server is running on port <span class=\"hljs-subst\">${PORT}</span>`</span>)\n})</code></pre>\n<p>In this example, our <code>app.listen()</code> call will start a server listening on port <code>4001</code>, and once the server is started it will log <code>'Server is listening on port 4001'</code></p>\n<h2>Writing Your First Route</h2>\n<p>Once the Express server is listening, it can respond to any and all requests. But how does it know what to do with these requests? To tell our server how to deal with any given request, we register a series of <em>routes</em>. Routes define the control flow for requests based on the request's <em>path</em> and HTTP verb.</p>\n<p>For example, if your server receives a GET request at <code>/monsters</code>, we will use a route to define the appropriate functionality for that HTTP verb (GET) and path (<code>monsters</code>).</p>\n<p>The HTTP verb is always included in the request, and it is one of a finite number of options used to specify expected functionality. GET requests are used for retrieving resources from a server, and we will discuss additional request types in later exercises.</p>\n<p>Express uses <code>app.get()</code> to register routes to match <code>GET</code> requests. Express routes (including <code>app.get()</code>) usually take two arguments, a path (usually a string), and a callback function to handle the request and send a response.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> moods = [\n\t{mood : <span class=\"hljs-string\">'excited about express!'</span>},\n\t{mood : <span class=\"hljs-string\">'route-tastic'</span>}\n]\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/moods\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =></span> {\n\t<span class=\"hljs-comment\">// Here we would send back the moods array in response</span>\n})</code></pre>\n<p>The route above will match any <code>GET</code> request to <code>'/moods'</code> and call the callback function, passing in two objects as the first two arguments. These objects represent the request sent to the server and the response that the Express server should eventually send to the client.</p>\n<p>If no routes are matched on a client request, the Express server will handle sending a 404 Not Found response to the client.</p>\n<h2>Sending a Response</h2>\n<p>HTTP follows a one request-one response cycle. Each client expects exactly one response per request, and each server should only send a single response back to the client per request. The client is like a customer at a restaurent ordering a large bowl of cup: the request is sent through the wait staff, the kithcen prepares the soup, and after it is prepared, the wait staff returns it to the customer. In the restaurent, it would be unfortunate if the soup never arrived back to the customer, but it would be equally problematic if the customer was given four large bowls of soup and was asked to consume them all at the exact time. That's impossible with only two hands!</p>\n<p>Express servers send responses using the <code>.send()</code> method on the response object. <code>.send()</code> will take any input and include it into the response body.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> monsters = [\n\t{...},\n\t{...}\n]\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"/monsters\"</span>, <span class=\"hljs-function\">() =></span> {\n\tres.<span class=\"hljs-title function_\">send</span>(monsters)\n})</code></pre>\n<p>In this example, a <code>GET /monsters</code> request will match the route, Express will call the callback function, and the <code>res.send()</code> method will send back an erray of spooky monsters.</p>\n<p>In addition to <code>.send()</code>, <code>.json()</code> can be used to explicitly send JSON-formatted responses. <code>.json()</code> sends any Javascript object passed into it.</p>\n"},{"title":"Custom Decorators in Flask","date":null,"description":"","slug":"custom-decorators-in-flask","id":"custom-decorators-in-flask-729053","tags":[{"name":"flask","id":"flask-309086"}],"content":"<p>A decorator modifies the behavior of a function or a route by wrapping it in another function that adds some extra functionality.</p>\n<p>The decorator is a Python function that takes a view function as an argument and returns a new function that wraps the original view function. When the Flask app receives a request for the route associated with the decorated view function, Flask calls the wrapper function instead of the original view function. The wrapper function then performs some extra work before or after calling the original view function.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, request, jsonify\napp = Flask(__name__)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">require_api_key</span>(<span class=\"hljs-params\">view_function</span>)\n\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorated_function</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n\t\t<span class=\"hljs-keyword\">if</span> request.headers.get(<span class=\"hljs-string\">\"X-API-KEY\"</span>) <span class=\"hljs-keyword\">and</span> request.headers.get(<span class=\"hljs-string\">\"X-API-KEY\"</span>) == <span class=\"hljs-string\">\"my-secret-key\"</span>:\n\t\t\t<span class=\"hljs-keyword\">return</span> view_function(*args, **kwargs)\n\t\t<span class=\"hljs-keyword\">else</span>:\n\t\t\t<span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-string\">\"API Key is missing or invalid\"</span>}), <span class=\"hljs-number\">401</span>\n\t<span class=\"hljs-keyword\">return</span> decorated_function\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/protected\"</span></span>)</span>\n<span class=\"hljs-meta\">@require_api_key</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">protected</span>():\n\t<span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"message\"</span> : <span class=\"hljs-string\">\"This is a protected route\"</span>})\n\t\t</code></pre>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_decorator</span>(<span class=\"hljs-params\">view_function</span>):\n\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper_function</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Args\"</span>, args)\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Kwargs\"</span> : kwargs)\n\t\t<span class=\"hljs-keyword\">return</span> view_function(*args, **kwargs)\n\t<span class=\"hljs-keyword\">return</span> wrapper_function\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/&#x3C;arg1>/&#x3C;arg2>\"</span></span>)</span>\n<span class=\"hljs-meta\">@my_decorator</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_view_function</span>(<span class=\"hljs-params\">arg1, arg2</span>):\n\t<span class=\"hljs-comment\"># View function logic here</span></code></pre>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decoartor</span>(<span class=\"hljs-params\">view_function</span>)\n\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper_function</span>():\n\t\t<span class=\"hljs-comment\"># Perform some extra work here</span>\n\t\tresponse = view_function()\n\t\t<span class=\"hljs-comment\"># Perform some extra work here</span>\n\t\t<span class=\"hljs-keyword\">return</span> response\n\t<span class=\"hljs-keyword\">return</span> wrapper_function    </code></pre>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_decorator</span>(<span class=\"hljs-params\">func</span>):\n<span class=\"hljs-meta\">    @wraps(<span class=\"hljs-params\">func</span>)</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Before the function is called.\"</span>)\n        result = func(*args, **kwargs)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"After the function is called.\"</span>)\n        <span class=\"hljs-keyword\">return</span> result\n    <span class=\"hljs-keyword\">return</span> wrapper\n\n<span class=\"hljs-meta\">@my_decorator</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_function</span>():\n    <span class=\"hljs-string\">\"\"\"This is the docstring for my_function.\"\"\"</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>)\n\nmy_function()\n</code></pre>\n<p>The <code>@wraps(func)</code> is used to presever the original function's metadata, including its docstring. Without the <code>wraps</code> decorator, the docstring of the original function would be replaced with the docstring of the <code>wrapper</code> function.</p>\n"},{"title":"Flask Authentication Using JSON Web Tokens","date":null,"description":"","slug":"flask-authentication-using-json-web-tokens","id":"flask-authentication-using-json-web-tokens-973907","tags":[{"name":"flask","id":"flask-432769"}],"content":"<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, jsonify, request, make_response\n<span class=\"hljs-keyword\">import</span> jwt\n<span class=\"hljs-keyword\">import</span> datetime\n<span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps\napp = Flask(_name_)\n\napp.config[<span class=\"hljs-string\">'SECREY_KEY'</span>] = <span class=\"hljs-string\">\"thisisthesecretkey\"</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">token_required</span>(<span class=\"hljs-params\">f</span>):\n<span class=\"hljs-meta\">\t@wraps(<span class=\"hljs-params\">f</span>)</span>\n\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorated</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n\t\ttoken = request.args.get(<span class=\"hljs-string\">\"token\"</span>)\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> token:\n\t\t\t<span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"message\"</span> : <span class=\"hljs-string\">\"Token is missing\"</span>}), <span class=\"hljs-number\">403</span>\n\t\t<span class=\"hljs-keyword\">try</span>:\n\t\t\tdata = jwt.decode(token, app.config[<span class=\"hljs-string\">\"SECRET_TOKEN\"</span>])\n\t\texecpt:\n\t\t\t<span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"message\"</span> : <span class=\"hljs-string\">\"Token is invalid\"</span>}), <span class=\"hljs-number\">403</span>\n\t<span class=\"hljs-keyword\">return</span> decorated\n\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/unprotected\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">unprotected</span>():\n\t<span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"message\"</span> : <span class=\"hljs-string\">\"Anyone can view this\"</span>})\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/protected\"</span></span>)</span>\n<span class=\"hljs-meta\">@token_required</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">protected</span>():\n\t<span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"message\"</span> : <span class=\"hljs-string\">\"This is only available for people with valid tokens   \"</span>})\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/login\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">login</span>():\n\tauth = request.authorization\n\t<span class=\"hljs-keyword\">if</span> auth <span class=\"hljs-keyword\">and</span> auth.password == <span class=\"hljs-string\">\"password\"</span>:\n\t\ttoken = jwt.encode({<span class=\"hljs-string\">\"user\"</span> : auth.username, <span class=\"hljs-string\">\"exp\"</span> : datetime.datetime.utcnow() + datetimne.timedelta(minutes=<span class=\"hljs-number\">30</span>)}, app.config[<span class=\"hljs-string\">\"SECRET_KEY\"</span>])\n\t\t<span class=\"hljs-keyword\">return</span> jsonify({<span class=\"hljs-string\">\"token\"</span> : token.decode(<span class=\"hljs-string\">\"UTF-8\"</span>)})\n\t<span class=\"hljs-keyword\">return</span> make_response(<span class=\"hljs-string\">\"Could not verify\"</span>, <span class=\"hljs-number\">401</span>, {<span class=\"hljs-string\">\"www-Authenticate\"</span> : <span class=\"hljs-string\">\"Basic realm=Login Required\"</span>})\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n\tapp.run(debug=<span class=\"hljs-literal\">True</span>)</code></pre>\n"},{"title":"Arrays in Golang","date":null,"description":"","slug":"arrays-in-golang","id":"arrays-in-golang-683093","tags":[{"name":"golang","id":"golang-606626"}],"content":"<p><strong>Defining and Using Arrays</strong></p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> names [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>\nnames[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"akshay\"</span>\nnames[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"anubhav\"</span>\nnames[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"shubham\"</span></code></pre>\n<p><strong>Using the Array Literal Syntax</strong></p>\n<pre><code class=\"hljs language-go\">names := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"akshay\"</span>, <span class=\"hljs-string\">\"anubhav\"</span>, <span class=\"hljs-string\">\"shubham\"</span>}</code></pre>\n<p><strong>Creating Multidimensional Arrays</strong></p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> coords [<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">int</span>\n<span class=\"hljs-comment\">// This statement creates an array whose capacity is 3 and whose underlying type is an int array also with a capacity of 3, producing a 3x3 array of int values.</span>\ncoords[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">10</span></code></pre>\n<p><strong>Assigning an Array to a New Variable</strong></p>\n<pre><code class=\"hljs language-go\">names := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"akshay\"</span>, <span class=\"hljs-string\">\"anubhav\"</span>, <span class=\"hljs-string\">\"shubham\"</span>}\notherArray := names\nnames[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"Rahul\"</span>\nfmt.Println(names, otherArray)\n<span class=\"hljs-comment\">// Go works with values, rather than references, by default.</span>\n<span class=\"hljs-comment\">// This behavior extends to arrays, which means that assigning an array to a new variable copies the array and copies the values it contains.</span></code></pre>\n<p><strong>Using a Pointer to an Array</strong></p>\n<pre><code class=\"hljs language-go\">names := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"akshay\"</span>, <span class=\"hljs-string\">\"anubhav\"</span>, <span class=\"hljs-string\">\"shubham\"</span>}\notherArray := &#x26;names\nnames[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"Rahul\"</span>\nfmt.Println(names, *otherArray)</code></pre>\n<p><strong>Comparing Arrays</strong></p>\n<pre><code class=\"hljs language-go\">names := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"akshay\"</span>, <span class=\"hljs-string\">\"anubhav\"</span>, <span class=\"hljs-string\">\"shubham\"</span>}\notherNames := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"akshay\"</span>, <span class=\"hljs-string\">\"anubhav\"</span>, <span class=\"hljs-string\">\"shubham\"</span>}\nsame := names == otherNames\n<span class=\"hljs-comment\">// Arrays are equal if they are of the same type and contain equal elements in the same order.</span></code></pre>\n<p><strong>Enumerating an Array</strong></p>\n<pre><code class=\"hljs language-go\">names := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"akshay\"</span>, <span class=\"hljs-string\">\"anubhav\"</span>, <span class=\"hljs-string\">\"shubham\"</span>}\n<span class=\"hljs-keyword\">for</span> index, value := <span class=\"hljs-keyword\">range</span> names {\n\tfmt.Println(<span class=\"hljs-string\">\"Index:\"</span>, index, <span class=\"hljs-string\">\"Value:\"</span>, value)\n}</code></pre>\n<p><strong>Discarding the Current Index</strong></p>\n<pre><code class=\"hljs language-go\">names := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"akshay\"</span>, <span class=\"hljs-string\">\"anubhav\"</span>, <span class=\"hljs-string\">\"shubham\"</span>}\n<span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> names {\n\tfmt.Println(<span class=\"hljs-string\">\"Value:\"</span>, value)\n}\n<span class=\"hljs-comment\">// The underscore is known as the blank identifier and is used when a feature returns values that are not subsequently used and for which a name should not be assigned</span></code></pre>\n"},{"title":"Caching Templates in Golang","date":null,"description":"","slug":"caching-templates-in-golang","id":"caching-templates-in-golang-356063","tags":[{"name":"golang","id":"golang-318761"}],"content":"<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> render\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"html/template\"</span>\n    <span class=\"hljs-string\">\"log\"</span>\n    <span class=\"hljs-string\">\"net/http\"</span>\n)\n\n  \n\n<span class=\"hljs-keyword\">var</span> tc = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]*template.Template)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RenderTemplate</span><span class=\"hljs-params\">(w http.ResponseWriter, t <span class=\"hljs-type\">string</span>)</span></span> {\n    <span class=\"hljs-keyword\">var</span> templ *template.Template\n    <span class=\"hljs-keyword\">var</span> err <span class=\"hljs-type\">error</span>\n    <span class=\"hljs-comment\">// Check to see if we already have the template in our cache</span>\n    _, inMap := tc[t]\n    <span class=\"hljs-keyword\">if</span> !inMap {\n        <span class=\"hljs-comment\">// need to create the template</span>\n        log.Println(<span class=\"hljs-string\">\"creating template and adding to cache\"</span>)\n        err = createTemplateCache(t)\n        <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n            log.Println(err)\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// We have the template in the cache</span>\n        log.Println(<span class=\"hljs-string\">\"using cached template\"</span>)\n    }\n\n    templ = tc[t]\n    err = templ.Execute(w, <span class=\"hljs-literal\">nil</span>)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        log.Println(err)\n    }\n}\n\n  \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">createTemplateCache</span><span class=\"hljs-params\">(t <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">error</span> {\n    templates := []<span class=\"hljs-type\">string</span>{\n        <span class=\"hljs-string\">\"./templates/\"</span> + t,\n        <span class=\"hljs-string\">\"./templates/base.html\"</span>,\n    }\n    <span class=\"hljs-comment\">// parse the template</span>\n    templ, err := template.ParseFiles(templates...)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> err\n    }\n    <span class=\"hljs-comment\">// add template to cache</span>\n    tc[t] = templ\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}</code></pre>\n"},{"title":"Channels in Golang","date":null,"description":"","slug":"channels-in-golang","id":"channels-in-golang-867601","tags":[{"name":"golang","id":"golang-470805"}],"content":"<p>In Go programming language, a channel is a communication mechanism that allows goroutines (lightweight threads of execution) to communicate with each other and synchronize their actions.</p>\n<p>A channel is a typed conduit through which values can be sent and received. It is similar to a queue or a message broker, where messages are exchanged between different entities in a distributed system.</p>\n<p>Channels can be created using the built-in <code>make</code> function, and are typed by the values they convey. For example, a channel of type <code>int</code> can only send and receive integers.</p>\n<p>Here's an example of creating a channel of type <code>int</code>:</p>\n<pre><code class=\"hljs language-go\">ch := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">int</span>)</code></pre>\n<p>Once a channel is created, values can be sent to the channel using the <code>&#x3C;-</code> operator, and received from the channel using the same operator in the opposite direction. Here's an example of sending and receiving values from a channel:</p>\n<pre><code class=\"hljs language-go\">ch &#x3C;- <span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">// send a value to the channel</span>\nx := &#x3C;-ch <span class=\"hljs-comment\">// receive a value from the channel</span></code></pre>\n<p>Channels can also be used to synchronize the execution of multiple goroutines. For example, a goroutine can wait for a value to be sent to a channel before continuing its execution. This can be done using the <code>select</code> statement, which allows a goroutine to wait on multiple channels simultaneously.</p>\n"},{"title":"Handling JSON in Golang","date":null,"description":"","slug":"handling-json-in-golang","id":"handling-json-in-golang-436795","tags":[{"name":"golang","id":"golang-394227"}],"content":"<h2>Reading JSON</h2>\n<p>In Go, reading JSON data involves decoding a JSON string or stream into a Go data structure using the <code>encoding/json</code> package.</p>\n<p>Here's an example of how to read a JSON string into a Go data structure:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"encoding/json\"</span>\n\t<span class=\"hljs-string\">\"fmt\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> Person <span class=\"hljs-keyword\">struct</span> {\n\tName <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:\"name\"`</span>\n\tAge  <span class=\"hljs-type\">int</span>    <span class=\"hljs-string\">`json:\"age\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tjsonStr := <span class=\"hljs-string\">`{\"name\":\"Alice\",\"age\":30}`</span>\n\n\t<span class=\"hljs-keyword\">var</span> person Person\n\terr := json.Unmarshal([]<span class=\"hljs-type\">byte</span>(jsonStr), &#x26;person)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tfmt.Println(<span class=\"hljs-string\">\"error:\"</span>, err)\n\t}\n\n\tfmt.Println(person.Name)\n\tfmt.Println(person.Age)\n}\n</code></pre>\n<p>In the example above, we first define a Go struct <code>Person</code> that matches the JSON data format. The struct has two fields: <code>Name</code> and <code>Age</code>.</p>\n<p>Then, we use the <code>json.Unmarshal</code> function to decode the JSON string <code>jsonStr</code> into a <code>Person</code> struct instance. The <code>&#x26;person</code> argument passed to <code>json.Unmarshal</code> specifies that the decoded data should be stored in the <code>person</code> variable, which is a pointer to a <code>Person</code> struct.</p>\n<p>If the JSON string is valid and can be decoded into a <code>Person</code> struct, the decoded values will be stored in the <code>person</code> variable. We can then access the <code>Name</code> and <code>Age</code> fields of the <code>person</code> variable to print their values.</p>\n<p>Note that if the JSON string does not match the <code>Person</code> struct format or contains invalid data, the <code>json.Unmarshal</code> function will return an error. It is important to handle these errors properly in your code.</p>\n<h2>Writing JSON</h2>\n<p>In Go, writing JSON data involves encoding a Go data structure into a JSON string or stream using the <code>encoding/json</code> package.</p>\n<p>Here's an example of how to write a Go data structure as a JSON string:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"encoding/json\"</span>\n\t<span class=\"hljs-string\">\"fmt\"</span>\n\t<span class=\"hljs-string\">\"os\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> Person <span class=\"hljs-keyword\">struct</span> {\n\tName <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:\"name\"`</span>\n\tAge  <span class=\"hljs-type\">int</span>    <span class=\"hljs-string\">`json:\"age\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tperson := Person{Name: <span class=\"hljs-string\">\"Alice\"</span>, Age: <span class=\"hljs-number\">30</span>}\n\n\tjsonData, err := json.Marshal(person)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tfmt.Println(<span class=\"hljs-string\">\"error:\"</span>, err)\n\t\tos.Exit(<span class=\"hljs-number\">1</span>)\n\t}\n\n\tfmt.Println(<span class=\"hljs-type\">string</span>(jsonData))\n}\n</code></pre>\n<p>In the example above, we first define a Go struct <code>Person</code> that matches the JSON data format. The struct has two fields: <code>Name</code> and <code>Age</code>.</p>\n<p>Then, we create an instance of the <code>Person</code> struct and populate it with data. In this example, we set the <code>Name</code> field to \"Alice\" and the <code>Age</code> field to 30.</p>\n<p>Next, we use the <code>json.Marshal</code> function to encode the <code>Person</code> struct instance into a JSON string. The resulting <code>jsonData</code> variable will contain a byte slice representing the JSON data.</p>\n<p>Finally, we convert the byte slice to a string using <code>string(jsonData)</code> and print it to the console.</p>\n<p>Note that if the <code>Person</code> struct contains fields that are not compatible with JSON (e.g. a private field), you can use struct tags to customize the JSON encoding behavior. In this example, we use the <code>json</code> struct tag to map the struct field names to the corresponding JSON field names.</p>\n"},{"title":"Reading User Input in Golang","date":null,"description":"","slug":"reading-user-input-in-golang","id":"reading-user-input-in-golang-70100","tags":[{"name":"golang","id":"golang-926187"}],"content":"<p>In Golang, there are multiple ways to take user input. The most common methods are using the <code>fmt</code> package functions like <code>fmt.Scan()</code>, <code>fmt.Scanln()</code>, and <code>fmt.Scanf()</code>, or using the <code>bufio</code> package with <code>bufio.NewReader()</code> or <code>bufio.NewScanner()</code>.</p>\n<p>Here are some examples and trade-offs for each approach:</p>\n<ol>\n<li><code>fmt.Scan()</code>, <code>fmt.Scanln()</code>, and <code>fmt.Scanf()</code>:</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">var</span> name <span class=\"hljs-type\">string</span>\n    fmt.Print(<span class=\"hljs-string\">\"Enter your name: \"</span>)\n    fmt.Scan(&#x26;name)\n    fmt.Printf(<span class=\"hljs-string\">\"Name: %s\"</span>, name)\n}</code></pre>\n<p>Pros:\n- Simple and easy to use for basic input requirements.\n- No need to import additional packages other than <code>fmt</code>.</p>\n<p>Cons:\n- Limited flexibility when handling more complex input situations.</p>\n<p>Note: <code>fmt.Scanln()</code> is used to take input in the next line, while <code>fmt.Scan()</code> is used to take input in the same line <a href=\"https://www.geeksforgeeks.org/how-to-take-input-from-the-user-in-golang/\">Source 1</a>.</p>\n<ol start=\"2\">\n<li><code>bufio.NewReader()</code>:</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"bufio\"</span>\n    <span class=\"hljs-string\">\"fmt\"</span>\n    <span class=\"hljs-string\">\"os\"</span>\n    <span class=\"hljs-string\">\"strings\"</span>\n)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Print(<span class=\"hljs-string\">\"Enter text: \"</span>)\n    reader := bufio.NewReader(os.Stdin)\n    input, err := reader.ReadString(<span class=\"hljs-string\">'\\n'</span>)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        fmt.Println(<span class=\"hljs-string\">\"An error occurred while reading input. Please try again\"</span>, err)\n        <span class=\"hljs-keyword\">return</span>\n    }\n    input = strings.TrimSuffix(input, <span class=\"hljs-string\">\"\\n\"</span>)\n    fmt.Println(input)\n}</code></pre>\n<p>Pros:\n- Good for reading a single line of text.\n- Can handle more complex input scenarios compared to <code>fmt.Scan()</code> functions.</p>\n<p>Cons:\n- Requires importing the <code>bufio</code> package <a href=\"https://freshman.tech/snippets/go/read-console-input/\">Source 4</a>.</p>\n<ol start=\"3\">\n<li><code>bufio.NewScanner()</code>:</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"bufio\"</span>\n    <span class=\"hljs-string\">\"fmt\"</span>\n    <span class=\"hljs-string\">\"os\"</span>\n)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    scanner := bufio.NewScanner(os.Stdin)\n    <span class=\"hljs-keyword\">for</span> {\n        fmt.Print(<span class=\"hljs-string\">\"Enter Text: \"</span>)\n        scanner.Scan()\n        text := scanner.Text()\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(text) != <span class=\"hljs-number\">0</span> {\n            fmt.Println(text)\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">break</span>\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> scanner.Err() != <span class=\"hljs-literal\">nil</span> {\n        fmt.Println(<span class=\"hljs-string\">\"Error: \"</span>, scanner.Err())\n    }\n}</code></pre>\n<p>Pros:\n- Suitable for reading multiple lines of text.\n- More flexible than <code>fmt.Scan()</code> functions.</p>\n<p>Cons:\n- Requires importing the <code>bufio</code> package <a href=\"https://freshman.tech/snippets/go/read-console-input/\">Source 4</a>.</p>\n<p>In summary, if you need simple input handling, go with <code>fmt.Scan()</code> functions. For more complex input scenarios, use <code>bufio.NewReader()</code> or <code>bufio.NewScanner()</code> depending on whether you need to read a single line or multiple lines of text.</p>\n"},{"title":"ResponseWriter in Golang","date":null,"description":"","slug":"responsewriter-in-golang","id":"responsewriter-in-golang-470211","tags":[{"name":"golang","id":"golang-632005"}],"content":"<p>In Go, the <code>ResponseWriter</code> interface is provided by the <code>net/http</code> package and is used to write the HTTP response back to the client. When a client sends an HTTP request to a server, the server processes the request and generates an HTTP response. The <code>ResponseWriter</code> interface allows the server to write the response back to the client.</p>\n<p>The <code>ResponseWriter</code> interface has a few methods that are used to write the response:</p>\n<ul>\n<li>\n<p><code>Header()</code> - This method returns a <code>Header</code> object that represents the headers of the HTTP response. You can use this method to set response headers such as the content type, cache-control, etc.</p>\n</li>\n<li>\n<p><code>Write([]byte)</code> - This method is used to write the response body. The body is typically a byte slice that represents the content of the response.</p>\n</li>\n<li>\n<p><code>WriteHeader(int)</code> - This method is used to set the HTTP status code of the response. For example, if the server wants to send a response with a 404 status code (page not found), it can call this method with the argument 404.</p>\n</li>\n</ul>\n<p>Here's an example of how to use the <code>ResponseWriter</code> interface in Go:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> {\n    w.Header().Set(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-string\">\"text/plain\"</span>)\n    w.WriteHeader(http.StatusOK)\n    w.Write([]<span class=\"hljs-type\">byte</span>(<span class=\"hljs-string\">\"Hello, World!\"</span>))\n}\n</code></pre>\n<p>In this example, the <code>handler</code> function takes a <code>ResponseWriter</code> and an <code>http.Request</code> object as arguments. It first sets the content type header to <code>text/plain</code>, then sets the HTTP status code to <code>200 OK</code> using <code>WriteHeader</code>, and finally writes the response body <code>Hello, World!</code> using the <code>Write</code> method.</p>\n"},{"title":"Slices in Golang","date":null,"description":"","slug":"slices-in-golang","id":"slices-in-golang-727823","tags":[{"name":"golang","id":"golang-456013"}],"content":"<p>Slices are a variable-length array. They are useful when you do not know how many values you need to store or when the number changes over time.</p>\n<h3>Defining a Slice</h3>\n<pre><code class=\"hljs language-go\">names := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">3</span>)</code></pre>\n<p>The <code>make</code> function accepts arguments that specify the type and length of the slice.</p>\n<h3>Using the Literal Syntax</h3>\n<pre><code class=\"hljs language-go\">names := []<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>}</code></pre>\n<p>The slice is a data structure that contains three values: a pointer to the array, the length of the slice, and the capacity of the slice.</p>\n<h3>Appending elements to a Slice</h3>\n<pre><code class=\"hljs language-go\">names := []<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>}\nnames := <span class=\"hljs-built_in\">append</span>(names, <span class=\"hljs-string\">\"d\"</span>)</code></pre>\n<p>The built-in <code>append</code> function accepts a slice and one or more elements to add to the slice, separated by commas and returns a new slice.</p>\n<h3>Allocating Additional Slice Capacity</h3>\n<p>Creating and copying arrays can be inefficient. If you expect that you will need to append items to a slice, you can specify additional capacity when using the <code>make</code> function.</p>\n<pre><code class=\"hljs language-go\">names := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)</code></pre>\n<p>Slices have a <em>length</em> and a <em>capacity</em>. The length of a slice is how many values it can currently contain, while the number of elements that can be stored in the underlying array before the slice must be resized and a new created.</p>\n<pre><code class=\"hljs language-go\">names := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\nnames[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"a\"</span>\nnewNames := <span class=\"hljs-built_in\">append</span>(names, <span class=\"hljs-string\">\"b\"</span>)\nnewNames[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"A\"</span>\nfmt.Println(names, newNames) <span class=\"hljs-comment\">// => [A  ] [A   b]</span>\n</code></pre>\n<p>The underlying array is not replaced when the <code>append</code> function is called on a slice with enough capacity to accommodate the new elements.</p>\n<p>The built-in <code>len</code> and <code>cap</code> functions returns the length and capacity of a slice.</p>\n<p>If you define a Slice but do not initialize it, then the result is a slice that has a length of zero and a capacity of zero, and this will cause an error when an element is appended to it.</p>\n<h3>Appending One Slice to Another</h3>\n<p>The <code>append</code> function can be used to append one slice to another.</p>\n<pre><code class=\"hljs language-go\">names := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\nnames[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"Kayak\"</span>\nnames[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Lifejacket\"</span>\nnames[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"Paddle\"</span>\nmoreNames := []<span class=\"hljs-type\">string</span> { <span class=\"hljs-string\">\"Hat Gloves\"</span>}\nappendedNames := <span class=\"hljs-built_in\">append</span>(names, moreNames...)</code></pre>\n<h3>Creatting Slices from Existing Arrays</h3>\n<pre><code class=\"hljs language-go\">products := [<span class=\"hljs-number\">4</span>]<span class=\"hljs-type\">string</span> { <span class=\"hljs-string\">\"Kayak\"</span>, <span class=\"hljs-string\">\"Lifejacket\"</span>, <span class=\"hljs-string\">\"Paddle\"</span>, <span class=\"hljs-string\">\"Hat\"</span>}\nfewNames := products[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>]\nallNames := products[:]</code></pre>\n<p>The <code>products</code> variable is assigned a standard, fixed-length array containing <code>string</code> values. The array is used to create slices using a range.</p>\n<p>The two slices are backed by the same array. The <code>fewNames</code>  has a partial view of the array, while the <code>allNames</code> slice is a view of the entire array.</p>\n<h3>Appending Elements When using Arrays for Slices</h3>\n<p>The relationship between the slice and the existing array can create different results when appending elements.</p>\n<p><strong>Displaying Slice Length and Capacity</strong></p>\n<pre><code class=\"hljs language-go\">products := [<span class=\"hljs-number\">4</span>]<span class=\"hljs-type\">string</span> { <span class=\"hljs-string\">\"Kayak\"</span>, <span class=\"hljs-string\">\"Lifejacket\"</span>, <span class=\"hljs-string\">\"Paddle\"</span>, <span class=\"hljs-string\">\"Hat\"</span>}\nsomeNames := products[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>]\nallNames := products[:]\n\nfmt.Println(<span class=\"hljs-built_in\">len</span>(someNames), <span class=\"hljs-built_in\">cap</span>(someNames)) <span class=\"hljs-comment\">// => 2 , 3</span>\nfmt.Println(<span class=\"hljs-built_in\">len</span>(allNames), <span class=\"hljs-built_in\">cap</span>(allNames)) <span class=\"hljs-comment\">// => 4, 4</span></code></pre>\n<p><strong>Appending an Element to a Slice</strong></p>\n<pre><code class=\"hljs language-go\">products := [<span class=\"hljs-number\">4</span>]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"Kayak\"</span>, <span class=\"hljs-string\">\"Lifejacket\"</span>, <span class=\"hljs-string\">\"Paddle\"</span>, <span class=\"hljs-string\">\"Hat\"</span>}\nsomeNames := products[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>]\nallNames := products[:]\nsomeNames = <span class=\"hljs-built_in\">append</span>(someNames, <span class=\"hljs-string\">\"New\"</span>)\nfmt.Println(someNames, allNames) <span class=\"hljs-comment\">// => [Lifejacket Paddle New] [Kayak Lifejacket Paddle New]</span></code></pre>\n<p>The slice <code>someNames</code> had the capacity to accommodate the new element without resizing, but the array location that will be used to store the element is already included in the <code>allNames</code> slice, which means that the <code>append</code> operation expands the <code>someNames</code> slice and changes one of the values that can be accessed through the <code>allNames</code> slice.</p>\n<h3>Making Slices Predicable</h3>\n<p>The way that slices can share an array causes confusion. Some developers expect slices to be independent and get unexpected results when a value is stored in an array used by multiple slices. Other developers write code that expects shared arrays and get unexpected results when a resize separates slices.</p>\n<p>Slices can appear unpredictable but only if you treat them inconsistently. My advice is to divide slices into two categories, decide which of them a slice belongs to when it is created, and not change that category.</p>\n<p>The first category is as a fixed-length view into a fixed-length array. This is more useful than it sounds because slices can be mapped onto a specific region of an array, which can be selected programmatically. In this category, you can change the elements in the slice but not append new elements, meaning that all slices mapped into that array will use the modified elements.</p>\n<p>The second category is as a variable-length data collection. I make sure each slice in this category has its own backing array, which is not shared by any other slice. This approach allows me to freely add new elements to the slice without having to worry about the impact on other slices.</p>\n<p>If you get bogged down with slices and don’t get the results you expect, then ask yourself which category each of your slices falls into and whether you are treating a slice inconsistently or creating slices from different categories from the same source array</p>\n<p>If you use a slice as a fixed view onto an array, then you can expect multiple slices to give you a consistent view of that array, and any new values you assign will be reflected by all of the slices that map into the modified element.</p>\n<h3>Specifying Capacity When Creating a Slice from an Array</h3>\n<p>Ranges can include a maximum capacity, which provides some degree of control over when arrays will be duplicated.</p>\n<pre><code class=\"hljs language-go\">products := [<span class=\"hljs-number\">4</span>]<span class=\"hljs-type\">string</span> { <span class=\"hljs-string\">\"Kayak\"</span>, <span class=\"hljs-string\">\"Lifejacket\"</span>, <span class=\"hljs-string\">\"Paddle\"</span>, <span class=\"hljs-string\">\"Hat\"</span>}\nsomeNames := products[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">3</span>]</code></pre>\n<p>The additional value, known as the max value, is specified after the high value, and must be within the bounds of the array that is being sliced.</p>\n<p>The max value doesn’t specify the maximum capacity directly. Instead, the maximum capacity is determined by subtracting the low value from the max value. In the case of the example, the max value is 3, and the low value is 1, which means that the capacity will be limited to 2. The result is that the append operation causes the slice to be resized and allocated its own array, rather than expanding in the existing array.</p>\n<h3>Creating Slices from Other Slices</h3>\n<p>Slices can also be created from other slices, although the relationship between slices isn’t preserved if they are resized.</p>\n<pre><code class=\"hljs language-go\">products := [<span class=\"hljs-number\">4</span>]<span class=\"hljs-type\">string</span> { <span class=\"hljs-string\">\"Kayak\"</span>, <span class=\"hljs-string\">\"Lifejacket\"</span>, <span class=\"hljs-string\">\"Paddle\"</span>, <span class=\"hljs-string\">\"Hat\"</span>}\nallNames := products[<span class=\"hljs-number\">1</span>:]\n<span class=\"hljs-comment\">// The range creates a slice that is mapped onto all but the first element of the source array.</span>\nsomeNames := allNames[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-comment\">// This range creates a slice that maps onto the second and third elements in the allNames slice.</span>\n\nallNames = <span class=\"hljs-built_in\">append</span>(allNames, <span class=\"hljs-string\">\"Gloves\"</span>)\nallNames[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"Canoe</span></code></pre>\n<p>Using one slice to create another is an effective way of carrying over offset start locations. But remember that slices are essentially pointers to sections of arrays, which means they can’t point at another slice. In reality, the ranges are used to determine the mappings for slices that are backed by the same array.</p>\n<p><img src=\"https://i.imgur.com/8UUxZmN.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/F4ILGi1.png\" alt=\"\"></p>\n<p>The slices behave consistently and will be resized if elements are appended when there is no available capacity, at which point they will no longer share a common array.</p>\n<h3>Using the copy Function</h3>\n<p>The copy function is used to copy elements between slices. This function can be used to ensure that slices have separate arrays and to create slices that combine elements from different sources.</p>\n<p>The copy function accepts two arguments, which are the destination slice and the source slice.</p>\n<p><img src=\"https://i.imgur.com/4hNn3Kb.png\" alt=\"\"></p>\n<p>The function copies elements to the target slice. The slices don’t need to have the same length because the copy function will copy elements only until the end of the destination or source slice is reached. The destination slice is not resized, even when there is capacity available in the existing backing array, which means that you must ensure there is sufficient length to accommodate the number of elements you want to copy.</p>\n"},{"title":"Serving HTML Templates in Golang","date":null,"description":"","slug":"serving-html-templates-in-golang","id":"serving-html-templates-in-golang-428523","tags":[{"name":"golang-web","id":"golang-web-98158"}],"content":"<p>In Go, serving HTML templates involves using the <code>html/template</code> package to parse and execute template files, and the <code>net/http</code> package to serve the generated HTML to clients.</p>\n<p>Here's an example of how to serve an HTML template in Go:</p>\n<ol>\n<li>Create an HTML template file (e.g. <code>template.html</code>) with placeholders for dynamic data. For example:</li>\n</ol>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>{{.Title}}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{{.Heading}}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{{.Message}}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre>\n<ol start=\"2\">\n<li>Define a Go struct that holds the data to be displayed in the template. For example:</li>\n</ol>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> TemplateData <span class=\"hljs-keyword\">struct</span> {\n    Title   <span class=\"hljs-type\">string</span>\n    Heading <span class=\"hljs-type\">string</span>\n    Message <span class=\"hljs-type\">string</span>\n}</code></pre>\n<ol start=\"3\">\n<li>Parse the template file using the <code>template.ParseFiles</code> function. For example:</li>\n</ol>\n<pre><code class=\"hljs language-go\">tmpl, err := template.ParseFiles(<span class=\"hljs-string\">\"template.html\"</span>)\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-built_in\">panic</span>(err)\n}\n</code></pre>\n<ol start=\"4\">\n<li>Define a handler function that executes the template and writes the generated HTML to the HTTP response. For example:</li>\n</ol>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handleTemplate</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span> {\n    data := TemplateData{\n        Title:   <span class=\"hljs-string\">\"My Page\"</span>,\n        Heading: <span class=\"hljs-string\">\"Welcome to my page\"</span>,\n        Message: <span class=\"hljs-string\">\"This is a test message\"</span>,\n    }\n    err := tmpl.Execute(w, data)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-built_in\">panic</span>(err)\n    }\n}\n</code></pre>\n<ol start=\"5\">\n<li>Register the handler function with the HTTP server using the <code>http.HandleFunc</code> function. For example:</li>\n</ol>\n<pre><code class=\"hljs language-go\">http.HandleFunc(<span class=\"hljs-string\">\"/\"</span>, handleTemplate)</code></pre>\n<ol start=\"6\">\n<li>Start the HTTP server using the <code>http.ListenAndServe</code> function. For example:</li>\n</ol>\n<pre><code class=\"hljs language-go\">err := http.ListenAndServe(<span class=\"hljs-string\">\":8080\"</span>, <span class=\"hljs-literal\">nil</span>)\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-built_in\">panic</span>(err)\n}</code></pre>\n<p>When a client makes a request to the root URL (\"/\"), the <code>handleTemplate</code> function will be called. This function creates a <code>TemplateData</code> struct with some example data, executes the <code>tmpl</code> template with this data using the <code>tmpl.Execute</code> function, and writes the generated HTML to the HTTP response using the <code>http.ResponseWriter</code> interface.</p>\n<p>To run the web application, save the code to a file (e.g. <code>main.go</code>) and run the following command in a terminal:</p>\n<p><code>$ go run main.go</code></p>\n<p>This will start the web server and output a message indicating that it's listening on port 8080. You can then open a web browser and navigate to <code>http://localhost:8080</code> to see the rendered HTML template.</p>\n"},{"title":"Serving Stylesheets in Golang","date":null,"description":"","slug":"serving-stylesheets-in-golang","id":"serving-stylesheets-in-golang-355572","tags":[{"name":"golang-web","id":"golang-web-981939"}],"content":"<p>In Go, you can serve static files such as CSS stylesheets using the <code>http.FileServer</code> and <code>http.Handle</code> functions provided by the <code>net/http</code> package.</p>\n<p>Here's an example of how to serve a CSS stylesheet in Go:</p>\n<ol>\n<li>Create a directory to store your static files (e.g. <code>static/</code>).</li>\n<li>Move the CSS stylesheet file to the static directory.</li>\n<li>Use the <code>http.FileServer</code> function to create a file server that serves files from the static directory. For example:</li>\n</ol>\n<pre><code class=\"hljs language-go\">fs := http.FileServer(http.Dir(<span class=\"hljs-string\">\"static\"</span>))</code></pre>\n<ol start=\"4\">\n<li>Use the <code>http.Handle</code> function to register the file server with a URL prefix. For example:</li>\n</ol>\n<pre><code class=\"hljs language-go\">http.Handle(<span class=\"hljs-string\">\"/static/\"</span>, http.StripPrefix(<span class=\"hljs-string\">\"/static/\"</span>, fs))\n</code></pre>\n<p>This code maps requests to URLs that start with \"/static/\" to the file server, and strips the \"/static/\" prefix from the URLs before looking for files on the file system. This allows you to use relative URLs in your HTML files, such as <code>&#x3C;link rel=\"stylesheet\" href=\"/static/style.css\"></code>.</p>\n<p>When a client requests a file from the \"/static/\" URL prefix (e.g. <code>/static/style.css</code>), the <code>http.FileServer</code> function will look for the file in the <code>static/</code> directory and serve it to the client with the appropriate content type.</p>\n"},{"title":"Simple Web Server in Golang","date":null,"description":"","slug":"simple-web-server-in-golang","id":"simple-web-server-in-golang-210831","tags":[{"name":"golang-web","id":"golang-web-25116"}],"content":"<p>Here is an example of a simple \"Hello World\" web application in Go using the <code>net/http</code> package.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"fmt\"</span>\n\t<span class=\"hljs-string\">\"net/http\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n\thttp.HandleFunc(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request )</span></span> {\n\t\tn, err := fmt.Fprintf(w, <span class=\"hljs-string\">\"Hello World!\"</span>)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t\t}\n\t\tfmt.Println(<span class=\"hljs-string\">\"Bytes written:\"</span>, n)\n\t\t\n\t})\n\tfmt.Println(<span class=\"hljs-string\">\"Starting server on the port 8000...\"</span>)\n\terr := http.ListenAndServe(<span class=\"hljs-string\">\":8000\"</span>, <span class=\"hljs-literal\">nil</span>)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n}</code></pre>\n<p>The <code>http.HandleFunc</code> function is used to map incoming requests to the root <code>(\"/\")</code> to a function that writes the \"Hello, World!\" response to the client using the <code>fmt.Fprintf</code> function.</p>\n"},{"title":"Artificial Intelligence on the cloud","date":null,"description":"","slug":"artificial-intelligence-on-the-cloud","id":"artificial-intelligence-on-the-cloud-835099","tags":[{"name":"introduction-to-cloud-computing-week-1","id":"introduction-to-cloud-computing-week-1-487940"}],"content":"<p>Making sense of the endless streams of data is where Artificial Intelligence, or AI, comes \nin. \nMany of the applications where we apply AI today simply wouldn't have been possible without \nthe scalable, on-demand computing offered by the cloud. </p>\n<p>There is a three-way relationship between AI, IoT, and Cloud. \nJust as AI consumes the data produced by IoT devices, the IoT devices’ behavior can be \ndictated based on responses from AI. </p>\n<p>For example, Smart Assistants, a common type of IoT device, continues to learn about the \nuser’s preferences as usage grows, such as the songs they like, their home temperature \nsettings, preferred meal times, and over time they anticipate their actions based on the \nuser’s past history.</p>\n<p>So, what we see is a symbiotic relationship between IoT, AI, and Cloud. \nIoT delivers the data, AI powers the insights, and both these emerging technologies leverage \ncloud’s scalability and processing power to provide value to individuals and businesses \nalike. </p>\n<p>Let’s look at how the United States Tennis Association, USTA, is using AI on the Cloud \nto deliver unique digital experiences to millions of fans around the world. </p>\n<p>For two weeks at the end of every summer, tennis fans around the world turn their eyes \nto New York city, and the US Open. </p>\n<p>Hundreds of thousands onsite, and millions more online. But where you see tennis, IBM sees data; \nthe scores and statistics, the sights, the sounds. </p>\n<p>IBM integrates and analyzes the data flowing from the court. \nAnd delivers unique digital experiences to more than ten million tennis fans around the \nworld. </p>\n<p>And we do it all in the IBM Cloud. \nThe IBM Cloud is the digital foundation of the US Open.</p>\n<p>It scales rapidly to meet a five thousand percent increase in web traffic and it delivers a consistant experience to our fans all around the globe. </p>\n<p>And with Watson on the IBM Cloud, we can engage fans in unique ways, year after year. \nSlam Tracker analyzes more than twenty-six million historical data points. \nIt gives fans deep insight into featured matches, and it can see the momentum of a match shifting \nin real time. </p>\n<p>AI Highlights uses Watson to process thousands of hours of US Open video. \nIt can hear the cheers of the crowd. </p>\n<p>It can see a player celebrating and it knows what makes a great tennis highlight. </p>\n<p>And this year we're putting the power of AI Highlights into the hands of US players and \ncoaches. </p>\n<p>Watson is analyzing match video, so coaches can quickly find the footage they need to guide the development of their players. </p>\n<p>And if you need to know where to park, find a good burger, or grab the latest US Open \ngear, you can find the answers with the Guest Information feature in the US Open app \nand mobile web, using Watson. </p>\n<p>We work with IBM because they keep us on the cutting edge of the fan experience. </p>\n<p>They help us to adopt the latest technology, like Cloud and AI. \nAnd they bring data to life in a way that's accessible and engaging for our fans. </p>\n<p>In the next video, we’re going to look at how Blockchain and Analytics on the cloud \nare impacting businesses.</p>\n"},{"title":"Blockchain and Analytics in the Cloud","date":null,"description":"","slug":"blockchain-and-analytics-in-the-cloud","id":"blockchain-and-analytics-in-the-cloud-276652","tags":[{"name":"introduction-to-cloud-computing-week-1","id":"introduction-to-cloud-computing-week-1-70842"}],"content":"<p>Blockchain is a secure, distributed, open technology that can help speed up \nprocesses, lower costs, and build transparency and traceability in \ntransactional applications. It is an immutable Network allowing members to \nview only those transactions that are relevant to them. The more open, diverse, \nand distributed the network, the stronger the trust and transparency in the data \nand transactions.</p>\n<p>85% of businesses today rely on multiple clouds to meet their IT needs, with more than 70% using more than three. These businesses need to be able to move applications and data across multiple clouds easily and securely, leading to the emerging demand to build and manage business applications such as blockchain for the multi cloud environment.</p>\n<p>Blockchain and AI, much like IoT and AI, powered by the cloud, also have a three-way relationship. Where blockchain technology provides the trusted, decentralized source of truth, AI powers the analytics and decision-making from the data collected, and cloud provides globally distributed, scalable, and cost-efficient computing resources to support both the unprecedented amounts of data being collected and the processing power required to draw insights from this data.</p>\n<p>Blockchain serves to make AI more understandable by recording the data and variables that go \ninto a decision made in an AI algorithm, leading to greater trust and transparency in the conclusions and decisions made by these algorithms. Let's look at how blockchain on the cloud is helping farmers reduce waste at times of recall by building traceability and transparency in the food supply chain.</p>\n<p>For farmers here, this is our life's work. 60% of the nation's lettuce is grown right here in Salinas. When it comes down to how plants are looked at, I really relate back to how humans are raised and nurtured. I want to make sure that everything is safe before it leaves the ranch. But when a recall happens, perfectly good food goes to waste. You have to take all product off your shelf, \nno matter what age, no matter where it came from. And it takes resources to grow those things. Now we're actually eating into our future food supply. But we've gotta way around that. With Blockchain technology on the IBM cloud we're able to track our product within seconds. Giving the consumers instant access where the product came from, in case there's any recall so we don't \nhave to take all the food off the shelves. Having that instant access allows you to reduce the waste. There's a lot of starving people in this world. I want to be a generation that fixes that.</p>\n<p>Analytics technologies on the cloud leverage the flexibility, scalability, and computing resources available on the cloud. From tracking trends on social media to predict future events, to analyzing data to build machine learning models that can be deployed in cognitive applications, cloud provides the integrated environment that is required to leverage data for continuous improvement and accelerated business growth. Let's look at how KONE has invested in cloud and IoT technologies to power a data analytics and predictive maintenance solution for city infrastructure used by more than 1 billion people daily. At KONE we manufacture elevators, escalators, auto \nwalks, and doors. All of these devices are streams of data that we are collecting. In order to process those streams, we need a scalable way of handling the amount of data that is coming in. And that's where cloud function fits in perfectly. We handle that data with event-driven architecture. We use functions to persist that data, and to generate further events on that data, that are then utilized and consumed by applications, our customers and users. In our analytics \nplatform, we analyzed the set of data and we generate value predictive in a sense that we can predict the failure rate to a certain percentage that is about to happen in the future for our equipment. And this allows us to perform predictive maintenance. And this is kind of the whole concept that we have behind our 24/7 connected services, which is a promise to our customers that, the equipment is connected to the cloud and we are monitoring it and that's where we \ngenerate the real a value for our customers. At the moment we use almost all aspects of the IBM cloud. We use storage from the cloud. We use cloud function. We use messaging services. We \nuse IoT services. So a number of services already in use and platform and that use will only grow as our digital footprint in the industry grows.</p>\n"},{"title":"Internet of Things in the Cloud","date":null,"description":"","slug":"internet-of-things-in-the-cloud","id":"internet-of-things-in-the-cloud-454454","tags":[{"name":"introduction-to-cloud-computing-week-1","id":"introduction-to-cloud-computing-week-1-348337"}],"content":"<p>In this new era, technologies such as Internet of Things, Big Data, artificial intelligence, and blockchain are disrupting existing business models and industries while creating unprecedented opportunities for businesses to differentiate themselves and create value for their clients. The power, scale, dynamic nature, and economies of the cloud resources make cloud computing a key enabler for adoption and evolution of these emerging technologies.</p>\n<p>We will look at how the Internet of Things, or IoT, powered by cloud, is making a big difference for businesses today. The IoT is a giant network of connected things and people that have changed much of how we live our daily lives - from the way we drive, to how we make purchases, monitoring our personal health, and even how get energy for our homes. Smart devices and sensors are continuously tracking and collecting data. For example, a small building could have thousands of sensors measuring all kinds of data related to thermal, optical, structural, and environment stimuli. An unprecedented amount of data is being generated, putting a tremendous strain on the internet. That is where the cloud comes in, by connecting the IoT device user to the cloud - be it for device registration, device identity, storing data, or accessing enterprise data. Data collected through IoT devices is stored and processed on the cloud since IoT devices can be in a state of motion, the cloud services serves as a collection point in closest proximity, minimizing the latency in reporting up the data points and providing a response back to the IoT application. So, from IoT platforms to running entirely on the cloud to the interfaces used by customers to interact with these devices, to the backend analytics platforms - cloud computing supports and enables IoT. Cloud service providers also offer specialized IoT services designed to help speed up the development of IoT solutions. Let's look at a case study that demonstrates the use of the IoT on \nthe cloud to combat the poaching of endangered rhinos at Welgevonden by \nmaking poaching predictable.</p>\n<p>The rhinos have become one of the the key species that is becoming endangered due \nto poaching throughout Africa. But now especially in South Africa. \nUp until now, poachers have been increasing in numbers, and they become \nmore militarized with weapons. And so of course we've had to do the same. This is \nnot sustainable. The only way to do this better, is to bring in technology and \nthings that they do not have. This endangered species is getting help from \nsome unexpected friends, the zebra and antelope. They're wearing IoT sensors \nconnected to the IBM cloud. When poachers enter the area, the animals run for it, \nwhich alerts Rangers who can track their emotions and help stop them before any \nharm is done. It's a smart way to help increase the Rhino population and turn \nthe poachers into the endangered species.</p>\n"},{"title":"Deployment models - summary","date":null,"description":"","slug":"deployment-models--summary","id":"deployment-models--summary-887258","tags":[{"name":"introduction-to-cloud-computing-week-2","id":"introduction-to-cloud-computing-week-2-183564"}],"content":"<ul>\n<li>Deployment models indicate where the infrastructure resides who owns and manages it, and how cloud resources and services are made available to users. There are three main deployment models available on the cloud - Public, Private, and Hybrid.</li>\n<li>In the Public cloud model, the service providers owns, manages, provisions, and maintains the physical infrastructure such as data centers, servers, networking equipment, and storage, with users accessing virtualized compute, networking and storage resources as services.</li>\n<li>In the private cloud model, the provider provisions the cloud infrastructure for exclusive use by a single organization. The private cloud infrastructure can be internal to the organization and run on-premises or it can be on a public cloud, as in case of Virtual Private Clouds (VPC) and be owned, managed, and operated by the cloud provider.</li>\n<li>In the Hybrid cloud model, an organization's on-premise private cloud and third-party public cloud is connected as a single, flexible structure leveraging the features and benefits of both Public and Private clouds.</li>\n</ul>\n"},{"title":"Hybrid Cloud","date":null,"description":"","slug":"hybrid-cloud","id":"hybrid-cloud-376376","tags":[{"name":"introduction-to-cloud-computing-week-2","id":"introduction-to-cloud-computing-week-2-378923"}],"content":"<ol>\n<li>Hybrid Cloud is a computing environment that connects an organization's on-premise private cloud and third-party public cloud into a single flexible infrastructure for running the organization's applications and workloads.</li>\n<li>The mix of public and private cloud resources gives organizations the flexibility to choose the optimal cloud for each application or workload.</li>\n<li>Workloads move freely between the two clouds as needs change.</li>\n<li>Organizations can choose to run the sensitive highly regulated and mission-critical applications    or workloads with reasonably constant performance and capacity requirements on private Cloud infrastructure. While deploying the less sensitive and more dynamic workloads on the public cloud.</li>\n<li>With proper integrations and orchestration between the public and private clouds, you can leverage additional public cloud capacity to accommodate a spike in demand for a private cloud application also known as cloud bursting.</li>\n<li>The key tenants of a hybrid cloud are interoperability, scalability and portability.</li>\n<li>Hybrid cloud is interoperable which means, that the public and private cloud services can understand each other's APIs, configuration, data formats, and forms of authentication and authorization.</li>\n<li>When there is a spike in demand a workload running on the private cloud can leverage the additional cloud capacity making it scalable.</li>\n<li>A hybrid cloud is also portable, since you are no longer locked in with a specific vendor, you can move applications and data not just between on-premise and cloud systems, but also between cloud service providers.</li>\n<li>Hybrid is about taking the best of both worlds.</li>\n<li>There are two common types of hybrid clouds, hybrid mono-cloud and hybrid multi-cloud.</li>\n<li>A Hybrid Monocloud is a hybrid cloud with one cloud provider, while a Hybrid Multicloud is an open standards-based stack that can be deployed on any public cloud infrastructure.</li>\n<li>The difference lies in the flexibility that the hybrid multicloud offers organizations to move workloads and environments from one vendor to another.</li>\n<li>There is also a hybrid multicloud called the, Composite Multicloud, which makes the flexibility even  more granular as it distributes single applications across multiple providers, allowing you to move application components across cloud services and vendors as needed.</li>\n<li>Hybrid cloud offers significant benefits in areas of security and compliance, scalability and resilience, resource optimizations, and cost saving.</li>\n<li>A hybrid cloud lets organizations deploy highly regulated or sensitive workloads in a private cloud while running the less-sensitive workloads on a public cloud.</li>\n<li>Using a hybrid cloud you can scale up quickly, inexpensively, and even automatically using the public cloud infrastructure, all without impacting the other workloads running on your private cloud. Because you are not locked-in with a specific-vendor and also do not have to make either-or decisions between the different cloud models, you can make cost-efficient use of your infrastructure budget.</li>\n<li>You can maintain workloads where they are most efficient, spin-up environments using pay-as-you-go in public cloud, and rapidly adopt new tools as you need them.</li>\n<li>A typical organization will have a range of applications and workloads spread across private public and traditional IT environments. This represents a range of opportunities for optimizations via a hybrid cloud approach. Let's look at some increasingly common hybrid cloud use cases.</li>\n<li><strong>Software-as-a-Service integration</strong>: Through hybrid integration organizations are connecting SaaS applications available in the public cloud to their existing public cloud, private cloud, and traditional IT applications to deliver new solutions.</li>\n<li><strong>Data and AI integration</strong>: Organizations today are creating richer and more personal experiences by combining new data sources on the public clou. Such as weather, social, the IoT, CRM, and ERP, with existing data in analytics, machine learning, and AI capabilities.</li>\n<li><strong>Enhancing legacy apps</strong>:  An increasing number of organizations are using public cloud services to upgrade their user experience of their on-premises applications and deploy them globally to new devices, while incrementally modernizing their Core Business Systems.</li>\n<li><strong>VM ware migration</strong>: More and more organizations are lifting and shifting their on-premises virtualized workloads to a public cloud without conversion or modification to reduce their on-premises data center footprint and position themselves to scale without added capital expense.</li>\n<li>Hybrid cloud is a concept that is been around for quite some time, but we are finding that it is becoming increasingly used to architect and modernize existing or legacy applications.</li>\n<li>According to research we found that 75% of non-cloud applications will be moving to the cloud in the next three years.</li>\n</ol>\n"},{"title":"IaaS - Infrastructure as a Service","date":null,"description":"","slug":"iaas--infrastructure-as-a-service","id":"iaas--infrastructure-as-a-service-821781","tags":[{"name":"introduction-to-cloud-computing-week-2","id":"introduction-to-cloud-computing-week-2-428100"}],"content":"<p>Infrastructure-as-a-Service, commonly referred to as “IaaS,” – or simply “eye-es” -is a form of cloud computing that delivers fundamental compute, network, and storage resources to consumers on-demand, over the internet, on a pay-as-you-go basis.</p>\n<p>The cloud provider hosts the infrastructure components traditionally present in an on-premises \ndata center as well as the virtualization or hypervisor layer.</p>\n<p>In an IaaS Cloud environment, customers can create or provision virtual machines (or VMs) in their choice of Region and Zone available from the Cloud Provider.</p>\n<p>These VMs typically come pre-installed the customer’s choice of operating system. The customers can then deploy middleware, install applications, and run workloads on these VMs.</p>\n<p>They can also and create storage for their workloads and backups. Cloud providers often provide customers the ability to track and monitor the performance and usage of their cloud services and manage disaster recovery.</p>\n<p>Let’s look at the key components of cloud infrastructure:</p>\n<ul>\n<li><strong>Physical data centers</strong>: IaaS providers manage large data centers that contain the physical  machines required to power the various layers of abstraction on top of them. In most IaaS models, end users do not interact directly with the physical infrastructure but experience it as a service provided to them.</li>\n<li><strong>Compute:</strong> IaaS providers manage the hypervisors and end-users programmatically provision virtual instances with desired amounts of compute, memory, and storage resources. Cloud compute typically comes with supporting services like auto scaling and load balancing that provide scalability and high performance.</li>\n<li><strong>Network:</strong> Users get access to networking resources on the cloud through virtualization or programmatically, through APIs.</li>\n<li><strong>Storage:</strong> There are three types of cloud data storage: object, file, and block storage. Object storage is the most common mode of storage in the cloud, given that it is highly distributed and resilient.</li>\n</ul>\n<h2>Use Cases</h2>\n<p>IaaS supports a wide array of use cases. We’ll look at some typical use cases here. </p>\n<p>Organizations today are using cloud infrastructure services to enable their teams to set up test \nand development environments faster, helping create new applications more quickly. </p>\n<p>By abstracting the low-level components, cloud infrastructure is helping developers focus more on business logic than infrastructure management. </p>\n<p>Business continuity and disaster recovery require a significant amount of technology and staff investments. IaaS is helping organizations reduce this cost and make applications and data accessible as usual during a disaster or outage. </p>\n<p>Organizations are using cloud infrastructure to deploy their web applications faster and also scale infrastructure up and down as demand fluctuates. </p>\n<p>Organizations are leveraging the high-performance computing capabilities of cloud infrastructure to solve complex problems involving millions of variables and calculations such as climate and weather predictions and financial modeling. </p>\n<p>Mining massive data sets to locate valuable patterns, trends, and associations requires a huge amount of processing power. Cloud infrastructure not only provides the required high-performance computing but also makes it economically viable. </p>\n<p>While there are some concerns regarding the lack of transparency in the cloud infrastructure’s configuration and management and dependency on a third-party for workload availability and performance, Infrastructure-as-a-Service is the fastest growing cloud model today. </p>\n<p>In the next video, we will look at Platform-as-a-Service model, its features, benefits, and some use \ncases.</p>\n"},{"title":"Private Cloud","date":null,"description":"","slug":"private-cloud","id":"private-cloud-374049","tags":[{"name":"introduction-to-cloud-computing-week-2","id":"introduction-to-cloud-computing-week-2-851284"}],"content":"<ul>\n<li>Private Cloud:\n<ul>\n<li>Provisioned for exclusive use by a single organization</li>\n<li>Can be owned, managed, and operated by the organization or a third party</li>\n<li>Can exist on-premises or on a cloud provider's infrastructure (Virtual Private Cloud/VPC)</li>\n<li>Provides benefits of a public cloud with tailored infrastructure and security</li>\n</ul>\n</li>\n<li>Benefits of Private Cloud:\n<ol>\n<li>Leverage cloud computing while maintaining control and perceived ownership</li>\n<li>Better utilization of internal computing resources, reducing costs</li>\n<li>Scalability through virtualization and cloud bursting</li>\n<li>Controlled access and customized security measures</li>\n<li>Greater agility in expansion and provisioning</li>\n</ol>\n</li>\n<li>Reasons for choosing Private Cloud:\n<ul>\n<li>Applications with competitive advantage</li>\n<li>Security and regulatory concerns</li>\n<li>Highly sensitive data subject to strict regulations</li>\n</ul>\n</li>\n<li>Common use cases for Private Cloud:\n<ol>\n<li>Modernizing and unifying in-house and legacy applications</li>\n<li>Integrating data and application services with public cloud services</li>\n<li>Application portability without compromising security and compliance</li>\n<li>Addressing security, regulatory, and data sensitivity concerns</li>\n</ol>\n</li>\n</ul>\n"},{"title":"Public Cloud","date":null,"description":"","slug":"public-cloud","id":"public-cloud-937547","tags":[{"name":"introduction-to-cloud-computing-week-2","id":"introduction-to-cloud-computing-week-2-734953"}],"content":"<ul>\n<li>Cloud deployment models: Public Cloud, Private Cloud, and Hybrid Cloud</li>\n<li>Public Cloud:\n<ul>\n<li>Users access servers, storage, network, security, and applications as services over the internet</li>\n<li>Cloud provider owns, manages, provisions, and maintains the infrastructure</li>\n<li>Users don't own servers or storage and don't manage server operations or platform maintenance</li>\n<li>Similar to consuming utilities, users make agreements with service providers and pay for what they use</li>\n<li>Public clouds offer cost savings, scalability, but users lack control over computing environment</li>\n<li>Public cloud providers: Amazon Web Services, Microsoft Azure, IBM Cloud, Google Cloud Platform, Alibaba Cloud</li>\n</ul>\n</li>\n<li>Characteristics of a public cloud:\n<ul>\n<li>Virtualized multi-tenant architecture</li>\n<li>Resources shared among tenants/users outside their firewalls</li>\n<li>Resources distributed on an as-needed basis with various subscription and pay-as-you-go models</li>\n</ul>\n</li>\n<li>Benefits of public cloud:\n<ul>\n<li>On-demand resources for seamless response to demand fluctuations</li>\n<li>Significant economies of scale due to large number of users sharing resources</li>\n<li>High reliability with service remaining unaffected if one component fails</li>\n</ul>\n</li>\n<li>Concerns regarding public cloud:\n<ul>\n<li>Security issues: data breaches, data loss, account hijacking, vulnerability</li>\n<li>Data sovereignty compliance: regulations governing storage, transfer, and security of data</li>\n</ul>\n</li>\n<li>Common use cases for public cloud:\n<ul>\n<li>Accessing cloud-based applications and platforms for faster time-to-market</li>\n<li>Meeting fluctuating capacity and resourcing needs</li>\n<li>Building secondary infrastructures for disaster recovery, data protection, and business continuity</li>\n<li>Cloud storage and data management for accessibility, distribution, and backup</li>\n<li>Outsourcing management of less critical and standardized business platforms and applications to public cloud providers</li>\n</ul>\n</li>\n</ul>\n"},{"title":"An Introduction to Algorithms with JavaScript","date":null,"description":"","slug":"an-introduction-to-algorithms-with-javascript","id":"an-introduction-to-algorithms-with-javascript-122029","tags":[{"name":"javascript-algorithms","id":"javascript-algorithms-918373"}],"content":"<p>Welcome to a brand new tutorial series on algorithms with JavaScript! In this introductory video, we will provide an overview of the course and discuss the prerequisites to get started.</p>\n<p>This course is designed for beginners to programming, software developers from non-computer science backgrounds, and front-end developers looking to excel in algorithm and data structure interview rounds.</p>\n<p>Our approach to algorithms will be practical, focusing on problem-solving rather than delving deeply into theoretical aspects. Throughout the course, we will primarily use JavaScript as the programming language.</p>\n<p>It's important to note that this course is the first half of a larger series. The second half will cover data structures in JavaScript and will be available in the future. Algorithms and data structures go hand in hand, and by completing both courses, you'll gain a comprehensive understanding of the subject.</p>\n<p>Now, let's take a look at the topics we'll cover in this course:</p>\n<ol>\n<li>What is an algorithm?</li>\n<li>Measuring algorithm performance: time and space complexities</li>\n<li>Introduction to Big O notation</li>\n<li>Math algorithms</li>\n<li>Sorting algorithms</li>\n<li>Searching algorithms</li>\n<li>Miscellaneous algorithms</li>\n</ol>\n<p>By the end of this course, you will have a solid grasp of algorithm fundamentals and problem-solving techniques using JavaScript.</p>\n<p>The only prerequisite for this course is familiarity with modern JavaScript. If you are new to JavaScript, I recommend watching my crash courses on JavaScript fundamentals, advanced topics, and important concepts in ES2015 and above.</p>\n<p>I want to emphasize a few points before we proceed:</p>\n<ol>\n<li>Learning algorithms and data structures may feel challenging and push you out of your comfort zone. Remember, it's normal to find it difficult at times.</li>\n<li>If you struggle to understand a particular algorithm, I suggest grabbing a pen and paper. Try tracing the code execution with sample inputs; it's often a more effective learning method than staring at your monitor.</li>\n<li>Take your time with the videos. Avoid rushing through the material.</li>\n<li>The code used in the course will always be available in the description for reference.</li>\n</ol>\n<p>With these points in mind, let's get started in the next video.</p>\n<p>Stay tuned for the upcoming articles in this blog tutorial series on algorithms with JavaScript!</p>\n"},{"title":"Analyzing Algorithm Efficiency - Time and Space Complexity","date":null,"description":"","slug":"analyzing-algorithm-efficiency--time-and-space-complexity","id":"analyzing-algorithm-efficiency--time-and-space-complexity-611952","tags":[{"name":"javascript-algorithms","id":"javascript-algorithms-748848"}],"content":"<p>In the previous video, we discussed how there can be multiple algorithms to solve a single problem, such as sorting a list of numbers. Now, let's explore how we analyze and determine the most efficient algorithm.</p>\n<p>When it comes to performance, we usually rely on absolute measures. For instance, if I can run 100 meters in 12 seconds, I am faster than someone who takes 15 seconds. However, analyzing algorithms is slightly different.</p>\n<p>The absolute running time of an algorithm cannot be predicted accurately because it depends on various factors, including the programming language, the computer it runs on, concurrent programs, the operating system, and more.</p>\n<p>To evaluate an algorithm's performance, we focus on its input size. There are two types of evaluation:</p>\n<ol>\n<li>\n<p>Time Complexity: This refers to the amount of time taken by an algorithm to run, based on the input size. It helps us understand how the algorithm's performance scales as the input grows.</p>\n</li>\n<li>\n<p>Space Complexity: This measures the amount of memory consumed by an algorithm as a function of the input size. It allows us to analyze the algorithm's memory requirements.</p>\n</li>\n</ol>\n<p>By evaluating algorithms based on input size, the analysis becomes machine-independent, and we can make appropriate comparisons. It is essential to consider that there is no one-size-fits-all solution. The best approach may vary depending on the specific constraints and requirements of your application.</p>\n<p>If your application needs to prioritize speed and has sufficient memory available, you may not need to worry much about space complexity. However, if memory is limited, you should opt for a solution that is relatively slower but consumes less space.</p>\n<p>Now that we understand time and space complexity, let's explore how we represent them using asymptotic notations. Asymptotic notations are mathematical tools used to denote time and space complexity.</p>\n<p>The three primary asymptotic notations are:</p>\n<ol>\n<li>\n<p>Big O (O) notation: This notation represents the worst-case complexity of an algorithm. It helps us determine the upper bound of an algorithm's time or space requirement.</p>\n</li>\n<li>\n<p>Omega (Ω) notation: This notation represents the best-case complexity of an algorithm, indicating the lower bound.</p>\n</li>\n<li>\n<p>Theta (Θ) notation: This notation represents the average-case complexity, providing a tight bound on the algorithm's performance.</p>\n</li>\n</ol>\n<p>For the purpose of this course, we will primarily focus on the worst-case complexity (Big O notation). During interviews and real-world scenarios, the emphasis is usually on understanding the worst-case performance of an algorithm.</p>\n<p>In the next video, we will dive into the Big O notation, which is essential for analyzing algorithm efficiency.</p>\n"},{"title":"Big O Time Complexity of Objects and Arrays","date":null,"description":"","slug":"big-o-time-complexity-of-objects-and-arrays","id":"big-o-time-complexity-of-objects-and-arrays-828732","tags":[{"name":"javascript-algorithms","id":"javascript-algorithms-389609"}],"content":"<p>In this video, we'll quickly explore the Big O time complexity of objects, arrays, and their methods in JavaScript.</p>\n<p>Let's begin with objects. An object is a collection of key-value pairs. When inserting or removing a property from an object, the time complexity is constant. It doesn't matter how many properties exist; it takes the same amount of time. Accessing a value given a key is also a constant time operation. However, searching for a value in an object has a linear time complexity. In the worst case, you may need to search through all the properties.</p>\n<p>Now, let's discuss a few methods specific to objects. The <code>Object.keys()</code> method returns an array of all the keys in an object, <code>Object.values()</code> returns an array of all the values, and <code>Object.entries()</code> returns an array of key-value pairs. All of these methods have a linear time complexity.</p>\n<p>Moving on to arrays, they are ordered and indexed starting from 0. When inserting or removing an element from the end of an array, the time complexity is constant. However, if you insert or remove from the beginning, the time complexity becomes linear. This is because the index has to be reset for every remaining element in the array.</p>\n<p>Accessing an element in an array has constant time complexity, regardless of the index. Searching for an element in an array is still a linear time operation, as the element can be located at the last position.</p>\n<p>Here is a list of common array methods and their time complexities:</p>\n<ul>\n<li><code>push()</code> and <code>pop()</code> have constant time complexity.</li>\n<li><code>shift()</code>, <code>unshift()</code>, <code>concat()</code>, <code>slice()</code>, and <code>splice()</code> have linear time complexity.</li>\n<li><code>forEach()</code>, <code>map()</code>, <code>filter()</code>, and <code>reduce()</code> also have linear time complexity.</li>\n</ul>\n<p>It's important to note that when solving a problem, if you use methods like <code>forEach()</code> or <code>filter()</code> along with a callback function that contains a for loop, the time complexity becomes quadratic. Interviewers may not be satisfied with this inefficiency.</p>\n<p>With this understanding of the time complexity of objects, arrays, and their methods, we are now ready to start solving problems. In the next video, we'll begin with math algorithms.</p>\n"},{"title":"Understanding Algorithms - Definitions and Characteristics","date":null,"description":"","slug":"understanding-algorithms--definitions-and-characteristics","id":"understanding-algorithms--definitions-and-characteristics-459789","tags":[{"name":"javascript-algorithms","id":"javascript-algorithms-3904"}],"content":"<p>In this video, we will delve into the concept of algorithms and gain a better understanding of their definition and characteristics.</p>\n<p>An algorithm, in its most general sense, is a set of well-defined instructions designed to solve a specific problem. A simple real-world analogy is following a recipe. Just as you follow the steps of a recipe to cook a dish, algorithms operate by executing instructions in a predefined sequence.</p>\n<p>Consider the example of preparing instant noodles. The ingredients are the inputs, and the recipe consists of steps such as boiling water, adding the flavoring, and waiting for a specific duration. The resulting output is a delicious cup of noodles.</p>\n<p>When applied to computer programming, we can examine an algorithm to add two numbers. In this case, the numbers are the inputs, the algorithm comprises the instructions, and the output is the sum of the numbers.</p>\n<p>Key characteristics of an algorithm include:</p>\n<ol>\n<li>\n<p>Well-defined inputs and outputs: An algorithm should have clearly defined inputs and outputs. In the example of adding two numbers, the inputs are the two numbers, and the output is their sum.</p>\n</li>\n<li>\n<p>Clear and unambiguous steps: Each step in an algorithm should be precisely stated and free from confusion. In our example, the steps are adding the numbers using the plus operator and returning the sum.</p>\n</li>\n<li>\n<p>Language independence: An algorithm should be independent of any specific programming language. It should be adaptable and applicable across different programming languages. Although we will be using JavaScript for our code, the algorithm itself is not limited to JavaScript.</p>\n</li>\n</ol>\n<p>Understanding algorithms is crucial for developers as they encounter problems that require efficient solutions. By learning about algorithms, you gain valuable techniques for solving problems effectively.</p>\n<p>It's important to note that multiple algorithms can be used to solve a single problem, and each algorithm has its own trade-offs in terms of performance. This raises the question: How do we measure an algorithm's efficiency? We will explore this topic in the next video.</p>\n<p>Stay tuned for the upcoming articles in this blog tutorial series on algorithms with JavaScript!</p>\n"},{"title":"Understanding Big O Notation - Time and Space Complexity","date":null,"description":"","slug":"understanding-big-o-notation--time-and-space-complexity","id":"understanding-big-o-notation--time-and-space-complexity-665022","tags":[{"name":"javascript-algorithms","id":"javascript-algorithms-938222"}],"content":"<p>In the previous video, we learned that the worst-case complexity of an algorithm is represented using Big O notation. Now, let's dive deeper into understanding what Big O notation actually is.</p>\n<p>Big O notation describes the complexity of an algorithm using algebraic terms. It has two important characteristics:</p>\n<ol>\n<li>\n<p>It is expressed in terms of the input: Big O notation considers how the algorithm's performance scales with the size of the input.</p>\n</li>\n<li>\n<p>It focuses on the bigger picture: It abstracts away minor details and emphasizes the dominant factors that affect the algorithm's performance.</p>\n</li>\n</ol>\n<p>To illustrate these characteristics, let's calculate the worst-case time complexity of a program. We'll consider an algorithm implemented in JavaScript that finds the sum of the first n natural numbers.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">summation</span>(<span class=\"hljs-params\">n</span>) {\n\t<span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>, i &#x3C;= n, i++) {\n\t\tsum += i\n\t}\n\t<span class=\"hljs-keyword\">return</span> sum\n}</code></pre>\n<p>We analyze the program by counting the number of times each statement executes based on the input size. For this algorithm, we have three main statements: line two, line four, and line six (the for loop).</p>\n<p>Let's calculate the number of times each statement is executed when n is equal to 4:</p>\n<ul>\n<li>Line two executes only once.</li>\n<li>Line four, within the for loop, executes four times (i = 1 to i = 4).</li>\n<li>Line six executes only once.</li>\n</ul>\n<p>Therefore, the total count is 4 + 2, which can be generalized to n + 2, where n is the input to the function.</p>\n<p>By observing the pattern, we notice that the input size directly influences the count. Hence, the time complexity is expressed in terms of the input size, as mentioned earlier.</p>\n<p>Additionally, Big O notation focuses on the bigger picture. When we plug in different values for n, such as 100, 1000, or even 100 million, we realize that the \"+ 2\" term becomes insignificant compared to the dominant factor (n). Therefore, we can approximate the time complexity to just n, dropping the less significant terms.</p>\n<p>For the summation algorithm, the worst-case time complexity (or simply the time complexity) is expressed as O(n), which is known as linear time complexity. It means that as the input size increases, the time complexity also increases linearly.</p>\n<p>To determine the time complexity of an algorithm, you don't necessarily have to calculate the count line by line. In most cases, when there is a loop in the algorithm, you can safely assume the time complexity to be at least linear. However, there are exceptions, which we'll explore throughout this course.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">summation</span>(<span class=\"hljs-params\">n</span>) {\n\t<span class=\"hljs-keyword\">return</span> (n * (n + <span class=\"hljs-number\">1</span>)) / <span class=\"hljs-number\">2</span>\n}</code></pre>\n<p>In the video, another algorithm for the same problem is presented, where the time complexity is O(1), referred to as constant time complexity. This means that regardless of the value of n, line two is executed only once.</p>\n<p>Once you get familiar with Big O notation, it becomes easier to analyze the time complexity of algorithms. For example, if there are two nested loops, the time complexity is quadratic. Big O notation allows us to drop the less dominant terms and focus on the most significant factor. For instance, if the complexity is calculated as 3n^2 + 5n + 1, we simplify it to n^2 and call it quadratic.</p>\n<p>Space complexity follows a similar principle. If an algorithm doesn't require extra memory or the memory needed doesn't depend on the input size, the space complexity is constant. However, algorithms can have linear or logarithmic space complexity as well, where the extra memory needed grows with the input size but not at the same rate.</p>\n<p>Throughout the course, we'll be determining the time complexity of various algorithms, and you'll gradually develop a better understanding of it.</p>\n<p>Before continuing, keep a few points in mind: multiple algorithms can exist for the same problem, and there is no one right solution. Different algorithms excel under different constraints,\nso understanding the problem statement is crucial. Additionally, the same algorithm can be implemented in different ways using the same programming language. Modern features and techniques may simplify the code, but it doesn't make other solutions incorrect. Finally, when writing programs, always consider the big picture. Optimize code for functions that are called frequently, prioritize readability and maintainability over cleverness.</p>\n<p>In the next video, we'll explore object and array operations in the context of Big O notation. Understanding these operations is essential for correctly determining the Big O of your algorithms.</p>\n"},{"title":"Difference between CommonJS and ES modules","date":null,"description":"","slug":"difference-between-commonjs-and-es-modules","id":"difference-between-commonjs-and-es-modules-905037","tags":[{"name":"javascript","id":"javascript-750924"}],"content":"<p>CommonJS and ES modules are two different ways of importing modules in JavaScript.</p>\n<p>CommonJS is a module system used Node.js for importing and exporting modules. It uses the <code>require()</code> function for importing modules and the <code>module.exports</code> or <code>exports</code> object for exporting modules.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>)</code></pre>\n<p>ES modules, also knows as ECMAScript modules, is the official standard for JavaScript modules. It used the <code>import</code> keyword for importing modules and the <code>export</code> keyword for exporting modules.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span></code></pre>\n<p>In Node.js, the <code>import</code> statement can only be used when the file containing the code is being executed in a module environment, which is enabled by default when the file is run using the <code>--experiment-modules</code> flag, or by adding <code>\"type\" : \"module\"</code> to package.json.</p>\n<pre><code class=\"hljs language-json\">...\n<span class=\"hljs-attr\">\"main\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"index.js\"</span><span class=\"hljs-punctuation\">,</span>\n<span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"module\"</span><span class=\"hljs-punctuation\">,</span>\n...</code></pre>\n<p>One main difference between the two is that CommonJS modules are executed immendiately, while ES modules are executed only when they are imported. This means that if a CommonJS module is imported multiple times, it will execute multiple times, while an ES module will execute only once. Additionally, CommonJS modules use a global <code>require()</code> function, while ES modules use a more explicit import statement, making the dependencies of a module more clear.</p>\n<p>Another difference is that CommonJS modules are synchronous, which means that the imported module is guaranteed to be fully loaded and executed before the next line of code is executed. ES modules, on the other hand, are asynchronous, which means that the imported module may not be fully loaded and executed before the next line of code is executed.</p>\n<p>It is worth noting that in browser, you can use <code>&#x3C;script type='module'></code> to import ES modules and <code>&#x3C;script type=\"text/javascript\" nomodule></code> to import CommonJS modules.</p>\n"},{"title":"Creating and Chaining Promises - A step by step guide","date":null,"description":"","slug":"creating-and-chaining-promises--a-step-by-step-guide","id":"creating-and-chaining-promises--a-step-by-step-guide-316549","tags":[{"name":"javascript-promises","id":"javascript-promises-128446"}],"content":"<p>In the previous article, we have learned about the basics of JavaScript Promises and how to create and use them to handle asynchronous operations in JavaScript. In this article, we will take a deeper dive into creating and chaining Promises and learn how to use them to build more complex and efficient applications.</p>\n<p>We will start by creating Promises using the <code>Promise</code> constructor. As we have seen in the first article, the <code>Promise</code> constructor takes a single argument, a function called the \"executor,\" which is called immediately when the Promise is created. The executor function is passed two arguments, a <code>resolve</code> function and a <code>reject</code> function, which can be used to indicate the success or failure of the asynchronous operation.</p>\n<p>Here is an example of a simple Promise that resolves with the message \"Hello, World!\" after 1 second:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> myPromise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Hello, World!'</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n});\n</code></pre>\n<p>In this example, we are using the <code>setTimeout</code> function to simulate an asynchronous operation, and we are calling the <code>resolve</code> function after 1 second to indicate that the operation has completed successfully.</p>\n<p>We can also use the <code>reject</code> function to indicate that the asynchronous operation has failed. Here is an example of a Promise that rejects with an error message after 1 second:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> myPromise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">'Something went wrong'</span>));\n  }, <span class=\"hljs-number\">1000</span>);\n});\n</code></pre>\n<p>In this example, we are using the <code>setTimeout</code> function to simulate an asynchronous operation, and we are calling the <code>reject</code> function after 1 second to indicate that the operation has failed.</p>\n<p>Once a Promise is created, we can use the <code>.then</code> method to attach a callback function that will be called when the Promise is resolved. We can also use the <code>.catch</code> method to attach a callback function that will be called when the Promise is rejected. Here is an example of using the <code>.then</code> and <code>.catch</code> methods to handle the results of the Promise:</p>\n<pre><code class=\"hljs language-js\">myPromise\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n</code></pre>\n<p>In this example, we are using the <code>.then</code> method to attach a callback function that will log the message to the console when the Promise is resolved. We are also using the <code>.catch</code> method to attach a callback function that will log any errors to the console when the Promise is rejected.</p>\n<p>Chaining Promises together is another powerful feature of JavaScript Promises. We can chain Promises together by returning a new Promise from the callback function attached to the <code>.then</code> method. Here is an example of chaining two Promises together:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> myPromise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Hello, World!'</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n});\n\nmyPromise\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n      <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Hello, Again!'</span>);\n      }, <span class=\"hljs-number\">1000</span>);\n    });\n  })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n</code></pre>\n<p>In this example, we are chaining two Promises together. The first Promise resolves with the message \"Hello, World!\" after 1 second, and the second Promise resolves with the message \"Hello, Again!\" after another 1 second. The second Promise is returned from the callback function attached to the <code>.then</code> method of the first Promise, allowing us to chain the two Promises together. This creates a more complex asynchronous workflow and allows us to handle the results of multiple asynchronous operations in a predictable and maintainable way.</p>\n<p>Additionally, we can also use the <code>Promise.all</code> method to handle multiple Promises in parallel. This method takes an array of Promises as an argument and returns a new Promise that resolves when all of the Promises in the array have resolved. Here is an example of using the <code>Promise.all</code> method:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> promise1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Promise 1 resolved'</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n});\n<span class=\"hljs-keyword\">const</span> promise2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Promise 2 resolved'</span>);\n  }, <span class=\"hljs-number\">2000</span>);\n});\n\n<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>([promise1, promise2])\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">results</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(results))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n</code></pre>\n<p>In this example, we are creating two Promises, <code>promise1</code> and <code>promise2</code>, which resolve with different messages after different time intervals. We then pass these Promises in an array to the <code>Promise.all</code> method, which returns a new Promise that resolves when both of the Promises in the array have resolved. The <code>.then</code> callback function attached to the new Promise logs the results of both Promises to the console.</p>\n<p>In conclusion, creating and chaining Promises is an essential part of working with asynchronous operations in JavaScript. By understanding how to create and chain Promises, we can build more complex and efficient applications. Additionally, by using the <code>Promise.all</code> method, we can handle multiple Promises in parallel. In the next article, we will dive into error handling with Promises and learn how to handle rejections in a more robust way.</p>\n"},{"title":"Introduction to JavaScript Promises - Understanding the Basics","date":null,"description":"","slug":"introduction-to-javascript-promises--understanding-the-basics","id":"introduction-to-javascript-promises--understanding-the-basics-504444","tags":[{"name":"javascript-promises","id":"javascript-promises-605973"}],"content":"<p>JavaScript Promises are a powerful tool for handling asynchronous operations in JavaScript. They allow you to write code that is more readable, maintainable, and predictable, making it easier to handle complex, non-blocking tasks. In this tutorial series, we will explore the basics of JavaScript Promises and learn how to use them to build more robust and efficient applications.</p>\n<p>In this first article, we will cover the basics of JavaScript Promises and understand how they work. We will start by defining what a JavaScript Promise is and why they are useful. We will then move on to creating and using Promises, and learn how to chain them together to create complex asynchronous workflows.</p>\n<p><strong>A JavaScript Promise is an object that represents the eventual completion or failure of an asynchronous operation.</strong> It is a way to handle the results of an asynchronous operation, such as a network request, without blocking the execution of the rest of your code. Promises are useful because they allow you to write code that is more readable, maintainable, and predictable, making it easier to handle complex, non-blocking tasks.</p>\n<p>Promises are created using the <code>Promise</code> constructor, which takes a single argument, a function called the \"executor.\" The executor function is called immediately when the Promise is created, and it is passed two arguments: a resolve function and a reject function. The resolve function is used to indicate that the asynchronous operation has completed successfully, while the reject function is used to indicate that the asynchronous operation has failed.</p>\n<p>Here is an example of a simple Promise:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> myPromise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Hello, World!'</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n});\n</code></pre>\n<p>In this example, we are creating a new Promise that will resolve with the message \"Hello, World!\" after 1 second. The <code>setTimeout</code> function is used to simulate an asynchronous operation.</p>\n<p>Once a Promise is created, you can use the <code>.then</code> method to attach a callback function that will be called when the Promise is resolved. The <code>.catch</code> method can be used to attach a callback function that will be called when the Promise is rejected.</p>\n<pre><code class=\"hljs language-js\">myPromise\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n</code></pre>\n<p>In this example, we are using the <code>.then</code> method to attach a callback function that will log the message to the console when the Promise is resolved. We are also using the <code>.catch</code> method to attach a callback function that will log any errors to the console when the Promise is rejected.</p>\n<p>Promises can also be chained together to create complex asynchronous workflows. This is done by returning a new Promise from the callback function attached to the <code>.then</code> method.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> myPromise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Hello, World!'</span>);\n  }, <span class=\"hljs-number\">1000</span>);\n});\n\nmyPromise\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n      <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'Hello, Again!'</span>);\n      }, <span class=\"hljs-number\">1000</span>);\n    });\n  })\n  .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message))\n  .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error));\n</code></pre>\n<p>In this example, we are chaining two Promises together. The first Promise resolves with the message \"Hello, World!\" after 1 second, and the second Promise resolves with the message \"Hello, Again!\" after another 1 second. The second Promise is returned from the callback function attached to the <code>.then</code> method of the first Promise, allowing us to chain the two Promises together.</p>\n<p>In conclusion, JavaScript Promises are a powerful tool for handling asynchronous operations in JavaScript. They allow you to write code that is more readable, maintainable, and predictable, making it easier to handle complex, non-blocking tasks. In this first article, we have covered the basics of JavaScript Promises, including how to create and use them, and how to chain them together to create complex asynchronous workflows.</p>\n<p>In the next articles of this tutorial series, we will explore more advanced topics such as error handling, parallel and sequential execution, and cleaning up resources with Promises. We will also look at some of the built-in methods available on the Promise prototype, such as <code>Promise.all</code>, <code>Promise.race</code>, <code>Promise.resolve</code>, <code>Promise.reject</code>, <code>Promise.prototype.then</code>, <code>Promise.prototype.catch</code>, and <code>Promise.prototype.finally</code>. Stay tuned!</p>\n"},{"title":"Tutorial on sorting an array of objects in JavaScript","date":null,"description":"","slug":"tutorial-on-sorting-an-array-of-objects-in-javascript","id":"tutorial-on-sorting-an-array-of-objects-in-javascript-113706","tags":[{"name":"javascript","id":"javascript-680306"}],"content":"<h2>Introduction</h2>\n<p>In this tutorial, we will discuss how to sort an array of objects in JavaScript using the <code>Array.sort()</code> method and providing a comparison function that determines the order of the objects.</p>\n<p>First, let's create an array of objects:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> employees = [\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'John'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">27</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'December 15, 2017'</span> },\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">32</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'January 1, 2018'</span> },\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Mike'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Johnson'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">27</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'February 1, 2018'</span> },\n];\n</code></pre>\n<p>Now, let's sort this array by the <code>age</code> property in ascending order:</p>\n<pre><code class=\"hljs language-js\">employees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.<span class=\"hljs-property\">age</span> - b.<span class=\"hljs-property\">age</span>)</code></pre>\n<p>You can also sort the array in descending order by changing the order of subtraction:</p>\n<pre><code class=\"hljs language-js\">exmployees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a , b</span>) =></span> b.<span class=\"hljs-property\">age</span> - a.<span class=\"hljs-property\">age</span>)</code></pre>\n<p>If you want to sort the array by a different property, such as <code>lastName</code>, you can modify the comparison function accordingly:</p>\n<pre><code class=\"hljs language-js\">employees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a , b</span>) =></span> {\n\t<span class=\"hljs-keyword\">const</span> lA = a.<span class=\"hljs-property\">lastName</span>.<span class=\"hljs-title function_\">toUpperCase</span>()\n\t<span class=\"hljs-keyword\">const</span> lB = b.<span class=\"hljs-property\">lastName</span>.<span class=\"hljs-title function_\">toUpperCase</span>()\n\t<span class=\"hljs-keyword\">if</span> (lA &#x3C; lB) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">if</span> (lA > lB) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n})</code></pre>\n<h2>How does it work?</h2>\n<p>The <code>Array.prototype.sort()</code> method sorts the elements of an array in place and returns aa reference to the same array, now sorted.</p>\n<p>When the <code>sort()</code> method compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value. If the result is negative, <code>a</code> is sorted before <code>b</code>. If the result is positive, <code>b</code> is sorted before <code>a</code>. If the result is zero, no changes are done with the sort order of the two values.</p>\n<p>The <code>sort()</code> method accepts a compare function as an argument, which you can define to customize the sorting logic based on your requirements. The compare function should take two arguments, usually denoted as <code>a</code> and <code>b</code>, and return a positive, negative, or zero value depending on the desired order.</p>\n<h2>Conclusion</h2>\n<p>In conclusion, the <code>sort</code> method works by converting the array elements into strings and comparing their sequences of UTF-8 code unit values.</p>\n"},{"title":"Tutorial on the findIndex method of an Array","date":null,"description":"","slug":"tutorial-on-the-findindex-method-of-an-array","id":"tutorial-on-the-findindex-method-of-an-array-153580","tags":[{"name":"javascript","id":"javascript-470578"}],"content":"<h2>Introduction</h2>\n<p>The <code>findIndex()</code> method in JavaScript is used to find the index of the first element in an array that satisfies a given condition. It returns the index of the first matching element, or -1 if no match is found. This method is particularly useful when working with complex data structures or when you need to locate a specific element based on certain criteria.</p>\n<h2>Syntax and Usage</h2>\n<p>The syntax for the <code>findIndex()</code> method is as follows:</p>\n<pre><code class=\"hljs language-js\">arr.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-title function_\">callback</span>(element, index, array), thisArg)</code></pre>\n<ul>\n<li><code>callback</code>: A function to execute on each value in the array until the function returns true, indicating that the satisfying element was found.</li>\n<li><code>thisArg</code>: Optional object to use as <code>this</code> when executing the callback.</li>\n<li><code>array</code> : Optional array in which the <code>findIndex</code> method is called.</li>\n</ul>\n<h2>Examples</h2>\n<p>Here are some examples of using the <code>findIndex()</code> method:</p>\n<p><strong>Example 1: Basic usage</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lang = [<span class=\"hljs-string\">\"Java\"</span>, <span class=\"hljs-string\">\"JavaScript\"</span>]\nlang.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =></span> val === <span class=\"hljs-string\">'JavaScript'</span>) <span class=\"hljs-comment\">// 1</span>\nlang.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =></span> val === <span class=\"hljs-string\">'Python'</span>) <span class=\"hljs-comment\">// -1</span></code></pre>\n<p><strong>Example 2: Using <code>findIndex</code> with a more complex condition</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> ranks = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">7</span>]\n<span class=\"hljs-keyword\">let</span> index = ranks.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">rank, index</span>) =></span> rank === <span class=\"hljs-number\">7</span> &#x26;&#x26; index > <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index) <span class=\"hljs-comment\">// 5</span></code></pre>\n<p><strong>Example 3: Using <code>findIndex</code> with an array of objects</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> products = [\n{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Phone'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">999</span> },\n{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Computer'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span> },\n{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Tablet'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">995</span> },\n]\n\n<span class=\"hljs-keyword\">const</span> index = products.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">product</span> =></span> product.<span class=\"hljs-property\">price</span> > <span class=\"hljs-number\">1000</span> )\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index) <span class=\"hljs-comment\">// 1</span></code></pre>\n<h2>Trade-offs and Nuances</h2>\n<ul>\n<li>The <code>findIndex()</code> method is useful when you want to find the index of the first element that satisfies a given condition. However, if you need to find the indices of all elements that match the criteria, you should use the <code>reduce()</code> method instead of <code>findIndex()</code></li>\n<li>The <code>findIndex()</code> method is not supported in older browsers, such as Internet Explorer. If you need to support older browsers, you can use a polyfill or an alternative method like <code>Array.prototype.indexOf()</code></li>\n<li>The <code>findIndex()</code> method can be called on non-array objects, as long as they have a <code>length</code> property. However, the method may not work as expected, and you may need to use other methods like <code>Array.prototype.findIndex.call()</code></li>\n</ul>\n"},{"title":"Data fetching with getStaticProps in Nextjs","date":null,"description":"","slug":"data-fetching-with-getstaticprops-in-nextjs","id":"data-fetching-with-getstaticprops-in-nextjs-634099","tags":[{"name":"nextjs","id":"nextjs-62009"}],"content":"<h1>getStaticProps</h1>\n<p>If you export a function called <code>getStaticProps</code> (Static Site Generation) from a page, Next.js will pre-render this page at build time using the props returned by <code>getStaticProps</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getStaticProps</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.github.com/repos/vercel/next.js'</span>);\n  <span class=\"hljs-keyword\">const</span> repo = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>();\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { repo } };\n};\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\">{ repo }</span>) {\n  <span class=\"hljs-keyword\">return</span> repo.<span class=\"hljs-property\">stargazers_count</span>;\n}</code></pre>\n<h2>When should I use getStaticProps?</h2>\n<p>You should use <code>getStaticProps</code> if:</p>\n<ul>\n<li>The data required to render the page is available at build time ahead of a user’s request.</li>\n<li>The data comes from a headless CMS.</li>\n<li>The data can be publicly cached (not user-specific). This condition can be bypassed in certain specific situation by using a Middleware to rewrite the path.</li>\n<li>The page must be pre-rendered (for SEO) and be very fast — <code>getStaticProps</code> generates HTML and JSON files, both of which can be cached by a CDN for performance.</li>\n</ul>\n<h2>When does getStaticProps run?</h2>\n<p><code>getStaticProps</code> always runs on the server and never on the client.</p>\n<ul>\n<li>\n<p><code>getStaticProps</code> always runs during next build</p>\n</li>\n<li>\n<p><code>getStaticProps</code> runs in the background when using <code>fallback: true</code></p>\n</li>\n<li>\n<p><code>getStaticProps</code> is called before initial render when using <code>fallback: blocking</code>\n<code>getStaticProps</code> runs in the background when using <code>revalidate</code>\n<code>getStaticProps</code> runs on-demand in the background when using <code>revalidate()</code></p>\n</li>\n</ul>\n<p>When combined with <strong>Incremental Static Regeneration</strong>, <code>getStaticProps</code> will run in the background while the stale page is being revalidated, and the fresh page served to the browser.</p>\n<p><code>getStaticProps</code> does not have access to the incoming request (such as query parameters or HTTP headers) as it generates static HTML. If you need access to the request for your page, consider using Middleware in addition to <code>getStaticProps</code>.</p>\n<h2>Statically generates both HTML and JSON</h2>\n<p>When a page with <code>getStaticProps</code> is pre-rendered at build time, in addition to the page HTML file, Next.js generates a JSON file holding the result of running getStaticProps.</p>\n<p>This JSON file will be used in client-side routing through <code>next/link</code> or <code>next/router</code>. When you navigate to a page that’s pre-rendered using <code>getStaticProps</code>, Next.js fetches this JSON file (pre-computed at build time) and uses it as the props for the page component. This means that client-side page transitions will not call <code>getStaticProps</code> as only the exported JSON is used.</p>\n<p>When using <strong>Incremental Static Generation</strong>, <code>getStaticProps</code> will be executed in the background to generate the JSON needed for client-side navigation. You may see this in the form of multiple requests being made for the same page, however, this is intended and has no impact on end-user performance.</p>\n<h2>Where can I use getStaticProps</h2>\n<p><code>getStaticProps</code> can only be exported from a page. You cannot export it from non-page files, <code>_app</code>, <code>_document</code>, or <code>_error</code>.</p>\n<p>One of the reasons for this restriction is that React needs to have all the required data before the page is rendered.</p>\n<p>Also, you must use export <code>getStaticProps</code> as a standalone function — it will not work if you add <code>getStaticProps</code> as a property of the page component.</p>\n<h2>Runs on every request in development</h2>\n<p>In development (next dev), getStaticProps will be called on every request.</p>\n"},{"title":"Defining Routes in Next.js App Router","date":null,"description":"","slug":"defining-routes-in-nextjs-app-router","id":"defining-routes-in-nextjs-app-router-146534","tags":[{"name":"nextjs","id":"nextjs-659501"}],"content":"<p>This page will guide you through how to define and organize routes in your Next.js application.</p>\n<h2>Creating Routes</h2>\n<p>Next.js uses a file-system based router where <strong>folders</strong> are used to define routes.</p>\n<p>Each folder represents a <a href=\"https://nextjs.org/docs/app/building-your-application/routing#route-segments\"><strong>route</strong> segment</a> that maps to a <strong>URL</strong> segment. To create a <a href=\"https://nextjs.org/docs/app/building-your-application/routing#nested-routes\">nested route</a>, you can nest folders inside each other.</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Froute-segments-to-path-segments.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<p>A special <a href=\"https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#pages\"><code>page.js</code> file</a> is used to make route segments publicly accessible.</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fdefining-routes.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<p>In this example, the <code>/dashboard/analytics</code> URL path is <em>not</em> publicly accessible because it does not have a corresponding <code>page.js</code> file. This folder could be used to store components, stylesheets, images, or other colocated files.</p>\n<h2>Creating UI</h2>\n<p><a href=\"https://nextjs.org/docs/app/building-your-application/routing#file-conventions\">Special file conventions</a> are used to create UI for each route segment. The most common are <a href=\"https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#pages\">pages</a> to show UI unique to a route, and <a href=\"https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#layouts\">layouts</a> to show UI that is shared across multiple routes.</p>\n<p>For example, to create your first page, add a <code>page.js</code> file inside the <code>app</code> directory and export a React component:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello, Next.js!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>;\n}</code></pre>\n"},{"title":"Introduction to routing in Next.js using App Router","date":null,"description":"","slug":"introduction-to-routing-in-nextjs-using-app-router","id":"introduction-to-routing-in-nextjs-using-app-router-776298","tags":[{"name":"nextjs","id":"nextjs-755378"}],"content":"<p>The skeleton of every application is routing. This page will introduce you to the <strong>fundamental concepts</strong> of routing for the web and how to handle routing in Next.js.</p>\n<h2>Terminology</h2>\n<p>First, you will see these terms being used throughout the documentation. Here's a quick reference:</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fterminology-component-tree.png&#x26;w=1920&#x26;q=75\" alt=\"Terminology Component Tree\"></p>\n<ul>\n<li><strong>Tree:</strong> A convention for visualizing a hierarchical structure. For example, a component tree with parent and children components, a folder structure, etc.</li>\n<li><strong>Subtree:</strong> Part of a tree, starting at a new root (first) and ending at the leaves (last).</li>\n<li><strong>Root</strong>: The first node in a tree or subtree, such as a root layout.</li>\n<li><strong>Leaf:</strong> Nodes in a subtree that have no children, such as the last segment in a URL path.</li>\n</ul>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fterminology-url-anatomy.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<ul>\n<li><strong>URL Segment:</strong> Part of the URL path delimited by slashes.</li>\n<li><strong>URL Path:</strong> Part of the URL that comes after the domain (composed of segments).</li>\n</ul>\n<h2>The app directory</h2>\n<p>In version 13, Next.js introduced a new <strong>App Router</strong> built on <a href=\"https://nextjs.org/docs/getting-started/react-essentials#server-components\">React Server Components</a>, which supports shared layouts, nested routing, loading states, error handling, and more.</p>\n<p>The App Router works in a new directory named <code>app</code>. The <code>app</code> directory works alongside the <code>pages</code> directory to allow for incremental adoption. This allows you to opt some routes of your application into the new behavior while keeping other routes in the <code>pages</code> directory for previous behavior. If your application uses the <code>pages</code> directory, please also see the <a href=\"https://nextjs.org/docs/pages/building-your-application/routing\">Pages Router</a> documentation.</p>\n<p>By default, components inside <code>app</code> are <a href=\"https://nextjs.org/docs/getting-started/react-essentials#server-components\">React Server Components</a>. This is a performance optimization and allows you to easily adopt them, and you can also use <a href=\"https://nextjs.org/docs/getting-started/react-essentials#client-components\">Client Components</a>.</p>\n<blockquote>\n<p><strong>Recommendation:</strong> Check out the <a href=\"https://nextjs.org/docs/getting-started/react-essentials\">Server and Client Components</a> page if you're new to Server Components.</p>\n</blockquote>\n<h2>Roles of Folders and Files</h2>\n<p>Next.js uses a file-system based router where:</p>\n<ul>\n<li><strong>Folders</strong> are used to define routes. A route is a single path of nested folders, following the file-system hierarchy from the <strong>root folder</strong> down to a final <strong>leaf folder</strong> that includes a <code>page.js</code> file. See <a href=\"https://nextjs.org/docs/app/building-your-application/routing/defining-routes\">Defining Routes</a>.</li>\n<li><strong>Files</strong> are used to create UI that is shown for a route segment. See <a href=\"https://nextjs.org/docs/app/building-your-application/routing#file-conventions\">special files</a>.</li>\n</ul>\n<h2>Route Segments</h2>\n<p>Each folder in a route represents a <strong>route segment</strong>. Each route segment is mapped to a corresponding <strong>segment</strong> in a <strong>URL path</strong>.</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Froute-segments-to-path-segments.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<h2>Nested Routes</h2>\n<p>To create a nested route, you can nest folders inside each other. For example, you can add a new <code>/dashboard/settings</code> route by nesting two new folders in the <code>app</code> directory.</p>\n<p>The <code>/dashboard/settings</code> route is composed of three segments:</p>\n<ul>\n<li><code>/</code> (Root segment)</li>\n<li><code>dashboard</code> (Segment)</li>\n<li><code>settings</code> (Leaf segment)</li>\n</ul>\n<h2>File Conventions</h2>\n<p>Next.js provides a set of special files to create UI with specific behavior in nested routes:</p>\n<ul>\n<li><strong>layout</strong> : Shared UI for a segment and its children</li>\n<li><strong>page</strong> :  Unique UI of a route and make routes publicly accessible</li>\n<li><strong>loading</strong> : Loading UI for a segment and its children</li>\n<li><strong>not-found</strong> : Not found UI for a segment and its children</li>\n<li><strong>error</strong> : Error UI for a segment and its children</li>\n<li><strong>global-error</strong> : Global error UI</li>\n<li><strong>route</strong> : Server-side API endpoint</li>\n<li><strong>template</strong> : Specialized re-rendered Layout UI</li>\n<li><strong>default</strong> : Fallback UI for <a href=\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes\">Parallel Routes</a></li>\n</ul>\n<h2>Component Hierarchy</h2>\n<p>The React components defined in special files of a route segment are rendered in a specific hierarchy:</p>\n<ul>\n<li><code>layout.js</code></li>\n<li><code>template.js</code></li>\n<li><code>error.js</code> (React error boundary)</li>\n<li><code>loading.js</code> (React suspense boundary)</li>\n<li><code>not-found.js</code> (React error boundary)</li>\n<li><code>page.js</code> or nested <code>layout.js</code></li>\n</ul>\n<pre><code class=\"hljs language-jsx\">&#x3C;<span class=\"hljs-title class_\">Layout</span>>\n\t<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Template</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ErrorBoundary</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Error</span> /></span>}>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Loading</span> /></span>}/>\n\t\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ErrorBoundary</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">NotFound</span> /></span>}>\n\t\t\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Page</span> /></span>\n\t\t\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ErrorBoundary</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Suspense</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ErrorBoundary</span>></span></span>\n\t&#x3C;/<span class=\"hljs-title class_\">Template</span>>\n&#x3C;/<span class=\"hljs-title class_\">Layout</span>></code></pre>\n<p>In a nested route, the components of a segment will be nested <strong>inside</strong> the components of its parent segment.</p>\n<pre><code class=\"hljs language-jsx\">\n&#x3C;<span class=\"hljs-title class_\">Layout</span>>\n\t<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ErrorBoundary</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Error</span> /></span>}>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Loading</span> /></span>}/>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Layout</span>></span>\n\t\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ErrorBoundary</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Error</span> /></span>}>\n\t\t\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Suspense</span> <span class=\"hljs-attr\">fallback</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">Loading</span> /></span>}>\n\t\t\t\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Page</span> /></span>\n\t\t\t\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Suspense</span>></span>\n\t\t\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ErrorBoundary</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Layout</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Suspense</span>></span></span>\n\t&#x3C;/<span class=\"hljs-title class_\">ErrorBoundary</span>>\n&#x3C;/<span class=\"hljs-title class_\">Layout</span>>\n</code></pre>\n<h2>Colocation</h2>\n<p>In addition to special files, you have the option to colocate your own files (e.g. components, styles, tests, etc.) inside folders in the <code>app</code> directory.</p>\n<p>This is because while folders define routes, only the contents returned by <code>page.js</code> or <code>route.js</code> are publicly addressable.</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fproject-organization-colocation.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<p>Learn more about <a href=\"https://nextjs.org/docs/app/building-your-application/routing/colocation\">Project Organization and Colocation</a>.</p>\n<h2>Server-Centric Routing with Client-side Navigation</h2>\n<p>Unlike the <code>pages</code> directory which uses client-side routing, the App Router uses <strong>server-centric routing</strong> to align with <a href=\"https://nextjs.org/docs/getting-started/react-essentials#server-components\">Server Components</a> and <a href=\"https://nextjs.org/docs/app/building-your-application/data-fetching/fetching\">data fetching on the server</a>. With server-centric routing, the client does not have to download a route map and <strong>the same request for Server Components can be used to look up routes</strong>. This optimization is useful for all applications, but has a larger impact on applications with many routes.</p>\n<p>Although routing is server-centric, the router uses <strong>client-side navigation</strong> with the <a href=\"https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#link-component\">Link Component</a> - resembling the behavior of a Single-Page Application. This means when a user navigates to a new route, the browser will not reload the page. Instead, the URL will be updated and Next.js will <a href=\"https://nextjs.org/docs/app/building-your-application/routing#partial-rendering\">only render the segments that change</a>.</p>\n<p>Additionally, as users navigate around the app, the router will store the result of the React Server Component payload in an <strong>in-memory client-side cache</strong>. The cache is split by route segments which allows invalidation at any level and ensures consistency across <a href=\"https://react.dev/blog/2022/03/29/react-v18#what-is-concurrent-react\">React's concurrent renders</a>. This means that for certain cases, the cache of a previously fetched segment can be re-used, further improving performance.</p>\n<h2>Partial Rendering</h2>\n<p>When navigating between sibling routes (e.g. <code>/dashboard/settings</code> and <code>/dashboard/analytics</code> below), Next.js will only fetch and render the layouts and pages in routes that change. It will <strong>not</strong> re-fetch or re-render anything above the segments in the subtree. This means that in routes that share a layout, the layout will be preserved when a user navigates between sibling pages.</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fpartial-rendering.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<p>Without partial rendering, each navigation would cause the full page to re-render on the server. Rendering only the segment that’s updating reduces the amount of data transferred and execution time, leading to improved performance.</p>\n"},{"title":"Untitled","date":null,"description":"","slug":"untitled","id":"untitled-502331","tags":[{"name":"nextjs-next-auth","id":"nextjs-next-auth-177511"}],"content":"<p>Today we will learn how to use authentication inside of your Nextjs13 project using <code>next-auth</code>.  we are going to use three providers that  <code>next-auth</code> allows us to use. One is going  to be the <code>credentials</code> provider which  allows us to use your username or email  and password to sign in and authenticate  an account. The other two will be the  Google provider and the GitHub provider.</p>\n<p>There is one caveat though with the  credentials provider that it  doesn't actually register a user. All it  does is authenticate users so what we  need to do is we need to create a  register API endpoint inside an Nextjs13  which we will do inside of this tutorial.  After we get all of these users  authenticated they will be sent to a  database and we are going to use <code>mongodb</code>  for doing that and we're going to  connect our database to our application  using <code>prisma</code>.</p>\n<p>First we need to set up the environment for our  Nextjs13 project . To do that we are  going to open up our Command terminal on  our system  and we are going to change directories. Run the  command <code>npx create-next-app@latest next-auth</code> . It's going to initialize the project and  it's going to install all the  dependencies necessary for Next.js. Open up the newly create project in your text editor. You will see a boilerplate Nextjs13  application with the new app router.  I am using version  13.4.2 in this tutorial.</p>\n<p>I'm  going to go over quickly what  these folders are. The <code>app</code> folder is  the main folder we're in  this page.js folder is your home page  so we are going to go inside of it we  can remove this image import and remove  everything inside of the main tag  including the main tag  we are just going to create a section  element and inside of it we'll have an  H1 saying home  perfect now we're going to go inside the  global CSS the global CSS we're going to  move lines 5 through 27 and we'll keep  lines one to three because we are going  to use Tailwind CSS for this application  the layout for file is the file for the  root layout this is going to apply to  all the pages in your application which  is referred to as the children this is  where you can import your next font  Googles this is where you import the  global CSS and this is where you can  have metadata for your whole application  after we were done with this we are  going to organize the project a little  better we are going to create two main  folders the first one is going to be the  API folder this is where we're going to  have next auth and we're going to have  all of our backend routes inside of  and then we also are going to create a  folder inside the app called  parentheses site  so this means that this is where all of  our client side facing  um  pages are going to be this does not  include so I'll explain how the routing  Works in xjs it is a little different  than a react application  so for example inside of the site I'm  going to create a new folder called  register  register is going to be considered a  page route  so it is going to be localhost 3000  slash registered that will be the page  and to write the code for this register  directory you get to create a file  inside of the directory called page.jsx  and then I'm going to create a login  page as well so I'm gonna have a folder  called login  and then we'll have a new file called  page.jsx inside of the login so  technically now we have two client-side  facing Pages named login and register  and then a third one too if you include  the home page  so I am just going to open up my  terminal kick real quick and run npm run  Dev  this is going to start my localhost 3000  I'll open it up  and I will just show you for example  what is going on it's the home page is  the localhost 3000 if we go to slash  login it should be empty but it doesn't  give us an error  so if I go to like slash h  it will give us this page cannot be  found  so they log in and register page are  there but there's just no content on it  so now that we've set up our environment  and our application we are ready to set  up Prisma so we can connect our mongodb  database so to connect our mongodb  database to our next js13 application we  need to use prism so we're going to set  up prism right now  so we do have our development server  running so let's stop it by pressing  Ctrl C and we need to install a package  which is a Dev dependency it's going to  be our first package and it's called  prism  so we need prism to connect the database  after we install it we need to  initialize this so it's going to be npx  prism init  so that means two things happen  well more than two things but two things  that you could see so you're gonna see  it created a prism directory right here  and inside of it has a schema.prisma and  it also created an environment file  right here dot EnV  so let's just go inside the schema.prism  real quick and we have first off there  is blue and green text  uh in different colors so if yours text  doesn't look like this it's because you  need to download the extension prism  so we have the prism extension it has  832 000 downloads and it adds syntax  highlighting formatting Auto completion  jump to definition and letting for prism  files this is very useful if we are  going to use prism so I highly recommend  you get this extension on your text  editor  next thing we are going to do is we are  going to go inside the schema.prism and  we are going to change the default  provider which is the postgres SQL  to a mongodb  and then the database connection URL  string is in the EnV file under the  value database underscore URL so if you  go to this it is right there this is our  default string that has no use to us so  that means we need to create our own  string from mongodb by creating a  collection  so to do that we are going to open up a  Google Chrome tab go to Google  go to mongodb  it should be the first search result  and then we're either going to sign in  or sign up in an account I'm going to  sign in using the Google provider  so we're just going to sign in  your page looks something like this at  the top left there's a drop down you  click it and you click new project  so for the project name I am just going  to name it what my project is called you  can name whatever you want  so YouTube next auth  we're going to click next  we don't need to add any members or set  permissions so we're just going to click  create project  this is going to create the project and  then now we're going to build a database  so we're going to build the database  we're going to select the free version  the providers AWS the recommended region  is going to be whatever it is with the  star  and then your cluster name you can leave  it as default or you could change it  wherever you want but it is only server  side so no client is actually going to  see it  so we're going to click create  and the most important part is this  username and password so I'm just going  to use the username  and then the password you could have  whatever password you want  but I'm going to keep the one that they  gave me I'm going to copy it open up my  notepad  paste it in my notepad because we're  going to need this for later  and then we're going to create the user  so it shows the user created right here  you're going to use your local  environment  and then you're going to use your IP  address or you if you want any IP  address to have access to this database  you press  0.0.0.0 slash zero and any IP address  can access its database as long as  they're logged into your account  we're just going to click finish and  close  and then we're going to click go to  database and this could be instant or  this could take a few minutes  and this is going to create your cluster  and your collections mine is already  created because it says status is active  and it's green  now we're going to connect the database  by using the database connection string  we're going to click connect  and we're going to click mongodb for vs  code  it's going to give us this connection  string right here we're going to press  copy  we're going to go back to our vs code  we are going to paste that string right  here  and then we're going to add a test at  the end so it's going to be mongodb.net  test  and then in the password with the  greater than and less than sign we need  to replace it with the password in our  Notepad  if you don't do this you're not going to  be able to successfully connect to your  database  so now we are technically successfully  connected to mongodb we could go close  this  and we can leave this page open for now  and now we are ready to actually start  creating schemas in our schema.prisma  file  so we are going to create two schemas  one is going to be a user model and the  other is going to be an account model  so the difference is that we are all  going the everybody's gonna be sent to  the user model  even if you sign up with the account  either through Google or through GitHub  we need the account model because like I  said we are using the providers of  Google and GitHub so we need that and we  are going to use a relation to connect  these two models a relation of one to  many so I'm just going to copy and paste  these schemas inside of my code editor  below and I'll explain exactly what's in  it  so we're going to copy  paste  so right here I connected a user schema  right here  every user is going to have an ID of  string  and this string right here has a  decorator attached to it this decorator  is straight from the Prisma docs and  this is what you have to use for the  mongodb database  we're also going to have a name an email  email verified image we're going to have  a hashed password because we do have to  Hash passwords before we send them to a  database  created at update it out we're going to  have the accounts and these accounts are  going to come from the account model  that's what it means so anytime somebody  gets a GitHub provider logged in  it's going to still be in one specific  database so it's easier for us to see  and like I said we have a relation the  relation here is in the account the  account is in relation to this user  model  right here and it's going to take in  consideration the user ID right here in  the reference each ID to make sure they  match up  so that is how we're going to connect  and how we're defining types inside of  our database using prism  if you do want more information on this  stuff I will link the prism docs below  inside the description  we want to access prism globally as well  on the client side so we do have to  get a package on to our application  so we're going to install  the at Prisma  slash client package  so when you do this there's two ways you  can do it you could do Prisma client  globally in one file and then just  import it from that file or you could  just initialize Prisma on the top of  every file that needs Prisma  so the reason why you would need Prisma  on the front end or on any of your code  on the server side is because it gives  you different methods and functions that  allow useful transactions  so we are going to actually create a lib  folder it's going to be Libs  and then inside this lips folder is  where we're going to initialize the  Prisma client and we're going to make it  a global state so we could use it in any  file we need as long as we import it  from the libs folder  so we're gonna have Prisma db.jsx  and we have to import the Prisma client  we're going to call client  Global this dot charisma  or we're going to initialize it with the  new Prisma client function  and then we're going to say if the  process dot environment variable like  the node environment is in production  not development  if it's in production the environment  which means that we're pushing it to  production the whole application we are  going to use the globaldist.prisma for  the client  and now all we have to do is export  default client  so like I said if we want to use the  Prisma client in any of the folders we  just got imported from this export okay  so now we are finally ready to install  packages from next auth so I'm going to  install two packages off the bat so  we're going to have next dash auth at  latest  and then we're also going to have a  prism adapter so this is going to be  next Dash auth slash prism  Dash adapter  so we're gonna install these two  packages next all that latest is the  main package that allows us to use the  authentication that Microsoft provides  and the prism adapter allows us to  connect prism and the database to next  auth  so to make sure these packages are  installed you can just go to the package  Json  we have everything installed with the  versions I'm using  I'm just going to close this tab close a  few more tabs I'm not using  just to clean things up  and now we have to create a main entry  point for this next auth  allow to allow it to be on our project  so to do that  we are going to create another folder in  the API called auth  and then we are going to create a catch  all API route  and it's going to be a bracket dot dot  dot next  auth and then close bracket  and then this will have a file  underneath it called route Dot jsx  so this route jsx file is like I said  the main entry point for our next auth  application  so there's a few things we have to  import before you even start typing any  code so we have to import next auth  that's the first thing  next we want to import  prism and that is from that Global lip  file we just created from dot dot slash  dot dot slash  Libs slash prismdb  we also want to import the prism adapter  then like I said we are using three  providers that allow for authentication  the credentials the Google provider and  the GitHub provider so we need to import  those as well  okay so now we have all the Imports  ready to go now we can actually start  coding this entry point for next auth  so we are going to create some auth  options  and these auth options they give us  different properties that we can use to  make our authentication process a lot  more efficient smooth and clean  so the first thing I'm going to do as a  property is the adapters I'm going to  define the adapters  or the adapter my fault the adapter so  it's the prism adapter and it's taken in  the prism globally so that's the first  thing we're going to do and then we have  to define the providers so it doesn't  know what providers we're using so we  have to tell it what providers we want  to use  so first one I could do is I could do  the GitHub provider  and the GitHub provider takes in an  object with the client ID  and the client secret we're going to get  these values later but for now we are  also going to send all of these values  to the EnV file because these should not  be client side facing  after that we are going to have the  Google provider  and is going to have another object with  the client ID and the client secret as  well  and like I said we will get these values  later on in the tutorial  um another one we are going to do the  last provider is the credential provider  this is the most complex provider to  actually code so that's why I'm leaving  it right here at the bottom so the  credentials provider first takes in a  name  and we have to name it so we're going to  name it credentials that's what the um  docs say and that's what most people do  and then in the credentials  we're going to have an object  and then inside of this object we are  going to have  different labels that we need to fill  out so these different labels we're  going to fill out I'm going to have an  email  and then the email is going to be  defined with a label type and we could  have a placeholder not necessary  we're gonna have a password  we have a label and the type is going to  be password and then we'll have a  username  and then it'll be a label type and a  placeholder as well  so we could close this  and then right below this we are going  to have the async authorized and it's  going to be a function which is going to  be the authorization and authentication  logic of the credentials provider  so for now we are going to do this so  I'll type this out first and explain  what we're doing so we are going to  create a user  because we don't have the register API  endpoint gradius so we have no  registered users so technically we have  to hard code a user inside of the logic  part of the code which is right here  so we're going to say cons user equals  and then it's going to have an ID a name  and then we can give it an email  gmail.com  which is not my email so you could try  to email if you want but that's not  gonna get to me  so we have a name and an email and ID so  this is a user I just created this is  dummy data and all you have to do is  return  this user the reason why I am doing this  is because next auth actually gives us a  pre-built login page to test out our  um code before we actually start  creating the register API and not  everything works so that's why I'm doing  this like I am now  so we are going to close the credentials  provider  and then we could go outside of this  array  and outside of this array we are going  to have a few more properties that I  want to call  so one that is required is going to be  the secret  so we need a secret and the reason why  we need a secret is because it helps  encrypt the JWT tokens  so this secret should be on the EnV file  as well we're gonna have to create that  now  so secret equals it's going to be a  string and they could just be whatever  it should be something hard to guess  so there is my secret I'll close the EnV  file  and then the next  option I want inside of the auth options  is going to be the session  our session is going to have that  strategy  of JWT  that's how we're gonna encode all of our  stuff through Json web tokens  and then after that  option we are going to have one more  option and this is going to be debug  so debug is a pretty simple  um  option that we're going to use here in  the auth options it is going to help us  when we're in development and it's going  to give us errors specified in X auth so  for messing up anywhere in the next auth  code this will pull up in this terminal  right here and tell us exactly what  we're doing wrong so that's why it is  definitely useful to have this right  here  okay and then the final thing we have to  do is we have to export these auth  options but we get to export them in a  certain way  so we have to export them as handlers  and we had to pass them through the next  auth package  so we have all the auth options passed  inside this next auth inside of this  specific variable  and we have to export the Handler but  you just can't export handlers like this  export the ball handler the reason why  is because we are in a route file in the  API of nexjs  if you're on any route files in xjs you  must export them either by an HTTP  request so like a post request or a get  request or a put request it has to be  exported like that so we are going to  type export with an object Handler as  git  Handler  as post  because we are only using git and post  requests inside of this catch all route  okay so now I want to make sure all of  this code is working and like I said  next all provides a pre-built login page  and we are going to test out to make  sure we are returning this specific user  like this code says right here  so we are going to run the development  server npm run Dev  open up localhost 3000  and the path for these pre-built sign in  page is going to be slash API slash auth  sign in  and here is this pre-built login page  that is  specific to next auth to sign in with  Google and sign in with GitHub isn't set  up yet even though it's showing it's  showing because we added them in the  providers option but we don't have the  keys so this will not work it's going to  throw an error the sign in with  credentials though however should work  and it's only going to return that user  that we hard coded in the async  authorized credentials function  so I could type in anything I want here  and then this and then I'm going to  inspect the page before I submit it  and we are going to go to the network  tab  and then when we submit it we should get  a 302 which means a return and found  content  so perfect  so now we have  a credentials of 302 with the request  method of post  and it's shown us the request URL that's  showing the payload that I typed in  and it sent us to a login page  okay now we also can look at the  application tab  and if you look at this it gave us a  session token right here so this session  token is what's going to give us that  session data that we could use to show  the user's name email  whatever information you want to show to  the client that they signed up with you  can show through here and you're gonna  have to be able to access this session  token and there's going to be two ways  you could access this session token that  I'm about to show you okay so there's  two ways to get session data and that is  through server side or client-side  rendering so server-side rendering means  you're just going to get the information  quicker you could do either way you want  whatever you prefer but for this project  too I'm going to do client-side but I'm  going to quickly show you how you can do  both real quick  so technically we are logged in because  of these tokens we refresh the page that  the tokens are still here  so we are going to do a server side  rendered real quick I am going to  open this up real quick right here we  are on the home page  we need to import a few things from next  auth to do a session side render  so we're going to say get  server session  and this is from next Dash auth  and then we are going to  create a session con session  and this is going to equal weight  that means we need a asynchronous  function  in this variable session is going to get  the session server  server session  and it's going to take in the auth  options which is the backend code from  that catch all route which will be Auto  imported when you type  so now if you want to show it  you could have H1 that says server side  rendered  and then we can do a json.stringify  so we'll just do Json to a stringify  and you're going to stringify the  session  so now since we are logged in we should  get all the information on the home page  so if we go to localhost 3000  I'm going to remove this real quick and  there is the user that is hard coded on  our catch all API route name Brett email  Brad gmail.com and that is server side  rendered okay so that is how you render  server side how do you render client  side  so if you want to render client-side is  a little trickier but it's not hard at  all the reason why is because in xjs13  all pages by default are server side  rendered so if you do want to render  something client-side like a use date if  you use any Hooks stuff like that you  need to put a used client tag at the top  of that file  and we need to create a context folder  so this is where I'm gonna have all of  the providers in context for this  project  and inside of that we're going to create  a file called auth context  Dot jsx  and then inside of this auth context jsx  we are going to  initialize the session provider so like  I said you have to mark this as use  client if using any type of hooks or  providers  so we're going to import the session  provider  and this is going to be from  next auth slash react  then we're going to export a default  function called  all the context but I'm going to change  the name to provider  because this is what I'm going to use in  the other files  we are going to return  the session provider  and it's going to be wrapping all of the  children  and I just got to close this as well  and this file is complete and the reason  why I'm doing in this file like I said  before is next js's docs recommend that  you do any providers inside of a  separate file so I'm going to import  this provider into layout you should not  do any layout  you should not do any provider  functionality inside the layout it needs  to be separate  so I'm going to import the provider from  the contact slash auth contacts  and I am going to wrap all the children  with the provider  so just like this  so now I have access to the use session  hook inside of my application which will  render a session data client side so I'm  going to show you exactly how I do that  too  so to do that we are going to create a  folder  for this purpose only called components  and inside it we will call a file call  user  .jsx  we could just do a react functional  component  and we are going to import the use  session hook  and this is going to be from next Dash  auth slash I think it's react  let me just make sure that's the correct  yep so it's from next auth slash react  and if we want to use this session  which is uh we are going to call it like  this  so we are calling the session  by using the use session hook  and then if we want to show this off  we can just do a Json dot stringify  again Json Dot stringify  and we're gonna do this session  and now I just want to compare the two  on the same page  we are going to  get the user  I'm just going to capitalize this  we are going to get the user  inside of our home page import  user from the components  and then we're going to do a  self-closing tag  because we still want this page to be  server side rendered  so if we go over here  it says react concept isn't available in  server components the reason why is  because we did not do a use client on  the top  so you see it does throw that error I'm  glad I actually did the error so to show  you so if you don't do a used client at  the top when you're doing like a hook or  use session or any providers you'll get  error thrown at you  I think I might have to restart the  server let me restart it real quick  we are going to run the dev again go to  localhost 3000  it might have logged us out  but it looks like it did it so as you  can see right there  this popped up maybe a second later if  you want to replay it this popped up a  second later and this was technically  the client-side rendered  so let me just label real quick  H1  client side rendered  so if we go back to the page  it'll be more cleared so this is the  server-side rendered session data and  this is the client-side rendered session  data if I refresh it since it's already  I think loaded it might be at the same  time but we'll check it out  nope as you see it takes about a second  more not even a second more to render  the client side so the client side does  take a little longer but it does get the  job done both of them do get the job  done and it's essentially the same thing  just using a different method  okay now that we're able to  connect next auth successfully and show  that we can log in a user with a  pre-built page and we could get the  session data by using a client call or  server side call now it's time for us to  actually register our own user  so first thing first is I want to create  the client-side register form  so I am going to minimize this API  folder and we are going to work  in the site folder in the register  page.jsx  so like I said earlier this isn't a  tutorial on Tailwind CSS so we are going  to use a Tailwind CSS well Tailwind UI  template for us register form  so we are going to go on Google  and we are going to go to Tailwind  CSS  we could just go to the top right here  go to components  browse components  and then if we scroll down  we should be able to see a sign in and  register form  so if we click code and then we make  sure the down arrow is clicked to react  we can literally copy all of this code  and this is going to be for a register  and I'm using simple so that is the  format and it should look like this  so I'm going to minimize this paste  decode in here  we're going to scroll the top and it has  some comments  so it's telling us that we need to  require a tail in CSS forms  and that is a package that Tailwind CSS  requires us to download in our project  so we need npm install at Tailwind  CSS slash forms  we're going to press enter  and now we have that package on our  system but now we need to implement it  in the config file so to do that inside  the plugins array bracket  we're going to press require  and then it's at Tailwind CSS slash  forms so anytime you do changes in the  config files or EnV files you should  reset your development server and  restart it but ours is currently not  even on so we're good to go  so we're going to remove this code  and we're going to move this comment we  don't need to do this comment at all  we are going to call the function  register  we're going to change this to register  your account register  for an account  and then if we do look at what the  template looks like we only have two  fields and we're actually requiring  three we need a name email and password  for the register portion of the client  so to do that we need to  just pretty much copy this whole div  and paste it down again and then just  change a few fields  so the first field should be named  HTML forward name  ID name  it'll be a name for name  the type is going to be text  we don't need an autocomplete  and I think everything else is looks  good let's just see if the UI looks good  and let's just change the button down  here  to register  let's open up localhost 3000  we're going to get sent to the home page  you see we're still logged in  we're going to go to the register  so here's how our registered page looks  looks pretty nice right  real quick to make too  the only thing is it's not functional we  have no State like we could type in  input but we're not receiving any states  so that's the next step we need to do  so we need to mark this page as used  client  since it is client-side rendered because  we're using the use State hook  so the U State hook  we are going to get the values of all  these inputs so to do that we need to  initialize you state by  data and set  data  and that is going to equal an object  with the initial values of name  which is empty string email empty string  and password empty string  so we have that going for us now and now  we need to add the values and on changes  in each input  so the value is going to be data.name  because it's the data object with the  property name  and then the on change is going to be  setting the data from an anonymous  function to the e.target.value  now we need to do for the email input  which is value equals data.email and the  on change is the set data  exactly like that so if you just change  this field right here  and this dot dot dot is the spread  Syntax for data so it's showing all the  data is the same and we're just changing  the email field  we're going to have the value here  data.password  and then we'll have the on change as  well  so now  all of our inputs should be get we  should be able to receive the state but  we're not doing anything with the state  yet  so on the top of the form right here  where the form starts we're going to  remove the action and Method and we'll  do an on submit  this on submit is going to point to a  function called register user register  user which we haven't created yet so  we're going to create it right above the  return we're going to create an arrow  function called register user  and it's going to take in the E dot  prevent default and we're just going to  close it for now  I like putting this in a parenthesis  so let me just shut down the terminal  real quick  and we are going to install one package  which is going to be axios  you could do an axials request or fetch  request when calling data from the front  end to the back end and we will use  axios so we're going to import axios at  the top here from axios  and then now before we even do axios  here we actually do need to create a  back end for this register API endpoint  okay so now we successfully set up the  front end for the register when the user  needs to register now we need to set up  the backend API call for this register  as well  so to do that we want to install one  package before we get started and that's  going to be bcrypt reason why we are  installing bcrypt is because we want to  Hash passwords before we send them to a  database  now that we have the  um package installed onto our project we  are going to go inside the API folder  create a new folder called register  and then inside of the register we're  going to have a route  Dot jsx  so now this is where all the backend API  is going to be and then the front end is  going to call the back end which is  going to be here  so we are going to import bcrypt from  bcrypt  we're also going to import prism because  we need to use some prism functions and  methods  and this is going to be from  and we're importing it from the global  lib file that we created earlier and we  also need next response and this is  specific to next.js and this allows us  to send responses back to our client  so now we are going to create an  asynchronous function  and we don't name functions like I said  in routes we just call them whatever the  HTTP request is  so it's a post request and it's a  request  taken as a parameter and inside the code  block the first thing we need to Define  is the body  so the body is going to equal the  request dot Json  also we want to destructure the body  so we're going to have a name email  and password coming from the front end  which is going to equal the body  so now we restructured it and now I want  to do a few checks  so if they don't enter a name email or  password we want to make sure that we  send an extra response saying that  there's missing fields  so to do that we are going to do if no  name  or  no email or password  we want to  return a new  next response  saying missing  fields  and then we want to give a status of  400.  so that is the first check we are going  to do inside of the back end and make  sure they actually entered something in  the inputs  when they register  next thing we want to check is we want  to check to make sure that there is no  user already associated with the email  they're trying to register with  so for example we are going to create  a variable called exist and we're going  to await a Prisma dot user dot find  unique  and this is going to take an object  and this object is going to have a where  and then this object is going to be an  email  so we're just checking R against our  database using prism to make sure  there's no email associated with the  email they're trying to register with  that's all we're doing here in this code  so then right below it we're going to  say if exist is true that means if there  is an email  that does match what they're trying to  type in we need to throw a new error we  need to stop them right there because we  only  one person can have one email each email  has to be unique so we're going to say  email already exist  so there's that error  and then if they pass that check error  we need to Hash their password that  means that their email is fine the  username was entered I mean their name  was in there their email  isn't used by another user so now we  need a hash their password  so we're going to say hashed password  and then we're using bcrypts function of  hash that means we're going to Hash the  password  which is the first parameter take send  the password which is the string and  then this is the salt the salt you're  going to put 10. this is just going to  be the strength of the hash of the  password  so after reading  we hash the password we need to now  create the user in the database  because we are registering the user  so we're going to use the  prisma.user.create function  we are going to have the data object  with a name  email and password  which we don't need password here we're  just going to put a hash password  and we are going to close this object  and make sure everything is closed  properly  and then close that as well  and that allows us to create the user in  our database  so after that step is done we are good  to go for the register function and all  we have to do  is return  that user  and returning the user with the next  response dot Json  and user  so that is going to be it for the  register route  now what we can do is we can actually  test this route with the front end but  first we got to hook it up before we  even test it because I did stop in the  front end before we actually finished  all the code  so if we go back to the register page on  the client side  inside of the register user function  we need to use axios  to do a post request to that specific  endpoint we just created and that is  slash API slash register  and the reason why is because it's in  the API folder and the register so that  is the path we're using  and then we are going to pass in the  data oops data and the data is whatever  they enter those on change values  after that we could do a DOT then  this is going to take an arrow function  and this Arrow function for now we could  just do an alert  saying user has been registered  and then we could do a DOT catch  and then we could do an alert saying an  error occurred  so now we could test this out and  obviously if it works we're going to get  this alert  and it's going to also be registered  into our database the new user so let's  test this out real quick before we  continue with anything else  so run the development server on  localhost 3000  um  just reload this to make sure  everything's good  nope  I did a minus sign not equal  Okay cool so let's check the console  make sure we have no errors so we're  clear for the console  let's type in Brett  Brett gmail.com  and then one two three four five six  seven eight I'll do is the password we  will inspect the page before we click  the button  we will go to the network tab  and we'll see what requests we get what  status we get back  so we're going to click register and an  error occurred so we obviously did  something wrong  it says we are missing fields  so we could check back and see what we  did but it looks like we did type in  everything so we typed something wrong  on our code  so let's minimize this  go back to our register route which is  our backend  and we said if there is no name no email  or there's no password  we're going to return next response  missing field status 400.  so let's look to make sure that looks  good  name no email no password return new  next response missing field status 400.  name email password body request.json we  didn't in a way to here that's why  because if we don't await it that means  it's just going to keep going with the  function  and even though this takes a few  milliseconds we need to await the  request because it is takes time to  process to come to the back end so let's  try it again and we shouldn't get an  error now  so that's just like a quick debug real  quick to make sure everything is working  good so you just go back make sure you  have the error codes and see what's  going on  so we're going to go to refresh the page  I'll type in Bret  we'll do Brett gmail.com  and we'll do one two three four five six  seven eight  we'll click register  and this time the user has been  registered so we do get a 200 request  we have all of this information here we  have an ID created we have all of the um  schema properties here created for this  user the updated that we have the hash  password the ID the email verified we  have a post request of a 200 status and  it's requesting to the endpoint API  slash register so now we can check our  mongodb  so let's just go into mongodb and sign  in real quick  and we're going to make sure that this  user is actually in the database  so we are on the correct collection we  are going to browse the collection  it's going to be test slash user and we  have a Brett and then Gmail with the  hash password and the ID it's underscore  ID so everything works on the register  API and and also on the client side as  well  now we are going to create the login  client side page we are literally going  to do the same thing and we're going to  take a template from Tailwind CSS which  is the tailwind.ui  so if we go back to the tailwindui.com  we could literally just take the same  sign in form not a big deal  copy all of the code again  minimize  Pace it in the front end code so we  could close the API folder make sure in  this site  login and then page jsx  we're going to paste it  remove the comments  because we don't need them  and then at the top of the page we need  to use client we need to tag it with the  use client  reason why is because we are going to  use use state from react  and let's change the function name to  login  we are going to initialize the use state  by doing the variables data and set data  as an object we're going to take in the  email and we're going to log in with the  password so that's what we're going to  log in with now we need to add the  values and on changes on the inputs  so the value  is going to equal data.email  and then the on change is going to set  the data and change the email to the  e.target.value  and then same exact thing here for  password  okay now both of these inputs we are  getting the state from what the user is  typing  and we are not using axials for this  specific file the reason why is because  next auth provides us the sign in  function that we could Import in here  so the next thing we are going to do is  we are going to make sure everything is  set up inside of the back end of the  login API  okay so I just wanted to check to make  sure the login page everything looks  good the console looks good and it's a  sign in with email password and sign in  perfect  so like I said we are going to start  working  on the back end but before we do that we  are still in the front-end client page  login page I just want to remove this  right here the action and post we're  going to have on submit and we're going  to have a login user  as a function and then we need to create  this function  so it's going to be a arrow function  with e dot prevent default and then  let's just close it that's all we're  doing for now  let's make sure the page looks good  refresh it everything looks good no  console log errors as well  okay perfect so now let's actually start  working on the backend API of the login  so this is how we're going to  authenticate the user and this is the  main part of the whole tutorial so to  authenticate user with the login you  could either do it during Google  GitHub or you could do with the  credentials provider right now we're  working on the credentials provider and  that is the most difficult one to do so  to do it you have to do it inside the  catch all route which is in the route  jsx file  inside of it where you do all the logic  and authentication is inside of  this authorized function so right now  all we have is a static user named Brett  with email at Brett gmail.com  we just created the register  um API endpoint and we made it  functional so now we could actually  register users so we don't need the  static user anymore what we need here is  we need checks to make sure that  everything is checking right and make  sure everything's right before user logs  in so for example if somebody's trying  to sign in they need to make sure they  type in the email and password if they  don't we need thrown error we need to  also make sure that that email is in our  database so they can actually log in  with that account  another thing is we need to compare the  passwords so that these passwords match  and if they do match we can log them in  and if they don't match we are going to  throw an error saying the passwords do  not match  so first we are going to remove this  static user  and let's give us some space and let's  do a comment saying we're going to check  to see if email and password is there  that's what you really want to check  so we're going to say if there's no  credentials.email or there's no current  credentials.password we're going to  throw a new error saying missing fields  we can obviously change the error  message or whatever we could say please  enter and  email and password  so that means that is the first check  they had to pass it's like almost like  in sequential order so they gotta check  this check and if they pass that check  they get to go to the next check  so this is the first check very simple  right so the next check we're going to  do is okay they typed in their  information correctly now we want to see  if the user actually exists if they're  actually logging in with the registered  user  so to do that we are going to say cons  user  equals a weight  and then we have a Prisma function  saying find unique that means we are  going to go on our database and we're  going to find that email and make sure  it matches up with the sign in email as  well  so it's going to be passing an object  with the where object and we're going to  look for the email of the credentials  email  and we're going to try to match them up  so let's close this up  and then after that we need to do a  check  so we're going to say if user doesn't  exist  so if no user was found actually we'll  say that if no user was found  so if we look through the database and  we don't find a user we need to run  this specific check and throw an error  at this specific client  so we're going to say if there is no  user  or we're going to also say if the user  doesn't have a hash password reason why  is because we're going to have users in  our mongodb database that just have  password and the reason why is because  if you look at the schema.prism  there's not a hash password for the  account right  hash password appears optional so if  somebody signs in with the GitHub or  Google  they and they they don't have a hash  password so how are we going to  authenticate them when they log in we  don't  so that's why we need to check that as  well  so we're going to say if there's no user  dot hash password  right so if we don't have a user or the  user does not have a hashed password  we are going to throw a new error  saying no use your phone  I mean if you're logging in  with a GitHub provider you always log in  click in the GitHub provider button you  do not log in here so that's why we have  to throw this hash password error as  well  so that's for that and then the next  check we do is if we do find the user  and the user does exist they will pass  this check that means we're going to  check next to see if the passwords match  so we're going to check to see if the  passwords match  and the way we do this is we have to use  bcrypts compare  functional function  so to do that we have to import B Crypt  at the top  so we're going to import bcrypt from  bcrypt  so we could use the compare function and  method  so we are right here  we are going to do cons  words match and we're going to await the  B crypt.compare and the first parameter  we are taking the password that the user  actually typed on the sign in form and  then we're comparing it to the hash  password in our database  so then we need to check right after  this  saying if passwords don't match  so if they don't match and they typed in  the wrong password  we're going to say if the passwords  match is not true that means they typed  in the wrong password we're going to  throw a new error saying incorrect  password  and we're going to close it right there  so that means that they pass all these  checks that means they actually logged  in with a user that is in the database  so after that we are just going to  return the user  so right here is all the functionality  from lines 27 to line 54 about 27 lines  of code  to actually verify to make sure that  this user is in the database and log  them in and to authenticate the user  during a login process  so now I want to test out this code  right here that we just made to make  sure I can actually log in successfully  so if we go to the login page we have to  connect that backend code right  to this front-end client side right here  and like I said before we can't use  axios because next auth provides us a  sign in function that allows us to use  so we must import that at the top  so what we're going to do is we're going  to import  sign in  and this is going to be from  next auth slash react  so we're gonna have to use this sign in  function here instead of axios  so to do that it's going to look exactly  like this we're going to sign in  the credentials  with the credentials of their backend  and then we are going to pass in  the data through a spread syntax  so data  and then we're going to have a comma and  then redirect  will be false  and if you don't have redirect as false  it is going to redirect you to a  pre-built next auth page that we don't  need to use  so we're going to have that there  we're going to close this  and then we could close this as well for  now  obviously we're going to have then and  catch statements in a little bit but  we'll do that one after we test this out  correctly  we can actually do a DOT then for now  and we could just say alert user has  been logged in  so that would actually alert us is  saying hey we're logged in and we could  just check the cookies to make sure  we're logged in as well and we could go  on the home page and see what it renders  for user  so let's check this code we are running  let me just reset the development server  just in case  let me go back to my localhost 3000  I will refresh the page  and we are just going to use the  registered user that I already  registered so as we remember it's Brett  gmail.com and then the password is one  two three four five six seven eight  so we're gonna do Brett gmail.com  let me just switch the network tab  and then we're gonna do one two three  four five six seven eight  we're gonna sign in and it says user has  been logged in we can make sure to by  looking at the application we do have a  next auth session token that's where all  the session data is and we could access  the information and then I could just go  to localhost 3000  minimize this real quick and then it  says username Brett and then Brett  gmail.com  and this is the account that I just  logged in and registered through mongodb  so that means everything is working how  it should okay now I want to download  and install a package onto our  application which is react hot toast so  react hot toast is going to give us  toast notifications so these are  professional looking notifications if  somebody logs in successfully or an  error occurs  you can do alerts like we've been doing  so if you don't want to do the step you  can skip this and just go to the next  step  everything is time stamped as well  so the  package we are going to install is npm  install react Dash hot Dash toast  and the way this works is we need to  wrap our whole application with the  provider  and it's going to be like a toaster  provider so to do that instead of going  to the layout we need to go inside our  contacts folder create a new file called  toaster  context.jsx or whatever you want  and then inside of this we are going to  mark it as a used client  and then we are going to import  toaster  from react hot toast  we're going to create a function called  toaster context  and then we are going to return  poster and toaster is a self-closing tag  so it's going to look exactly like that  we will close this  and then let's export it so we could use  it inside of our layout file  so now we are going to go to our layout  file  and inside the layout file we have to  self close tag this so it wraps around  all the children  so we will import toaster context from  contact toaster  and then we could put it right behind  this first provider  and it's like I said it's a self-closing  tag  so just like that so now that allows us  to use toast notifications throughout a  whole application  so the first page I want to do it on is  the register page  so if we go to register oops that's API  close your API folder go to the front  end  we're going to go to the register page  and instead of alert  we will do  toast Dot success  and then it says user has been  registered  cool so that's if this works this API  endpoint works then we're going to send  this notification  and if it doesn't we should send a toast  dot error  something went wrong  perfect  so that's that toast right here for  notifications  and now let's implement it for the login  page  so for the login page it is a little bit  different  the reason why is because  for the then we are going to take the  parameter of callback  so when we use the sign in function with  next auth it is giving us callback  options and properties so this is the  property we're going to use and then  we're going to call an arrow function  and then we're going to do an if  statement so we're going to say if there  is a callback error  so if there is a callback error we want  to run the toast dot error and whatever  the callback.error is  so for example the Callback dot error is  going to be whatever we put inside  of our backend code right here with this  error  so if they didn't enter their email and  password it'll throw this error they  didn't have no user found in their  database it's going to enter this error  if it was an incorrect password it'll  enter that error that would only work  if you pass in the Callback dot error  so then that's if it fails  so we're going to say that let me see  where this code ends  [Music]  okay  and then we're gonna have another if  statement inside of the then  so if there is  a callback  dot okay  and there is no callback error  we are going to run a toast success  message  so we are going to say toe success  logged in successfully  so that is all we have done so far for  toast notifications now we need to test  them out so to test them out let's start  our development server  and I'm going to register a completely  new user  so we're going to go to the home page  and see if we're still logged in so  technically we're still logged in  I will inspect the page go to  application delete all of these for now  obviously there's an easier way to log  out but that's just going to be what we  do for now  we are going to go to slash register  and then on the register page let's  register a new person  so we could do  Tom  and then Tom gmail.com  and then we'll do the same password one  two three four five six seven eight  and before I click this  we should  get inside of the register page  user has been registered if everything  worked correctly and then if it didn't  something went wrong  so we will click register  and we have one error  toast is not defined and it's because we  didn't import toast at the top  so let's  open up our vs code again  and we didn't so we just can't use toast  without importing it  so let's make sure we have it on the top  of both pages so here's the register  page import host  login page we imported toast okay cool  so let's go back  and let's try again  so we register something went wrong  uh where's the network tab  we have a 500 error  let me try to refresh it and try it with  a different user let me make sure that  user actually didn't get registered  and it did so the reason why we got  error is because when I did submit the  uh register it gave me an error that  told us wasn't defined but still  submitted our user  so let me delete him real quick tomatoma  Gmail now we only have that one user  let me go back to localhost refresh the  page and let's register again  Tom  Tom gmail.com  one two three four oops  one two three four five six seven eight  and then let's register  and it says user has been registered and  we get a 200 okay post request  and we see all of the information of the  user we just created in our mongodb  database  let's just confirm it with mongodb as  well  and we have a brand new user right here  cool  so now  I want to go to the login page  so slash login  and we are going to log in now with this  user Tom gmail.com  and it'll be one two three four five six  seven eight and then we'll sign in  and right now we are not getting any  notifications popping up  but it looks like we are logged in let  me see and we are logged in  and you could tell we're logged in by  just going back to the home page and we  have Tom and then Tom at email so the  only thing that's not working is the  toast notifications for the login page  and let's fix that right now  okay so let's fix this toast error  problem that we have and let's just look  back at the code and where the problem  is actually happening  so we don't have to sign out button so  let's delete all these tokens refresh  the page make sure we're signed out and  it says null perfect  let's go to our login page again  so we're prepared to log back in  and let's look at the code for the toast  so we're on the login page let's review  this code and make sure everything is  good  we have the sign in function signing in  the credentials API provider  we're using all of the data which is the  email and password  the redirect is false if it's true  if it's true then we are doing the  Callback and if there's an error we're  doing a toast.air.callback error  and then we're saying if the Callback is  okay  and there is a callback error which  if there is no callback error  so that's the issue right there it  should be the issue so if there is no  callback error then we do toast stuff  success logged in successfully  because we're saying if it was okay and  there was an error  then you run this so it didn't make any  sense so let's try it again and  hopefully that is what fixes the code  so let's do Tom gmail.com  one two three four five six seven eight  sign in  and it says logged and successful so  that is why there was an error not  popping up with the toast notifications  now let's just make sure all of the  error messages are working correctly too  so let's delete everything refresh the  page  and let's do a Tom gmail.com  and let's just give some random password  like we forgot our password and we're  trying to guess so we try to sign in  correct password perfect  okay so let's do this and then let's  um  do an email that's named part of the  database so tom23 gmail.com  no user found  so it's checking it in sequential order  so if it's checking the user first and  then if the user is good then it's going  to check the password but if the user is  not good it's going to throw that right  off the bat  and then if we don't have anything in  this field the email address  uh you can't see it so if you don't have  anything in the password  it says please fill out this field and  that is from the at Tailwind CSS forms  package that we installed when we  created this template so that's that  check right there  so it looks like everything is working  pretty good and everything is actually  working how should  so the next step is we actually need to  create a dashboard for the client and we  also need to set up the Google provider  and we need something GitHub provider as  well  okay so first we will set up the GitHub  provider  what we are going to do is we are going  to set up a button below the sign in  or you can do on the register account  we'll just join the login page you can  do whatever you want for your  application but we're going to set up a  button below saying to log into GitHub  and then you click the button and then  it will authorize you to log into GitHub  and then authenticate you as well  so to do that let's just  first go into our code  and inside of the catch all route  as you can remember and the GitHub  provider we have a client ID and a  client secret that we have not got yet  so to get it we need to go on github.com  so if you go to github.com  obviously if you don't have an account  sign up for an account and if you do log  into your account at the top right  you have a down arrow click settings  inside of the settings we are going to  go all the way to the bottom left to  developer settings  oauth apps  new oauth app  the application name is going to be  next auth  we could do practice  the home page URL is going to be your  localhost 3000 we don't need a  description and the Callback is just  going to be wherever you wanted to call  back we could just do localhost 3000.  okay so we're going to register the  application and it's going to give us a  client ID and then we need to generate a  new client secret so let's just copy  this client ID because we do need it  so we're going to copy it  go inside of our EnV file  I think it was called  GitHub underscore ID cool so we are  going to name a variable called GitHub  underscore ID  and this is going to equal that client  ID  I think the other one is called GitHub  underscore secret and this will be that  secret key  yep secret cool  so now we need to get the secret key  by clicking generate a new client secret  key  we got to confirm our password  and then after you confirm the password  knowing it's you  here's the secret we could copy it  minimize the page paste it here and now  we have the GitHub ID and the secret  cool now we are going to go to the login  page  and we are going to  come all the way down below the sign in  button underneath the form  we are going to just do an H1 it's not  going to look pretty  and we're going to say sine into  git Hub below  then we'll have a buy-in  and then we'll just say sign in  and then let's just style it just real  quick class name BG black  text White  and then we could just do with  we could do with full see how that looks  okay so there's the GitHub sign in  obviously I spell whatever in the H1  wrong  sign in to GitHub and then there's that  now we need to unclick on this button  so the on click we're going to have an  anonymous function  that's pointing  to the sign in function that  allows us to use it inside of next auth  so sign in  and then we are just going to do a  string called GitHub  so this is all you need to do for a  basic understanding of how to sign into  your GitHub account  so after we do that this should work but  let me just restart the development  server just in case  and then we're gonna do npm run Dev  go back and we're going to refresh this  localhost 3000 slash login  after it's refreshed we'll click sign in  and as you can see now it's trying to  authorize this account we will click  authorize B Westwood 11 which is me  and then technically we're signed in we  can expect the page  application we have a session token  and we could just go to the localhost   and then there's the name email and it's  client-side render stuff like that and  that is the email associated with my  GitHub  so now we could check our mongodb  database and since we signed in we  should have an account  so now we have an account  with our GitHub provider as the provider  type is oauth and we have all these  properties too then if you look in the  user  is also in the user as well right here  so like what we did in the Prisma schema  we did a one-to-many relations between  the user and account schema that's why I  said all of the users no matter what  provider they use will be in the  database under the collection user so  that is why this looks like this and  like I said with the no hash password in  the code earlier for the login  um  logic as you see the GitHub provider  doesn't have a hashed password field  so we can't use this email to sign in  with the credentials provider it only  could be signed in with the GitHub  provider  okay now so now let's set up the Google  provider so to set the Google provider  we also need the client ID and client  secret we are going to go to Google and  you're going to search Google Cloud  console click the first link  and then your page to look something  like this you should be logged into your  Google account the top left I mean top  right  we're going to down click this and we're  going to click new project  you can name your project whatever you  want YouTube next auth  um and then just click create  so now it's creating your project we can  select the project  and then we could just go to API and  services  and then after we click API and services  we need the oauth consent screen we need  to create one  so this is like the screen that pops up  when you want to sign in with a specific  Google account it's on a lot of websites  you've probably seen it before  so for this consent screen we have to  we have to actually go to the right one  I don't know why I was on that one so  YouTube Dash next auth make sure you're  in the right project  and then it's going to prompt you to a  few questions on what you should do  so we are going to make sure it's  external so it's available to any test  user with any Google account  we need an app name so we're just going  to YouTube next auth  support email is going to be Auto  populated for you so click that you can  skip all of this and then your developer  contact information you could just do  the same email as well it is required  press save and continue  the Scopes  you could add or remove Scopes you could  click the first three this one this one  and this one click update  then we're going to click save and  continue  you don't need to add any test users so  save and continue  this is just a summary of everything we  did so you're going to go back to the  dashboard after you're back at the  dashboard we are going to create some  credentials so click the credentials tab  make sure you're in the right project  click create credentials now you're  going to click oauth client ID  application type is going to be a web  application  you keep this name as is it's not a big  deal  and authorize redirects we are going to  do  okay so for the  authorize redirect URI we are going to  do http  slash  localhost   slash API  slash auth  slash callback slash Google  and then we're just going to click  create  so now it gives you the client ID and  client secret that we need for our  project  so for this we are just going to copy  the client ID  go back into our vs code  and we're going to make sure it's named  correctly so it's Google ID and Google  Secret  so we're going to have Google underscore  ID  that's what we just copied  and then Google underscore Secret  go back to that oauth consent  this is the client Secret  copy that and paste it and now we have  the keys ready for our Google  authentication okay so now let's create  the buttons so we can actually log into  our Google provider all we needed was ID  and secret which we just got  and I am on the login page on the client  side  and we have the sign in to GitHub below  with the button I am just going to copy  and paste this down  I could just do background of green  instead  say sign into Google below  and then we are just changing the string  on the on a click from GitHub to Google  and we're having this sign in function  from next auth  so we could test this out  we can go back to our localhost 3000  let's go to the application and let's  just log out of all of our stuff by  deleting the cookies  we will go to slash login  nothing wrong in the console  and then it says sign into Google below  did I copy  something's not popping up right let's  check the code again because the button  doesn't look like it's right there  I guess BG green is actually not a  background  so let's try it again BG  red the 500 I know is one  okay  so there's our sign in with Google if we  click that we should be able to sign in  with the Google account  so we click it and as you can see we  sign in with the Google  I could just do this one right here  and now we are technically signed in and  we can inspect the page  look at the application we have three  tokens again  we can go to the localhost 3000  and here is my name Competitive Edge  email competitive.edge.tamp.gmail.com  so we are successfully logged into  Google let's just make sure our mongodb  has that information as well  if we go to account  now we have two accounts we have one  with the provider GitHub and one with  the provider of Google  and then if we look at the users we have  the Competitive Edge in here as well  so everything is working as it should  now you could sign in and register with  authentication with the Google provider  the GitHub provider and the credentials  provider the last thing I want to do is  I want to show you how you can protect a  page if a user is logged in or not  there's multiple ways to protect pages  when it comes to next auth but I am  going to show you just one example of  how you can do it and then you could  pick from the docs of which ones you  want but the code is pretty simple and  straightforward  so if we are on a client-side page you  have to use a client-side method to do  this  so for example if we go to the login  page we are on the login page it is a  use client page  I am going to also import the use effect  because we're going to use that  and I am going to call the use effect  function right above I mean the use  effect hook right above  the login user  so we're going to have a use effect  and this use effect is going to be an  arrow function  and inside of the code block we're going  to say if  the session which is the object we're  getting  Dot data  node.stata is my fault if the session  does status  equals authenticated  then we want to do something which means  we want to actually push the user away  from this page because they're already  logged in and we want to push them to  the dashboard  so there's a few other Imports we're  going to import real quick  first we are going to import  they use router  from next slash navigation not router  another thing we want to import is we  want to import  use session  and we could import it right with the um  sign in function right here  so we need to actually get the session  from the client side  so we could do a cons session  equals use session  and that's going to allow us to get the  session if it isn't and then if the  session status is authenticated we do  want to do a router.push  but we need to actually initialize use  router so cons router  equals use router  and then we're going to say router.push  and then we're going to push it to the  dashboard  that means we are logged in and we don't  need to be on this page anymore  so this is one way to protect a page and  the page we're protecting is the login  page if we are logged in and  authenticated  so let me just  terminate the development server real  quick restart the development server  let me open up a new localhost 3000  we are technically logged in right now  let me inspect it real quick  I could just delete the cookies  refresh the page  all right we're going to go to slash  login  and we can log in with the Tom Gmail  and then we can do a password one two  three four five six seven eight we will  sign in logged in successful  and then it's pushing us to the  dashboard page which I have not created  I thought I did  so we can just create a new folder  called dashboard  and then inside the dashboard we're  going to have a page.jsx  let's name a used client at the top  let's import  use session  and this is going to be from  next odd slash react  then we can just do  a arrow function  remove this  call this dashboard  if I could type  and then right above the return we have  to  create a session variable  using the U session hook  and  what we could do here is we could just  [Music]  say H1  dashboard  and then we could do a P tag and then we  could say hi  and then session Dot  it'll be a question mark dot user Dot  name  or we could just do email  perfect  and this is going to get the session  import session we have the data okay  cool  so now if we go back  to this page  let's try to go back to the login  page is not defined  it says cannot read properties reading  of null reason why is because it is  client-side so it is taking  a few milliseconds to solve so  technically the email is null so I do  have to put a question mark in front of  this as well  and it looks like it's not working  and it's not working it's because we are  not  I see why it's not working  it's because when you do this we are  actually getting the data from the  session  so we have to create this as an object  and we have to write this a session like  this  so let's go back to the code  and now says hi Tom gmail.com  okay so let's redo that whole process  again  and let's actually create the sign out  button as well  so we are going to import sign out from  this next auth  and let's have a button right here  we will say sign out  and this will be an on click  Anonymous function  sign out and we're just gonna  no parameters are gonna be passed in  it's just going to sign out the current  user  okay  so let's go back  click sign out  and now there's no user even if we  refresh it  let's go to the login  and if there is no user we could stand  the login page so we're going to do Tom  gmail.com  one two three four five six seven eight  we're going to sign in  it's going to say we logged in  successfully push us away from that page  and bring us to the dashboard saying hi  Tom gmail.com  we click sign out and now we're not  logged in anymore  even if we go to the low cost 3000 it  will give us nulls  so that is a lot of information I know  to digest especially in one video but  everything will be time stamped it did  take me a while to learn all of this  stuff as well so don't get frustrated if  you're watching this video but if you  like this information to authenticate  users for your application is a very  useful skill to have  so if you did like this video hit that  like button and also subscribe for more  content like this that would help me get  out more content also motivate me as  well  so thank you for everything and also  have a good day</p>\n"},{"title":"Tutorial on getStaticPaths in Nextjs","date":null,"description":"","slug":"tutorial-on-getstaticpaths-in-nextjs","id":"tutorial-on-getstaticpaths-in-nextjs-951607","tags":[{"name":"nextjs","id":"nextjs-380950"}],"content":"<h2>Introduction</h2>\n<p><code>getStaticPaths</code> is a function used in Next.js to pre-generate static pages for dynamic routes. It is used in combination with <code>getStaticProps</code> to statically pre-render pages that use dynamic routes. The function should be exported from the page that uses dynamic routes.</p>\n<h2>When to use getStaticPaths</h2>\n<p>You should use <code>getStaticPaths</code> if:</p>\n<ul>\n<li>You are statically pre-rendering pages that use dynamic routes</li>\n<li>The page must be pre-rendered (for SEO) and be very fast.</li>\n<li>The data can be stored directly and is not client-specific.</li>\n</ul>\n<h2>getStaticPaths function</h2>\n<p>The <code>getStaticPaths</code> function in Next.js is used to pre-generate static pages for dynamic routes. It is during the build process in production, and it will not be called during runtime.</p>\n<p>The function returns an object with two properties:</p>\n<ul>\n<li><code>paths</code> : an array of the dynamic parameters of the pre-generated static pages.</li>\n<li><code>fallback</code> : a variable that controls the action when the user is trying to access a page whose dynamic parameter is not listed in the <code>paths</code> array. It has three values:\n<ul>\n<li><code>false</code>: The default value of the <code>fallback</code> property. If the request of the user is not listed in the <code>paths</code> array, Next.js will return a 404 page as the result.</li>\n<li><code>true</code>: Tells Next.js to generate the static version for the user's request on the fly.</li>\n<li><code>blocking</code> : This is similar to <code>fallback: true</code> in that it does not return a 404 page for paths that have not yet been generated. However, unlike <code>fallback: true</code>, there is no fallback page displayed to users. Instead, Next.js blocks or waits for the page to be generated before displaying anything to the user. Once the page has been generated, it will be cached, and all future visits will receive the generated page.</li>\n</ul>\n</li>\n</ul>\n<p>When using the <code>fallback: 'blocking'</code>, you do not need to check for <code>router.isFallback</code> in your component, as Next.js will wait for the page to be generated before sending a response to the user's browser.</p>\n<h2>Example</h2>\n<p>Here is an example of how to use <code>getStaticPaths</code> with a dynamic route <code>/user/[userId].js</code></p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) {\n\t<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-comment\">// fetch users data</span>\n\n\t<span class=\"hljs-comment\">// Generate the paths</span>\n\t<span class=\"hljs-keyword\">const</span> paths = users.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =></span> ({\n\t\tparams : { userId : user.<span class=\"hljs-property\">id</span> }\n\t}))\n\n\t<span class=\"hljs-keyword\">return</span> {\n\t\tpaths, \n\t\tfallback : <span class=\"hljs-literal\">true</span>\n\t}\n\n}</code></pre>\n<p>Here is an example of how to use <code>getStaticPaths</code> with <code>fallback: 'blocking'</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) {\n\n<span class=\"hljs-keyword\">return</span> {\n\tpaths : [],\n\tfallback : <span class=\"hljs-string\">\"blocking\"</span>\n}\n}</code></pre>\n<h2>Handling Fallback</h2>\n<p>When using <code>fallback</code> set to <code>true</code>, you need to render a fallback component in your page component to avoid errors when trying to access data from props. You can render a fallback like this:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> {useRouter} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/router'</span>\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-title function_\">useRouter</span>()\n<span class=\"hljs-keyword\">if</span> (router.<span class=\"hljs-property\">isFallback</span>) {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n}</code></pre>\n<h2>Conclusion</h2>\n<p><code>getStaticPaths</code> is a powerful function in Nex.js that allows you to pre-generate static pages for dynamic routes. It is used in combination with <code>getStaticProps</code> and is called during the build process. By properly configuring the <code>paths</code> and <code>fallback</code> properties, you can optimize your application's performance and SEO.</p>\n"},{"title":"Using Middleware in Next.js","date":null,"description":"","slug":"using-middleware-in-nextjs","id":"using-middleware-in-nextjs-274047","tags":[{"name":"nextjs","id":"nextjs-583184"}],"content":"<h2>Introduction</h2>\n<p>Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can either modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.</p>\n<p>Middleware runs before cached content and routes are matched.</p>\n<h2>Convention</h2>\n<p>Using the file <code>middleware.js</code> in the root of your project to define Middleware.</p>\n<h2>Example</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">NextResponse</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/server\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">req, res</span>) {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">redirect</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">\"/home\"</span>, request.<span class=\"hljs-property\">url</span> ))\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n\tmatcher : <span class=\"hljs-string\">\"/about/:path\"</span>\n}</code></pre>\n<h2>Matching Paths</h2>\n<p>Middleware will be invoked for <strong>every route in your project</strong>. The following is the execution order:</p>\n<ol>\n<li><code>headers</code> from <code>next.config.js</code></li>\n<li><code>redirects</code> from <code>next.config.js</code></li>\n<li>Middleware (<code>rewrites</code>, <code>redirects</code>, etc.)</li>\n<li><code>beforeFiles</code> (<code>rewrites</code> ) from <code>next.config.js</code></li>\n<li>Filesystem routes (<code>public/</code>, <code>_next/static/</code>, <code>pages/</code>, <code>app/</code>, etc.)</li>\n<li><code>afterFiles</code> (<code>rewrites</code> ) from <code>next.config.js</code></li>\n<li>Dynamic Routes (<code>/blog/[slug]</code>)</li>\n<li><code>fallback</code> (<code>rewrite</code> ) from <code>next.config.js</code></li>\n</ol>\n<p>There are two wats to define which paths Middleware will run on:</p>\n<ol>\n<li>Custom matcher config</li>\n<li>Conditional statements</li>\n</ol>\n<h3>Matcher</h3>\n<p><code>matcher</code> allows you to filter Middleware to run on specific paths.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n\tmatcher : <span class=\"hljs-string\">\"/about/:path\"</span>\n}</code></pre>\n<p>You can match a single path or multiple paths with an array syntax:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">matcher</span>: [<span class=\"hljs-string\">'/about/:path*'</span>, <span class=\"hljs-string\">'/dashboard/:path*'</span>],\n};</code></pre>\n<p>The <code>matcher</code> config allows you full regex so matching like negative lookaheads or character matching is supported. The regex must be enclosed within the parenthesis.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">matcher</span>: [\n    <span class=\"hljs-comment\">/*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */</span>\n    <span class=\"hljs-string\">'/((?!api|_next/static|_next/image|favicon.ico).*)'</span>,\n  ],\n};</code></pre>\n<p>Configured matches:</p>\n<ol>\n<li>MUST start with <code>/</code></li>\n<li>Can include named parameters: <code>/about/:path</code> matches <code>/about/a</code> and <code>/about/b</code> but not <code>/about/a/c</code></li>\n<li>Can have modifiers on named parameters (starting with <code>:</code>): <code>/about/:path*</code> matches <code>/about/a/b/c</code> because <code>*</code> is <em>zero or more</em>. <code>?</code> is <em>zero or one</em> and <code>+</code> <em>one or more</em></li>\n<li>Can use regular expression enclosed in parenthesis: <code>/about/(.*)</code> is the same as <code>/about/:path*</code></li>\n</ol>\n<h3>Conditional Statements</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n  <span class=\"hljs-keyword\">if</span> (request.<span class=\"hljs-property\">nextUrl</span>.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">'/about'</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">rewrite</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">'/about-2'</span>, request.<span class=\"hljs-property\">url</span>));\n  }\n \n  <span class=\"hljs-keyword\">if</span> (request.<span class=\"hljs-property\">nextUrl</span>.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">'/dashboard'</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">rewrite</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">'/dashboard/user'</span>, request.<span class=\"hljs-property\">url</span>));\n  }\n}</code></pre>\n<h3>NextResponse</h3>\n<p>The <code>NextResponse</code> API allows you to:</p>\n<ul>\n<li><code>redirect</code> the incoming request to a different URL</li>\n<li><code>rewrite</code> the response by displaying a given URL</li>\n<li>Set request headers for API Routes, <code>getServerSideProps</code>, and <code>rewrite</code> destinations</li>\n<li>Set response cookies</li>\n<li>Set response headers</li>\n</ul>\n<p>To produce a response from Middleware, you can:</p>\n<ol>\n<li><code>rewrite</code> to a route (<a href=\"https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts\">Page</a> or <a href=\"https://nextjs.org/docs/pages/building-your-application/routing/api-routes\">Edge API Route</a>) that produces a response</li>\n<li>return a <code>NextResponse</code> directly. See <a href=\"https://nextjs.org/docs/pages/building-your-application/routing/middleware#producing-a-response\">Producing a Response</a></li>\n</ol>\n<h2>Using Cookies</h2>\n<p>Cookies are regular headers. On a <code>Request</code>, they are stored in the <code>Cookie</code> header. On a <code>Response</code> they are in the <code>Set-Cookie</code> header. Next.js provides a convenient way to access and manipulate these cookies through the <code>cookies</code> extension on <code>NextRequest</code> and <code>NextResponse</code></p>\n<ol>\n<li>For income requests, <code>cookies</code> comes with the following methods: <code>get</code>, <code>getAll</code>, <code>set</code> , and <code>delete</code> cookies. You can check for existence of a cookie with <code>has</code> or remove all cookies with <code>clear</code></li>\n<li>For outgoing responses, <code>cookies</code> have the following methods: <code>get</code>, <code>getAll</code>, <code>set</code>, and <code>delete</code>.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">NextResponse</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/server\"</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n\t<span class=\"hljs-keyword\">let</span> cookie = request.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"nextjs\"</span>)?.<span class=\"hljs-property\">value</span>\n\t<span class=\"hljs-keyword\">const</span> allCookies = request.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">getAll</span>()\n\trequest.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-string\">\"nextjs\"</span>)\n\trequest.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">\"nextjs\"</span>)\n\n\t<span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">next</span>()\n\tresponse.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">set</span>({\n\t\tname : <span class=\"hljs-string\">\"Vercel\"</span>,\n\t\tvalue : <span class=\"hljs-string\">\"fast\"</span>\n\t})\n\tcookie = response.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"vercel\"</span>)\n\t<span class=\"hljs-keyword\">return</span> response\n}</code></pre>\n<h2>Setting Headers</h2>\n<p>You can set request and response headers using the <code>NextResponse</code> API (setting <em>request</em> headers is available since Next.js v13.0.0).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n  <span class=\"hljs-comment\">// Clone the request headers and set a new header `x-hello-from-middleware1`</span>\n  <span class=\"hljs-keyword\">const</span> requestHeaders = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Headers</span>(request.<span class=\"hljs-property\">headers</span>);\n  requestHeaders.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'x-hello-from-middleware1'</span>, <span class=\"hljs-string\">'hello'</span>);\n \n  <span class=\"hljs-comment\">// You can also set request headers in NextResponse.rewrite</span>\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">next</span>({\n    <span class=\"hljs-attr\">request</span>: {\n      <span class=\"hljs-comment\">// New request headers</span>\n      <span class=\"hljs-attr\">headers</span>: requestHeaders,\n    },\n  });\n \n  <span class=\"hljs-comment\">// Set a new response header `x-hello-from-middleware2`</span>\n  response.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'x-hello-from-middleware2'</span>, <span class=\"hljs-string\">'hello'</span>);\n  <span class=\"hljs-keyword\">return</span> response;\n}</code></pre>\n<h3>Producing a Response</h3>\n<p>You can respond from Middleware directly by returning a <code>Response</code> or <code>NextResponse</code> instance. (This is available since <a href=\"https://nextjs.org/blog/next-13-1#nextjs-advanced-middleware\">Next.js v13.1.0</a>)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n<span class=\"hljs-keyword\">import</span> { isAuthenticated } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lib/auth'</span>;\n \n<span class=\"hljs-comment\">// Limit the middleware to paths starting with `/api/`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">matcher</span>: <span class=\"hljs-string\">'/api/:function*'</span>,\n};\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n  <span class=\"hljs-comment\">// Call our authentication function to check the request</span>\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">isAuthenticated</span>(request)) {\n    <span class=\"hljs-comment\">// Respond with JSON indicating an error message</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NextResponse</span>(\n      <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'authentication failed'</span> }),\n      { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">401</span>, <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">'content-type'</span>: <span class=\"hljs-string\">'application/json'</span> } },\n    );\n  }\n}</code></pre>\n"},{"title":"Getting current working directory in Node.js with process.cwd()","tags":[{"name":"nodejs","id":"nodejs-658264"},{"name":"javascript","id":"javascript-727637"}],"date":"2023-05-31 16:32","description":"process.cwd() is a method in the Node.js process module that returns the current working directory of the Node.js process.","slug":"current-working-directory-in-nodejs-with-processcwd","id":"getting-current-working-directory-in-nodejs-with-processcwd-628874","content":"<h2>process.cwd()</h2>\n<p><code>process.cwd()</code> is a method in the Node.js process module that returns the current working directory of the Node.js process. The method does not take any parameters.</p>\n<p>The difference between <code>process.cwd()</code> and <code>__dirname</code> is that <code>process.cwd()</code> returns the current working directory of the process, while <code>__dirname</code> returns the directory name of the current module or file. <code>__dirname</code> is a property of the module, whereas <code>process.cwd()</code> is a method of the global <code>process</code> object.</p>\n<p>Here are some use cases and examples of how to use <code>process.cwd()</code>:</p>\n<ul>\n<li>To print the current working directory of the Node.js process, you can simply call <code>process.cwd()</code>:</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(process.<span class=\"hljs-title function_\">cwd</span>());</code></pre>\n<ul>\n<li>To change the current working directory of the Node.js process, you can use the <code>process.chdir(directory)</code> method. This method changes the current working directory to <code>directory</code>.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\">process.<span class=\"hljs-title function_\">chdir</span>(<span class=\"hljs-string\">'/tmp'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(process.<span class=\"hljs-title function_\">cwd</span>());</code></pre>\n<ul>\n<li>You can use <code>process.cwd()</code> to create file paths relative to the current working directory of the Node.js process. For example:</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-keyword\">const</span> filePath = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">'data'</span>, <span class=\"hljs-string\">'file.txt'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(filePath);</code></pre>\n<p>This will print the file path <code>/path/to/current/working/directory/data/file.txt</code>.</p>\n<p>Note that <code>process.cwd()</code> returns the current working directory of the Node.js process, which may not necessarily be the same as the directory where the Node.js script is located. To get the directory where the script is located, you can use <code>__dirname</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(__dirname);</code></pre>\n<p>This will print the directory where the script is located.</p>\n<p>Overall, <code>process.cwd()</code> is a useful method for working with file paths and changing the current working directory of the Node.js process.</p>\n<p>Sources:</p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/node-js-process-cwd-method/\">GeeksforGeeks</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname\">Stack Overflow</a></li>\n<li><a href=\"https://blog.logrocket.com/understanding-using-globs-node-js/\">LogRocket</a></li>\n<li><a href=\"https://www.baeldung.com/linux/find-working-directory-of-running-process\">Baeldung</a></li>\n</ul>\n"},{"title":"Reading a file in Nodejs","date":null,"description":"","slug":"reading-a-file-in-nodejs","id":"reading-a-file-in-nodejs-477744","tags":[{"name":"nodejs","id":"nodejs-460035"}],"content":"<h2>Introduction</h2>\n<p>In this tutorial, we will cover reading a file in Node.js using different approaches, including synchronous and asynchronous methods. We will discuss the use of <code>fs</code> module, which is a built-in module for handling file system operations in Node.js.</p>\n<h2>Synchronous Reading</h2>\n<p>The <code>fs.readFileSync</code> function is used for synchronous reading a file. It takes two arguments: the file path and the character encoding. If you do not provide the character encoding, the output will be shown as a buffer. Here is an example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n<span class=\"hljs-keyword\">const</span> textRead = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">\"./text/readFile.txt\"</span>, <span class=\"hljs-string\">'utf-8'</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(textRead)</code></pre>\n<p>In this example, we import the <code>fs</code> module and read a file located in the same directory in the <code>text</code> folder with the name <code>readfile.txt</code>. The <code>readFileSync</code>  returns the content of the file, which we save in the <code>textRead</code> variable and then print to the console.</p>\n<h2>Asynchronous Reading</h2>\n<p>For asynchronous reading, you can use the <code>fs.readFile()</code> method, which takes the file path, encoding, and a callback function that will be called with the file data and (and the error):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\nfs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">\"./text/readfile.txt\"</span>, <span class=\"hljs-string\">\"utf-8\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =></span> {\n\t<span class=\"hljs-keyword\">if</span> (err) {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err)\n\t<span class=\"hljs-keyword\">return</span>\n\t}\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n} )</code></pre>\n<p>In this example, we use the <code>fs.readFile()</code> function to read the same file as before. The callback function is called with the file data and an error object. If there is an error, we log it to the console. Otherwise, we print the file data to the console.</p>\n<h2>Promises</h2>\n<p>For a more modern approach, you can use the promise-based <code>fs.promises.readFile()</code> method or streams to read the file content.  This is especially useful when dealing with large files, as it helps to avoid consuming too much memory and impacting the speed of execution.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>).<span class=\"hljs-property\">promises</span>\nfs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">\"./text/readfile.txt\"</span>, <span class=\"hljs-string\">'utf-8'</span>)\n.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n})\n.<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err)\n})</code></pre>\n<p>In this example, we use the <code>fs.promises.readFile()</code> method to read the file asynchronously. The function returns a promise that resolves with the file data. We use the <code>then()</code> method to handle the resolved promise and print the file data to the console. If there is an error, we handle it using the <code>catch()</code> method.</p>\n<h2>Conclusion</h2>\n<p>To sum up, you can read a file in Node.js using different  approaches like synchronous (<code>fs.readFileSync()</code>), asynchronous (<code>fs.readFile()</code>) , promise-based (f<code>fs.promises.readFile()</code>), and streams. Each approach has its own pros and cons, so choose the one that fits your specific use case.</p>\n"},{"title":"Overview of Cloud Service Models","date":null,"description":"","slug":"overview-of-cloud-service-models","id":"overview-of-cloud-service-models-212584","tags":[],"content":"<p>In our introductory cloud video we briefly talked about the three service models available on the cloud:</p>\n<ul>\n<li>Infrastructure as a Service</li>\n<li>Platform as a Service</li>\n<li>Software as a Service</li>\n</ul>\n<p>Before we dive into the details of each of these service models in the subsequent videos, let's get started with a quick overview of these models.</p>\n<p>Hi, I'm Tessa Rhodes, and I'm a designer on IBM Cloud. So let's start with the foundation here with IaaS.</p>\n<h2>IaaS</h2>\n<p>IaaS is a set of compute networking and storage resources that have been virtualized by a vendor so that a user can access and configure them any way they want. In design we have a concept of talking about users, called personas, and the persona for IaaS is a system admin, or an IT admin.</p>\n<h2>SaaS</h2>\n<p>Let's jump up to the top with Software as a Service that's the easy one. Software as a Service is just software that you don't have to install on your machine and you don't have to manually update. </p>\n<p>And so the user for Software as a Service could be anyone. In fact, if you're watching this on YouTube right now, then you're a user of Software as a Service. </p>\n<p>It's usually charged on a subscription model rather than a one-time license fee. </p>\n<h2>PaaS</h2>\n<p>And that brings us to Platform as a Service. PaaS takes advantage of all the virtualized resources from Iaas and then just abstracts them away, so the user doesn't have to worry about managing any of those virtualized resources. The user for PaaS is not a system admin, usually. It's usually a dev. </p>\n<h2>Metaphor</h2>\n<p>Another metaphor I use when I'm talking to the designers on my team about PaaS, is having to do with a car. So in this metaphor IaaS is like leasing a car. So if you've ever leased a car, you probably did a lot of research, and you care about the specs of the car and their performance. You care about the color of the car, what kind of car it is. You're the one driving and you're the one paying \nfor it. You're also paying for the gas and any tolls or maintenance.</p>\n<p>With Platform as a Service in this metaphor, that's more like renting a car. So say you're on vacation and you just got off at the air Airport and you're going to pick up your rental car. You don't really care what color it is. You don't even care about the specs of it, but you're still driving and you're paying for the gas and any tolls you go through.</p>\n<p>Software as a Service is again the easiest one. That one's more like getting a taxi or an uber. So with the taxi or an uber, you don't care at all about what kind of car it is, what color it is and in fact, you're not even the one driving, or paying for gas, or any tolls because that's baked into the price.</p>\n<h2>Overview</h2>\n<p>So let's see what it means in terms of cloud computing and its three service models. With IaaS, the cloud provider manages the physical resources, data centers, cooling power, Network and security, as well as computing resources that include servers and storage.</p>\n<p>With PaaS, the provider, in addition to the computing resources, also manages the platform infrastructure which includes the operating systems, development tools, databases, and business \nanalytics.</p>\n<p>In the SaaS model, in addition to the infrastructure and the platform resources, the provider also hosts and manages the applications and data. </p>\n"},{"title":"In low light conditions, should I change ISO, Shutter Speed or Aperture to have better exposure","date":null,"description":"","slug":"in-low-light-conditions-should-i-change-iso-shutter-speed-or-aperture-to-have-better-exposure","id":"in-low-light-conditions-should-i-change-iso-shutter-speed-or-aperture-to-have-better-exposure-882424","tags":[{"name":"photography","id":"photography-423934"}],"content":"<p>In low light conditions, achieving proper exposure can be challenging. To compensate for the lack of light, you have a few options to adjust the camera settings:</p>\n<ol>\n<li>\n<p>Increase ISO: Increasing the ISO sensitivity allows the camera's sensor to become more responsive to light, resulting in a brighter exposure. You can raise the ISO to a higher value, such as ISO 800, 1600, or even higher, depending on your camera's capabilities and the level of available light. However, keep in mind that higher ISO settings may introduce more digital noise into the image, which can affect image quality.</p>\n</li>\n<li>\n<p>Decrease Shutter Speed: Slowing down the shutter speed allows more time for light to reach the sensor, thus brightening the exposure. However, using slower shutter speeds can lead to motion blur if there is any camera shake or subject movement. To avoid this, it's important to stabilize the camera using a tripod, leaning against a stable surface, or employing image stabilization techniques. Use slower shutter speeds cautiously, and be mindful of the potential for blur.</p>\n</li>\n<li>\n<p>Widen Aperture: Opening up the aperture (using a smaller f-number) allows more light to enter the camera, resulting in a brighter exposure. This is especially effective when using lenses with wider maximum apertures, such as f/1.8 or f/2.8. However, keep in mind that widening the aperture also affects the depth of field, resulting in a shallower focus area. Make sure to adjust the focus carefully to maintain sharpness on the subject's important features.</p>\n</li>\n</ol>\n<p>When dealing with low light conditions, it's often a combination of these adjustments that helps achieve the desired exposure. Start by increasing the ISO to a reasonable level, then adjust the aperture and shutter speed as needed. Consider the following tips:</p>\n<ul>\n<li>Begin with a wider aperture (smaller f-number) to allow more light, but be mindful of the depth of field.</li>\n<li>Use the slowest shutter speed that allows for a sharp image, considering both camera stability and subject movement.</li>\n<li>Increase the ISO gradually until you reach an acceptable exposure while balancing it with the desired image quality and noise levels.</li>\n</ul>\n<p>Additionally, utilizing external lighting sources, such as a flash, continuous lighting, or reflectors, can significantly improve the lighting conditions and exposure in low light situations.</p>\n<p>Experiment with different combinations of ISO, shutter speed, and aperture settings, and review your results to find the optimal balance of exposure and image quality for your specific low light conditions.</p>\n"},{"title":"Photography Books for Beginners","date":null,"description":"","slug":"photography-books-for-beginners","id":"photography-books-for-beginners-531462","tags":[{"name":"photography","id":"photography-491480"}],"content":"<p>Certainly! Here are some highly regarded books on photography that are great for beginners:</p>\n<ol>\n<li>\n<p>\"Understanding Exposure\" by Bryan Peterson: This book is often recommended as a starting point for learning about exposure, one of the fundamental aspects of photography. It covers the concepts of aperture, shutter speed, and ISO, and how they work together to create properly exposed images.</p>\n</li>\n<li>\n<p>\"Read This If You Want to Take Great Photographs\" by Henry Carroll: This book provides practical tips and advice in an accessible manner. It covers a range of topics such as composition, lighting, and editing, making it a comprehensive introduction to photography.</p>\n</li>\n<li>\n<p>\"The Photographer's Eye: Composition and Design for Better Digital Photos\" by Michael Freeman: This book focuses on the art of composition and how to create visually compelling photographs. It explores various compositional techniques and guides readers on how to train their eyes to see potential photographic opportunities.</p>\n</li>\n<li>\n<p>\"National Geographic: The Ultimate Field Guide to Photography\" by Bob Martin: This guide is filled with stunning photographs and offers valuable insights into the techniques used by professional photographers. It covers a wide range of topics, including camera settings, lighting, and storytelling through images.</p>\n</li>\n<li>\n<p>\"Digital Photography Complete Course\" by DK: This book provides a comprehensive introduction to digital photography. It covers essential topics such as camera controls, exposure, composition, and post-processing techniques. It also includes practical exercises and assignments to reinforce learning.</p>\n</li>\n<li>\n<p>\"Understanding Digital Photography: Techniques for Getting Great Pictures\" by Bryan Peterson: Another popular book by Bryan Peterson, this one focuses on the technical aspects of digital photography. It explains topics like histograms, white balance, and autofocus, helping beginners understand and utilize their camera's features effectively.</p>\n</li>\n</ol>\n<p>Remember, while books can provide valuable knowledge and guidance, practice is key to improving your photography skills. So, don't forget to grab your camera and apply what you learn through hands-on experience. Happy shooting!</p>\n"},{"title":"What are the ideal ISO settings under different conditions","date":null,"description":"","slug":"what-are-the-ideal-iso-settings-under-different-conditions","id":"what-are-the-ideal-iso-settings-under-different-conditions-116171","tags":[{"name":"photography","id":"photography-575274"}],"content":"<p>The ideal ISO settings can vary depending on the specific conditions you are shooting in. Here are some general guidelines for different scenarios:</p>\n<ol>\n<li>\n<p>Bright Outdoor Daylight: In well-lit outdoor conditions with ample sunlight, you can typically use a low ISO setting such as ISO 100 or 200. These settings will help maintain excellent image quality with minimal noise.</p>\n</li>\n<li>\n<p>Cloudy or Overcast Day: When shooting on a cloudy or overcast day, the light is not as bright as in direct sunlight. In such situations, you might need to increase the ISO slightly to maintain a faster shutter speed or smaller aperture. ISO 400 or 800 should be a good starting point, but you can adjust it based on the available light and desired exposure.</p>\n</li>\n<li>\n<p>Indoor and Low-Light Environments: Indoor settings or situations with limited lighting require higher ISO settings to compensate for the lack of light. Start with ISO 800 and increase it as needed to achieve proper exposure. Modern cameras are capable of producing acceptable image quality even at higher ISO values, so don't hesitate to push the ISO higher if necessary.</p>\n</li>\n<li>\n<p>Nighttime and Astrophotography: Nighttime photography, including astrophotography, often demands even higher ISO settings due to the extremely low light conditions. ISO values of 1600 or higher may be necessary to capture the desired exposure. Just keep in mind that as the ISO increases, the potential for noise also increases. Experimentation and post-processing techniques can help mitigate noise in these situations.</p>\n</li>\n<li>\n<p>Flash Photography: When using a flash, you can generally use a lower ISO setting since the flash provides additional light to the scene. ISO 100 or 200 is commonly used in combination with a flash to ensure good image quality and reduce noise.</p>\n</li>\n</ol>\n<p>Remember, these are general guidelines, and you should adjust the ISO setting based on the specific lighting conditions, desired exposure, and the capabilities of your camera. It's always a good idea to experiment with different ISO settings in different situations to find the ideal balance between exposure, image quality, and noise.</p>\n"},{"title":"What are the ideal shutter speeds for different scenarios","date":null,"description":"","slug":"what-are-the-ideal-shutter-speeds-for-different-scenarios","id":"what-are-the-ideal-shutter-speeds-for-different-scenarios-164076","tags":[{"name":"photography","id":"photography-993465"}],"content":"<p>The ideal shutter speed for different scenarios can vary depending on several factors, including the lighting conditions, the subject you're photographing, and the effect you want to achieve. Here are some general guidelines to consider:</p>\n<ol>\n<li>\n<p>Portraits: For capturing portraits of stationary subjects, a typical shutter speed range is around 1/125 to 1/250. This allows you to freeze any slight movements and ensure sharpness in the image.</p>\n</li>\n<li>\n<p>Landscapes: When photographing landscapes, you'll often want to use a smaller aperture to achieve a larger depth of field and ensure that the entire scene is in focus. As a result, you might need to use a slower shutter speed to compensate for the reduced amount of light. Tripods are commonly used to keep the camera steady during longer exposures, so the ideal shutter speed can vary from a few seconds to several minutes.</p>\n</li>\n<li>\n<p>Action and Sports: To freeze fast-moving subjects and capture sharp action shots, you'll need a faster shutter speed. The exact speed will depend on the speed of the subject, but a range of 1/500 to 1/1000 or even higher is often used in sports photography. However, keep in mind that in low-light situations, you may need to compromise on the shutter speed to maintain proper exposure.</p>\n</li>\n<li>\n<p>Low Light and Night Photography: In situations with limited light, such as indoor settings or nighttime scenes, you'll need to use a slower shutter speed to allow more light into the camera. This can range from a fraction of a second to several seconds or even longer, depending on the available light and desired effect. To avoid camera shake during long exposures, a tripod or other stabilization methods are essential.</p>\n</li>\n<li>\n<p>Creative Motion Blur: If you want to capture intentional motion blur, such as the smooth flow of water or light trails from moving cars, you'll need to use slower shutter speeds. The specific shutter speed will depend on the speed of the moving subject and the desired effect. Experimentation is key to achieve the desired level of blur and artistic result.</p>\n</li>\n</ol>\n<p>Remember, these are general guidelines, and you may need to adjust the shutter speed based on the specific conditions and creative choices. Practice and experimentation will help you understand how different shutter speeds affect your images in various scenarios.</p>\n"},{"title":"What are the ideal values of the aperture in different conditions","date":null,"description":"","slug":"what-are-the-ideal-values-of-the-aperture-in-different-conditions","id":"what-are-the-ideal-values-of-the-aperture-in-different-conditions-297003","tags":[{"name":"photography","id":"photography-705398"}],"content":"<p>The ideal values of the aperture, represented by the f-number or f-stop, can vary depending on the specific conditions and the creative effect you want to achieve. Here are some general guidelines for different scenarios:</p>\n<ol>\n<li>\n<p>Portraits: For portraits with a shallow depth of field and a pleasing background blur, a wider aperture is typically used. This can be around the range of f/1.8 to f/4, depending on the lens and desired effect. Wider apertures create a shallow depth of field, isolating the subject from the background and creating a visually appealing bokeh.</p>\n</li>\n<li>\n<p>Landscapes: Landscape photography often benefits from a greater depth of field to keep the entire scene in sharp focus. Narrower apertures, such as f/8 to f/16 or even smaller, are commonly used. This allows for more of the foreground to background to be in focus, capturing the details of the landscape.</p>\n</li>\n<li>\n<p>Street Photography and General Use: In many everyday situations, a versatile aperture range is preferred. Apertures around f/5.6 to f/8 are often considered a sweet spot for achieving a balance between depth of field and overall sharpness. This range allows for a good amount of the scene to be in focus while providing reasonable background separation.</p>\n</li>\n<li>\n<p>Low Light Conditions: In low-light situations, wider apertures (smaller f-numbers) are helpful to allow more light into the camera. Depending on the available light and desired exposure, apertures such as f/2.8 to f/4 may be used to maintain a faster shutter speed and reduce the need for high ISO settings.</p>\n</li>\n<li>\n<p>Creative Effects: Keep in mind that the specific values of the ideal aperture can also vary based on your creative intent. For example, if you want an extremely shallow depth of field with a strong background blur, you might choose an even wider aperture like f/1.4 or f/1.2. Conversely, if you want a vast depth of field, you might opt for narrower apertures like f/16 or beyond.</p>\n</li>\n</ol>\n<p>Remember, these are general guidelines, and the ideal aperture value can depend on various factors, including the lens you're using, the desired depth of field, available light, and personal preference. Exploring different aperture settings and their effects in different shooting scenarios will help you develop your own style and achieve the desired results in your photography.</p>\n"},{"title":"What is a shutter speed","date":null,"description":"","slug":"what-is-a-shutter-speed","id":"what-is-a-shutter-speed-721928","tags":[{"name":"photography","id":"photography-259095"}],"content":"<p>As a professional photographer, I can certainly help you understand the basics of a camera and photography. I understand my role and will do my best to provide you with the information you need.</p>\n<p>Shutter speed is one of the three key elements of exposure in photography, along with aperture and ISO. It refers to the length of time the camera's shutter remains open when capturing a photograph. Shutter speed is typically measured in fractions of a second, such as 1/1000, 1/250, 1/60, and so on.</p>\n<p>Shutter speed plays a crucial role in determining the amount of light that reaches the camera's sensor, as well as the way movement is captured in a photo. Here are a few key points to understand about shutter speed and its effects:</p>\n<ol>\n<li>\n<p>Exposure: Shutter speed directly affects the overall brightness of an image. A faster shutter speed (e.g., 1/1000) lets in less light, resulting in a darker image, while a slower shutter speed (e.g., 1/30) allows more light, resulting in a brighter image. Adjusting the shutter speed allows you to control the exposure according to the available light.</p>\n</li>\n<li>\n<p>Motion freeze or motion blur: Shutter speed also determines how movement is captured in a photo. A faster shutter speed freezes motion, making moving subjects appear sharper. This is useful for capturing fast action, sports, or wildlife. On the other hand, a slower shutter speed creates motion blur, which can be used creatively to convey a sense of motion or capture long exposures of flowing water or light trails.</p>\n</li>\n<li>\n<p>Handheld vs. tripod: The chosen shutter speed is influenced by whether you're shooting handheld or using a tripod. Slower shutter speeds require more stability to avoid camera shake, which can result in blurry images. If shooting handheld, it's generally recommended to use a faster shutter speed or image stabilization techniques to minimize blur.</p>\n</li>\n<li>\n<p>Low light situations: In low light conditions, using a slower shutter speed may be necessary to allow more light into the camera. However, this can also lead to increased camera shake and blur. In such situations, you can compensate by using a wider aperture (smaller f-number) or a higher ISO sensitivity.</p>\n</li>\n</ol>\n<p>Understanding how shutter speed affects your photos will allow you to make deliberate creative choices and capture the desired effects. Experimenting with different shutter speeds in various situations will help you gain a better understanding of their impact.</p>\n"},{"title":"What is aperture and its affect on the photo","date":null,"description":"","slug":"what-is-aperture-and-its-affect-on-the-photo","id":"what-is-aperture-and-its-affect-on-the-photo-720614","tags":[{"name":"photography","id":"photography-875360"}],"content":"<p>Aperture refers to the opening of the lens that controls the amount of light entering the camera. It is represented by the f-number or f-stop, such as f/2.8, f/5.6, f/11, etc. Understanding aperture and its effect on a photo is essential for controlling depth of field and exposure. Here's how aperture influences your images:</p>\n<ol>\n<li>\n<p>Depth of Field: Aperture plays a significant role in determining the depth of field (DOF), which is the range of sharpness in a photograph. A wide aperture (smaller f-number, e.g., f/1.8) creates a shallow DOF, where the subject is in sharp focus while the background appears blurred. This is commonly used in portraits or when you want to isolate the subject from the surroundings. On the other hand, a narrow aperture (larger f-number, e.g., f/16) produces a greater DOF, resulting in more of the scene being in focus. This is useful for landscape photography or when you want to capture a scene with maximum sharpness from the foreground to the background.</p>\n</li>\n<li>\n<p>Exposure: Aperture is one of the three components of exposure, along with shutter speed and ISO. It controls the amount of light reaching the camera sensor. A wider aperture (larger lens opening) allows more light to enter, suitable for low-light situations or when you need a faster shutter speed. A narrower aperture (smaller lens opening) restricts the amount of light, which is useful in well-lit conditions or when you want a slower shutter speed for creative purposes.</p>\n</li>\n<li>\n<p>Lens Performance: Aperture can affect the overall optical performance of a lens. While lenses typically perform well in the mid-range of their aperture settings (around f/8 to f/11), they may exhibit certain optical issues at the extreme ends. Wide open apertures (e.g., f/1.4) might result in some softness or chromatic aberrations, while very narrow apertures (e.g., f/22) can introduce diffraction, reducing overall image sharpness. It's generally recommended to avoid using the extreme ends of the aperture range unless necessary.</p>\n</li>\n<li>\n<p>Bokeh: Bokeh refers to the aesthetic quality of the out-of-focus areas in an image. The aperture shape and size influence the characteristics of the bokeh. With a wider aperture (smaller f-number), you can achieve a shallower DOF and a more pronounced and creamy bokeh, creating a pleasing background blur that helps separate the subject. This effect is particularly desirable in portrait or close-up photography.</p>\n</li>\n</ol>\n<p>Understanding aperture and its effects allows you to have greater control over depth of field, exposure, and the overall visual impact of your images. By experimenting with different aperture settings in various shooting scenarios, you can explore creative possibilities and achieve the desired results.</p>\n"},{"title":"What is ISO and  its affect on the photo","date":null,"description":"","slug":"what-is-iso-and-its-affect-on-the-photo","id":"what-is-iso-and-its-affect-on-the-photo-577616","tags":[{"name":"photography","id":"photography-834757"}],"content":"<p>ISO refers to the sensitivity of the camera's image sensor to light. It stands for International Organization for Standardization, which sets the standards for sensitivity ratings in photography. Understanding ISO and its effect on a photo is crucial for achieving proper exposure and managing image quality.</p>\n<p>Here are the key points about ISO and its impact:</p>\n<ol>\n<li>\n<p>Sensitivity to light: ISO determines how sensitive the camera's sensor is to light. A higher ISO setting makes the sensor more sensitive, allowing it to capture images in low-light conditions or situations where a faster shutter speed is needed. A lower ISO setting makes the sensor less sensitive, suitable for well-lit environments.</p>\n</li>\n<li>\n<p>Exposure adjustments: ISO is one of the three components of exposure, alongside aperture and shutter speed. Increasing the ISO allows you to compensate for low light by brightening the image. This is particularly useful when you want to maintain a faster shutter speed or a smaller aperture for depth of field control. Conversely, decreasing the ISO is helpful in brightly lit conditions to avoid overexposure.</p>\n</li>\n<li>\n<p>Image quality and noise: Higher ISO settings can introduce digital noise or graininess into the image, resulting in a loss of image quality. Noise appears as random specks or color artifacts, especially in darker areas of the photo. The degree of noise depends on the camera model and its sensor's capabilities. Modern cameras generally handle high ISO settings better than older models, producing cleaner images with less noise.</p>\n</li>\n<li>\n<p>Finding the optimal ISO: The optimal ISO setting depends on the available light and the desired image quality. Whenever possible, it's recommended to use the lowest ISO setting (e.g., ISO 100 or 200) to achieve the best image quality with minimal noise. However, in low-light situations where a faster shutter speed or larger depth of field is necessary, increasing the ISO is a trade-off to ensure a properly exposed image.</p>\n</li>\n<li>\n<p>ISO in post-processing: It's important to note that increasing the ISO in post-processing software does not improve image quality or reduce noise. The ISO setting determines how the sensor captures light at the time of exposure, and changing it afterwards only amplifies the existing data, including noise.</p>\n</li>\n</ol>\n<p>By understanding ISO and its effects, you can adjust this setting according to the lighting conditions, desired exposure, and acceptable levels of noise in your photographs. It's recommended to experiment with different ISO settings to determine the optimal balance between exposure and image quality for each shooting situation.</p>\n"},{"title":"How to create custom hooks in react","date":null,"description":"","slug":"how-to-create-custom-hooks-in-react","id":"how-to-create-custom-hooks-in-react-12544","tags":[{"name":"react-hooks","id":"react-hooks-455040"}],"content":"<h2>Demo Article</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n"},{"title":"Bindings in Svelte","date":null,"description":"","slug":"bindings-in-svelte","id":"bindings-in-svelte-519329","tags":[{"name":"svelte","id":"svelte-394225"}],"content":"<h2>Text Inputs</h2>\n<p>As a general rule, data flow in svelte is <em>top down</em> - a parent component can set props on a child component, and a component can set attributes  on an element, but not the other way around.</p>\n<p>Sometimes it is useful to break that rule.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'world'</span>;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span>></span>\n   \n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello {name}!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<p>Take the case of the <code>&#x3C;input></code> element in the component - we could add an <code>on:input</code> event handler that sets the value of <code>name</code> to <code>event.target.value</code>, but it is a bit... biolerplatey. It gets even worse with other form elements.</p>\n<p>Instead, we can use the <code>bind:value</code> directive:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{name}</span>></span></code></pre>\n<p>This means that not only will changes to the value of <code>name</code> update the input value, but changes to the input value will update <code>name</code>.</p>\n<p>However, <code>bind:value</code> directive only updates the variable when the input element loses focus, so the <code>on:input</code> listener ensures that changes to the input element are immediately reflected in the variable.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">on:input</span>=<span class=\"hljs-string\">{handleChange}</span> ></span></code></pre>\n<p><code>bind:value</code> is a powerful feature of Svelte that makes it easy to create two-way data bindings between variables and input elements, allowing for dyanamic and reactive user interfaces.</p>\n<h2>Numeric Inputs</h2>\n<p>In the DOM, everything is a string. That's unhelpful when you are dealing with numeric inputs - <code>type=\"number\"</code> and <code>type=\"range\"</code> - as it means you have to remember to coerce <code>input.value</code> before using it.</p>\n<p>With <code>bind:value</code>, Svelte takes care of it for you:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">number</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{a}</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">0</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">10</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">range</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{a}</span> <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">0</span> <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">10</span>></span></code></pre>\n<h2>Checkbox inputs</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> yes = <span class=\"hljs-literal\">false</span>;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">checkbox</span> <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{yes}</span>></span>\n\tYes! Send me regular email spam\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n{#if yes}\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Thank you. We will bombard your inbox and sell your personal details.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n{:else}\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>You must opt-in to continue. If you're not paying, you're the product.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n{/if}\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{!yes}</span>></span>\n\tSubscribe\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></code></pre>\n<p>Checkboxes are used for toggling between states. Instead of binding to <code>input:value</code>, we bind to <code>input:checked</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">checkbox</span> <span class=\"hljs-attr\">bind:checked</span>=<span class=\"hljs-string\">{yes}</span>></span></code></pre>\n<h2>Group Inputs</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> scoops = <span class=\"hljs-number\">1</span>;\n\t<span class=\"hljs-keyword\">let</span> flavours = [<span class=\"hljs-string\">'Mint choc chip'</span>];\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Size<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">radio</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">{scoops}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"scoops\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{1}</span>></span>\n\tOne scoop\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">radio</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">{scoops}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"scoops\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{2}</span>></span>\n\tTwo scoops\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">radio</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">{scoops}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"scoops\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{3}</span>></span>\n\tThree scoops\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Flavours<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">checkbox</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">{flavours}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"flavours\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Cookies and cream\"</span>></span>\n\tCookies and cream\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">checkbox</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">{flavours}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"flavours\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Mint choc chip\"</span>></span>\n\tMint choc chip\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">checkbox</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">{flavours}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"flavours\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Raspberry ripple\"</span>></span>\n\tRaspberry ripple\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\n</code></pre>\n<p>If you have multiple inputs relating to the same value, you can use <code>bind:group</code> along with the <code>value</code> attribute. Radio inputs in the same group are mutually exclusive; checkbox inputs in the same group form an array of selected values.</p>\n<p>Add <code>bind:group</code> to each input:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">radio</span> <span class=\"hljs-attr\">bind:group</span>=<span class=\"hljs-string\">{scoops}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"scoops\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{1}</span>></span></code></pre>\n<p>In this case, we could make the code simpler by moving the checkbox inputs into an <code>each</code> block. First, add a <code>menu</code> variable to the <code>&#x3C;script></code> block...</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> menu = [\n\t<span class=\"hljs-string\">'Cookies and cream'</span>,\n\t<span class=\"hljs-string\">'Mint choc chip'</span>,\n\t<span class=\"hljs-string\">'Raspberry ripple'</span>\n];</code></pre>\n<p>...then replace the second section:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Flavours<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n\n{#each menu as flavour}\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">checkbox</span> <span class=\"hljs-attr\">bind:group</span>=<span class=\"hljs-string\">{flavours}</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"flavours\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{flavour}</span>></span>\n\t\t{flavour}\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n{/each}</code></pre>\n<p>It is now easy to expand our icecream menu in new and exciting directions.</p>\n<h2>Textarea Inputs</h2>\n<p>The <code>&#x3C;textarea></code> element behaves similarly to a text input in Svelte - use <code>bind:value</code> to create a two-way binding between the <code>&#x3C;textarea></code> content and the <code>value</code> varaible:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{value}</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">textarea</span>></span></code></pre>\n<p>In cases like these, where the names match, we can also use a shorthand form:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">bind:value</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">textarea</span>></span></code></pre>\n<p>This applies to all bindings, not just textareas.</p>\n<h2>Select Bindings</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> questions = [\n\t\t{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">`Where did you go to school?`</span> },\n\t\t{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">`What is your mother's name?`</span> },\n\t\t{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">`What is another personal fact that an attacker could easily find with Google?`</span> }\n\t];\n\t<span class=\"hljs-keyword\">let</span> selected;\n\t<span class=\"hljs-keyword\">let</span> answer = <span class=\"hljs-string\">''</span>;\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleSubmit</span>(<span class=\"hljs-params\"></span>) {}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Insecurity questions<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">on:submit</span>|<span class=\"hljs-attr\">preventDefault</span>=<span class=\"hljs-string\">{handleSubmit}</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selected}</span> <span class=\"hljs-attr\">on:change</span>=<span class=\"hljs-string\">\"{() => answer = ''}\"</span>></span>\n\t\t{#each questions as question}\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{question}</span>></span>\n\t\t\t\t{question.text}\n\t\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span>\n\t\t{/each}\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">select</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{answer}</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{!answer}</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">submit</span>></span>\n\t\tSubmit\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>selected question {selected ? selected.id : '[waiting...]'}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p>We can also use <code>bind:value</code> with <code>&#x3C;select></code> elements.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{selected}</span> <span class=\"hljs-attr\">on:change</span>=<span class=\"hljs-string\">\"{() => answer = ''}\"</span>></span></code></pre>\n<p>Note that <code>&#x3C;option></code> values are objects rather than strings. Svelte does not mind.</p>\n<blockquote>\n<p>Because we haven't set an initial value of <code>selected</code>, the binding will set it to the default value (the first in the list) automatically. Be careful though — until the binding is initialised, <code>selected</code> remains undefined, so we can't blindly reference e.g. <code>selected.id</code> in the template. If your use case allows it, you could also set an initial value to bypass this problem.</p>\n</blockquote>\n<h2>Select Multiple</h2>\n<p>A select can have a <code>multiple</code> attribute, in which case it will populate an array rather than selecting a single value.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>Flavours<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">multiple</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{flavours}</span>></span>\n\t{#each menu as flavour}\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{flavour}</span>></span>\n\t\t\t{flavour}\n\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">option</span>></span>\n\t{/each}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">select</span>></span></code></pre>\n<h2>Contenteditable bindings</h2>\n<p>Elements with <code>contenteditable=true</code> attribute support <code>textContent</code> and <code>innerHTML</code> bindings:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n\t<span class=\"hljs-attr\">contenteditable</span>=<span class=\"hljs-string\">\"true\"</span>\n\t<span class=\"hljs-attr\">bind:innerHTML</span>=<span class=\"hljs-string\">{html}</span>\n\t<span class=\"hljs-attr\">bind:textContent</span>=<span class=\"hljs-string\">{text}</span>\n></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<h2>Each block bindings</h2>\n<p>You can even bind to properties inside an <code>each</code> block.</p>\n<pre><code class=\"hljs language-html\">{#each todos as todo}\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class:done</span>=<span class=\"hljs-string\">{todo.done}</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n\t\t\t<span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">checkbox</span>\n\t\t\t<span class=\"hljs-attr\">bind:checked</span>=<span class=\"hljs-string\">{todo.done}</span>\n\t\t></span>\n\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n\t\t\t<span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"What needs to be done?\"</span>\n\t\t\t<span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{todo.text}</span>\n\t\t></span>\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n{/each}</code></pre>\n<blockquote>\n<p>Note that interacting with these <code>&#x3C;input></code> elements will mutate the array. If you prefer to work with immutable data, you should avoid these bindings and use event handlers instead.</p>\n</blockquote>\n<h2>Media elements</h2>\n<p>The <code>&#x3C;audio></code> and <code>&#x3C;video></code> elments have several properties that you can bind to.</p>\n<pre><code>&#x3C;video\n\tposter=\"https://sveltejs.github.io/assets/caminandes-llamigos.jpg\"\n\tsrc=\"https://sveltejs.github.io/assets/caminandes-llamigos.mp4\"\n\ton:mousemove={handleMove}\n\ton:touchmove|preventDefault={handleMove}\n\ton:mousedown={handleMousedown}\n\ton:mouseup={handleMouseup}\n\tbind:currentTime={time}\n\tbind:duration\n\tbind:paused>\n\t&#x3C;track kind=\"captions\">\n&#x3C;/video>\n</code></pre>\n<blockquote>\n<p>Ordinarily on the web, you would track <code>currentTime</code> by listening for <code>timeupdate</code> events. But these events fire too infrequently, resulting in choppy UI. Svelte does better — it checks <code>currentTime</code> using <code>requestAnimationFrame</code></p>\n</blockquote>\n<p>The complete set of bindings for <code>&#x3C;audio></code> and <code>&#x3C;video></code> is as follows — six <em>readonly</em> bindings...</p>\n<ul>\n<li><code>duration</code> (readonly) — the total duration of the video, in seconds</li>\n<li><code>buffered</code> (readonly) — an array of <code>{start, end}</code> objects</li>\n<li><code>seekable</code> (readonly) — ditto</li>\n<li><code>played</code> (readonly) — ditto</li>\n<li><code>seeking</code> (readonly) — boolean</li>\n<li><code>ended</code> (readonly) — boolean</li>\n</ul>\n<p>...and five <em>two-way</em> bindings:</p>\n<ul>\n<li><code>currentTime</code> — the current point in the video, in seconds</li>\n<li><code>playbackRate</code> — how fast to play the video, where <code>1</code> is 'normal'</li>\n<li><code>paused</code> — this one should be self-explanatory</li>\n<li><code>volume</code> — a value between 0 and 1</li>\n<li><code>muted</code> — a boolean value where true is muted</li>\n</ul>\n<p>Videos additionally have readonly <code>videoWidth</code> and <code>videoHeight</code> bindings.</p>\n<h2>Dimensions</h2>\n<p>Every block-level element has <code>clientWidth</code>, <code>clientHeight</code>, <code>offsetWidth</code>, and <code>offsetHeight</code> bindings:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">bind:clientWidth</span>=<span class=\"hljs-string\">{w}</span> <span class=\"hljs-attr\">bind:clientHeight</span>=<span class=\"hljs-string\">{h}</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"font-size: {size}px\"</span>></span>{text}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<p>These bindings are readonly — changing the values of <code>w</code> and <code>h</code> won't have any effect.</p>\n<h2>This</h2>\n<p>The readonly <code>this</code> binding applies to every element (and component) and allows you to obtain a reference to rendered elements. For example, we can get a reference to a <code>&#x3C;canvas></code> element:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">canvas</span>\n\t<span class=\"hljs-attr\">bind:this</span>=<span class=\"hljs-string\">{canvas}</span>\n\t<span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{32}</span>\n\t<span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{32}</span>\n></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">canvas</span>></span></code></pre>\n<p>Note that the value of <code>canvas</code> will be <code>undefined</code> until the component has mounted, so we must put the logic inside the <code>onMount</code> lifecycle function.</p>\n<h2>Component bindings</h2>\n"},{"title":"Explain onMount in svelte with examples","date":null,"description":"","slug":"explain-onmount-in-svelte-with-examples","id":"explain-onmount-in-svelte-with-examples-547428","tags":[{"name":"svelte","id":"svelte-795726"}],"content":"<p><code>onMount</code> is a lifecycle function in Svelte that is called when a component is first mounted to the DOM. It is often used to perform initial step, such as fetching data or setting up event listeners.</p>\n<p>Here is an example of using <code>onMount</code> to fetch data from an API:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> {onMount} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte'</span>;\n\t<span class=\"hljs-keyword\">let</span> data = []\n\t<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\"></span>){\n\t\t<span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"https://example.com/api/data\"</span>)\n\t\tdata = <span class=\"hljs-keyword\">await</span> response.<span class=\"hljs-title function_\">json</span>()\n\t}\n<span class=\"hljs-title function_\">onMount</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">fetchData</span>())\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n{#each data as item}\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>{item}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n{/each}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></code></pre>\n<p>In this example. <code>onMount</code> is used to call the <code>fetchData</code> function, which makes a request to an API and sets the <code>data</code> variable to the response. The data is then rendered in the <code>ul</code> element using a <code>#each</code> block.</p>\n<p>Here is another example of using <code>onMount</code> to set up an event listener:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> {onMount} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte'</span>\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleResize</span>(<span class=\"hljs-params\"></span>) {\n\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Window resized\"</span>)\n\t}\n\t<span class=\"hljs-title function_\">onMount</span>(<span class=\"hljs-function\">() =></span> {\n\t\t<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"resize\"</span>, handleResize)\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n\t\t\t<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">\"resize\"</span>, handleResize)\n\t\t}\n\t})\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre>\n<p>In this example, <code>onMount</code> is used to add an event listener to the <code>window</code> object for the <code>resize</code> event. The <code>handleResize</code> function is called whenever the window is resized, and logs a message to the console. The <code>return</code> statement in the <code>onMount</code> function is used to clean up the event listener when the component is unmounted. This is important to prevent leaks in the application.</p>\n"},{"title":"Getting started with Svelte","date":null,"description":"","slug":"getting-started-with-svelte","id":"getting-started-with-svelte-686913","tags":[{"name":"svelte","id":"svelte-806057"}],"content":"<h2>Introduction to Svelte</h2>\n<p>Svelte is a relatively new frontend JavaScript framework. Svelte is different from other popular frameworks like React, Angular, and Vue.js in that it is a compiler, not a runtime library. This means that instead of sending code to the client and having it run there, Svelte compiles your components into efficient JavaScript code that runs directly in the browser.</p>\n<p>Svelte has several advantages:</p>\n<ol>\n<li>Firstly, it is fast and lightweight. Because Svelte compiles your components into efficient JavaScript, your application will run quickly and smoothly.</li>\n<li>Secondly, it has a small learning curve compared to other frontend frameworks.</li>\n<li>Finally, Svelte has a growing and supportive community.</li>\n</ol>\n<h2>Setting up your development environment</h2>\n<p>To use Svelte, you will need to have Node.js and npm (node package manager) installed on your computer. Node.js is a JavaScript runtime environment, and npm is a package manager that helps you install and manage packages for your projects.</p>\n<p>To create a new Svelte project using npx:</p>\n<pre><code>npx degit sveltejs/template my-svelte-project\ncd my-svelte-project\nnpm install\nnpm run dev\n</code></pre>\n<p><code>npx</code> is a tool that allows you to execute npm packages, and <code>digit</code> is a package that allows you to clone and bootstrap a repository without Git. <code>sveltejs/template</code> is the repository that contains the Svelte project template, and <code>my-svelte-project</code> is the name of the directory that will be created for your new project.</p>\n<p><code>npm run</code> is a command that allows you to run scripts defined in the <code>scripts</code> section of your project's <code>package.json</code> file. <code>dev</code> is the name of the script that starts the development server.</p>\n<p>After running <code>npm run dev</code>, Svelte will compile and build your application. It will start a local server. Svelte will watch for file updates, and automatically recompile and refresh the app for you when changes are made to the source files.</p>\n<h2>Application Structure</h2>\n<p>The starter template comes with the following structure:</p>\n<pre><code>my-svelte-project\n├── README.md\n├── package.json\n├── package-lock.json\n├── rollup.config.js\n├── .gitignore\n├── node_modules\n├── public\n│   ├── favicon.png\n│   ├── index.html\n│   ├── global.css\n│   └── build\n│       ├── bundle.css\n│       ├── bundle.js\n│       └── bundle.js.map\n├── scripts\n│   └── setupTypeScript.js\n└── src\n    ├── App.svelte\n    └── main.js\n</code></pre>\n<p>The contents are as follows:</p>\n<ul>\n<li><code>rollup.config.js</code>:  Svelte uses <code>rollup.js</code> as a module bundler. This configuration file tells rollup how to compile and build your app. If your prefer <code>webpack</code>, you can create your starter project with <code>npx degit sveltejs/template-webpack</code></li>\n<li><code>src</code>: This directory is where the source code for your application lives - where you will be creating the code for your app.\n<ul>\n<li><code>App.svelte</code> - This is the top-level component of your app.</li>\n<li><code>main.js</code> - The entry point to our application. It just instantiate the <code>App</code> component and binds it to the body of our HTML page.</li>\n</ul>\n</li>\n<li><code>public</code>: This directory contains all the filles that will be published in production.\n<ul>\n<li><code>index.html</code>: This is the main page of our app. Initially it is just an empty HTML page that loads the CSS files and js bundles generated by Svelte.</li>\n<li><code>global.css</code>: This file contains unscoped styles. It is a regular CSS file that will be applied to the whole application.</li>\n<li><code>build</code>: This folder contains the generated CSS and JavaScript source code.</li>\n</ul>\n</li>\n</ul>\n<h2>Having a look at our first Svelte component</h2>\n<p>Components are the building blocks of Svelte applications. They are written into <code>.svelte</code> files using a superset of HTML.</p>\n<p>All there sections - <code>&#x3C;script></code>, <code>&#x3C;style></code>, and markup - are optional, and can appear in any order you like.</p>\n<pre><code>&#x3C;script>\n  // logic goes here\n&#x3C;/script>\n\n&#x3C;style>\n  /* styles go here */\n&#x3C;/style>\n\n&#x3C;!-- markup (zero or more HTML elements) goes here -->\n\n</code></pre>\n<h3>The <code>&#x3C;script></code> section</h3>\n<p>The <code>&#x3C;script></code> block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are 'visible' from the component's markup. Top-level variables are the way Svelte handles the component state, and they are reactive by default.</p>\n<pre><code>&#x3C;script>\n  export let name;\n&#x3C;/script>\n</code></pre>\n<p>Svelte uses the <code>export</code> keyword to mark a variable declaration as a property (or prop), which means it becomes accessible to consumers of the component (eg. other components).</p>\n<h3>The markup section</h3>\n<p>In the markup section you can insert any HTML you like, and in addition you can insert valid JavaScript expressions inside singly curly brackets (<code>{ }</code>).  In this case we are embedding the value of the <code>name</code> prop right after the <code>Hello</code> text.</p>\n<pre><code>&#x3C;main>\n  &#x3C;h1>Hello {name}!&#x3C;/h1>\n&#x3C;/main>\n</code></pre>\n<p>Svelte also supports tags like <code>{#if}</code>, <code>{#each}</code>, and <code>{#await}</code> - these directives or tags allow you to conditionally render a portion of the markup, iterate through a list of elements, and work with async values, respectively.</p>\n<h3>The <code>&#x3C;style></code> section</h3>\n<p>In Svelte, CSS inside a component's <code>&#x3C;style></code> block will be scoped only to that component. This works by adding a class to selected elements, which is based on a hash of the component styles.</p>\n<pre><code>&#x3C;h1 class=\"svelte-1tky8bj\">\n</code></pre>\n<blockquote>\n<p>You can override this behavior and apply styles to a selector globally using the <code>:global()</code> modifier.</p>\n</blockquote>\n<h2>A first look at Svelte reactivity</h2>\n<p>In the context of a UI framework, reactivity means that the framework can automatically update the DOM when the state of any component is changed.</p>\n<p>In Svelte, reactivity is triggered by assigning a new value to any top-level variable in a component. For example, we could include a <code>toggleName</code> function in our <code>App</code> component, and a button to run it.</p>\n<pre><code>&#x3C;script>\n  export let name;\n\n  function toggleName() {\n    if (name === \"world\") {\n      name = \"Svelte\";\n    } else {\n      name = \"world\";\n    }\n  }\n&#x3C;/script>\n\n&#x3C;main>\n  &#x3C;h1>Hello {name}!&#x3C;/h1>\n  &#x3C;button on:click=\"{toggleName}\">Toggle name&#x3C;/button>\n&#x3C;/main>\n</code></pre>\n<p>Whenever the button is clicked, Svelte executes the <code>toggleName()</code> function, which in turn updates the value of the <code>name</code> variable.</p>\n<p>The <code>&#x3C;h1></code> label is automatically updated. Behind the scenes, Svelte created the JavaScript code to update the DOM whenever the value of the name variable changes, without using any virtual DOM or other complex reconciliation mechanism.</p>\n<p>Note the use of <code>:</code> in <code>on:click</code> That's Svelte's syntax for listening to DOM events.</p>\n<h2>Inspecting <code>main.js</code>: the entry point on our app</h2>\n<p>Let's open <code>src/main.js</code>, which is where the <code>App</code> component is being imported and used. This file is the entry point for our app, and it initially looks like this:</p>\n<pre><code>import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body,\n  props: {\n    name: \"world\",\n  },\n});\n\nexport default app;\n\n</code></pre>\n<p><code>main.js</code> starts by importing the Svelte component that we are going to use. Then, it instantiates it, passing an option object with the following properties:</p>\n<ul>\n<li><code>target</code>: The DOM element inside which we want the component to be rendered, in this case the <code>&#x3C;body></code> element.</li>\n<li><code>props</code>: the values to assign to each prop of the <code>App</code> component.</li>\n</ul>\n<h2>A look under the hood</h2>\n<p>How does Svelte manage to make all these files work together nicely?</p>\n<p>The Svelte compiler processes the <code>&#x3C;style></code> section of every component and compiles them into the <code>public/build/bundle.css</code> file.</p>\n<p>It also compiles the markup and <code>&#x3C;script></code> section of every component and stores that result in <code>public/build/bundle.js</code>. It also adds the code in <code>src/main.js</code> to reference the features of every component.</p>\n<p>Finally the file <code>public/index.html</code> includes the generated <code>bundle.css</code> and <code>bundle.js</code> files.</p>\n<h2>Conditional Statement</h2>\n<p>In Svelte, you can create conditional statement using the <code>{#if}</code> directive. The syntax is as follows:</p>\n<pre><code>{#if condition}\n\t&#x3C;!---HTML ---->\n{/if}\n</code></pre>\n<p>You can also use an <code>{else}</code> block to specify what to do if the condition  is not met:</p>\n<pre><code>{#if condition}\n\n{:else if condition}\n\n{:else}\n  \n{/if}\n</code></pre>\n<h2>Loop through an Array</h2>\n<p>In Svelte, you can create a <code>foreach</code> loop using the <code>{#each}</code> directive. The syntax is as follows:</p>\n<pre><code>{#each array as item (index)}\n  &#x3C;!-- code to be executed for each item in the array -->\n{/each}\n\n</code></pre>\n<p>For example:</p>\n<pre><code>&#x3C;script>\n  let numbers = [1, 2, 3, 4, 5];\n&#x3C;/script>\n\n&#x3C;ul>\n  {#each numbers as number (index)}\n    &#x3C;li>{index + 1}. {number}&#x3C;/li>\n  {/each}\n&#x3C;/ul>\n\n</code></pre>\n<p>In the above example, <code>number</code> is the current item in the <code>numbers</code> array, and <code>index</code> as its index. The <code>(index)</code> syntax is optional, and you can omit it if you do not need it in your loop.</p>\n<h2>Loop through an Object</h2>\n<p>In Svelte, you can loop through an object using the <code>{#each}</code> directive in a similar way as with arrays. However, since objects don't have a guaranteed order, you will need to extract the object's keys first, and then use those keys to access the values. Here is an example:</p>\n<pre><code>&#x3C;script>\n  let person = {\n    name: 'John Doe',\n    age: 30,\n    city: 'New York'\n  };\n&#x3C;/script>\n\n&#x3C;ul>\n  {#each Object.keys(person) as key}\n    &#x3C;li>{key}: {person[key]}&#x3C;/li>\n  {/each}\n&#x3C;/ul>\n\n</code></pre>\n<p>In the above example, <code>Object.keys(person)</code> returns an array of the object's keys, which we can then use in the <code>{#each}</code> loop to access the values.</p>\n"},{"title":"Lifecycle in Svelte","date":null,"description":"","slug":"lifecycle-in-svelte","id":"lifecycle-in-svelte-744962","tags":[{"name":"svelte","id":"svelte-106411"}],"content":"<h2>onMount</h2>\n<p>Every component has a <em>lifecyle</em> that starts when it is created, and ends when it is destroyed. There are a handful of functions that allow you to run code at key moments during that lifecycle.</p>\n<p>The one you will use most frequently is <code>onMount</code>, which runs after the component is first rendered to the DOM.</p>\n<p>We will add an <code>onMount</code> handler that loads some data over the network:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> {onMount} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte'</span>\n\t<span class=\"hljs-keyword\">let</span> photos = []\n\t<span class=\"hljs-title function_\">onMount</span>(aysnc () => {\n\t\t<span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"/tutorial/api/album\"</span>)\n\t\tphotos = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>()\n\t})\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre>\n<p>It is recommended to put the <code>fetch</code> in <code>onMount</code> rather than at the top level of the <code>&#x3C;script></code> because of the server-side rendering (SSR). With the exception of <code>onDestroy</code>, lifecycle functions do not run during SSR, which means we can avoid fetching data that should be loaded lazily once the component has been mounted in the DOM.</p>\n<p>Lifestyle functions must be called while the component is initialising so that the callback is bound to the component instance - not (say) in a <code>setTimeout</code>.</p>\n<p>If the <code>onMount</code> callback returns a function, that function will be called when the component is destroyed.</p>\n<h2>onDestroy</h2>\n<p>To run code when your component is destroyed, use <code>onDestroy</code>.</p>\n<p>For example, we can add a <code>setInterval</code> function when our component initialises, and clean it up when it is no longer relevant. Doing so prevents memory leaks.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> {onDestroy} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'svelte'</span>;\n\t<span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">const</span> interval = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> counter += <span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-title function_\">onDestroy</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">cleanInterval</span>(interval))\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre>\n<p>While it is important to call lifestyle functions during the component's initialisation, it does not matter <em>where</em> you call them from. So if we wanted, we could abstract the internal logic into a helper function in <code>utils.js</code> ...</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {onDestroy} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"svelte\"</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onInterval</span>(<span class=\"hljs-params\">callback, milliseconds</span>) {\n\t<span class=\"hljs-keyword\">const</span> interval = <span class=\"hljs-built_in\">setInterval</span>(callback, milliseconds)\n\t<span class=\"hljs-title function_\">onDestroy</span>(<span class=\"hljs-function\">() =></span> {\n\t\t<span class=\"hljs-built_in\">clearInterval</span>(interval)\n\t})\n}</code></pre>\n<p>...and import it into our component:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> {onInterval} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./util.js\"</span>\n\t<span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-title function_\">onInterval</span>(<span class=\"hljs-function\">() =></span> counter += <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1000</span>)\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre>\n<h2>beforeUpdate and afterUpdate</h2>\n<p>The <code>beforeUpdate</code> function schedules work to happen immediately before the DOM is updated, <code>afterUpdate</code> is its counterpart, used for running code once the DOM is in sync with your data.</p>\n<p>Together, they are useful for doing things imperatively that are difficult to achieve in a purely state-driven way.</p>\n<h4>Example 1: Updating a DOM element</h4>\n<p>Suppose you have a Svelte component that renders a button element. You want to update the button's text whenever a prop value changes. You can use the <code>beforeUpdate</code> lifecycle method to get the current value of the prop before it updates, and the <code>afterUpdate</code> method to update the button text after it has updated.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> buttonText;\n<span class=\"hljs-keyword\">let</span> button;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">beforeUpdate</span>(<span class=\"hljs-params\"></span>) {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Button text before update: \"</span>, button.<span class=\"hljs-property\">textContent</span>)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterUpdate</span>(<span class=\"hljs-params\"></span>){\n\tbutton.<span class=\"hljs-property\">textContent</span> = buttonText\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">bind:this</span>=<span class=\"hljs-string\">{button}</span>></span>{buttonText}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></code></pre>\n<h4>Example 2: Animating a component</h4>\n<p>Suppose you have a Svelte component that displays a message, and you want to animate it whenever the message changes. You can use the <code>beforeUpdate</code> and <code>afterUpdate</code> methods to add a CSS class to the component before it updates, and remove it after it has updated.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> message;\n\t<span class=\"hljs-keyword\">let</span> container\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">beforeUpdate</span>(<span class=\"hljs-params\"></span>){\n\t\tcontainer.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"animate\"</span>)\n\t}\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterUpdate</span>(<span class=\"hljs-params\"></span>){\n\t\tcontainer.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"animate\"</span>)\n\t}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span> <span class=\"hljs-attr\">bind:this</span>=<span class=\"hljs-string\">{container}</span>></span>{message}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<h2>tick</h2>\n<p>The <code>tick</code>  function is unlike other lifecycle functions in that you can call it any time, not just when the component initialises. It returns a promise that resolves as soon as any pending state changes have been applied to the DOM (or immediately, if there are no pending state changes).</p>\n<p>When you update component state in Svelte, it does not update the DOM immediately. Instead, it waits until the nextt <code>microtask</code> to see if there are any other changes that need to be applied including in other components. Doing so avoids unnecessary work and allows the browser to batch things more efficiently.</p>\n<h4>Example 1: Waiting for a component to be fully rendered before calling a function</h4>\n<p>Suppose you have a Svelte component that renders a list of items. You want to call a function that manipulates the list items after they have been rendered. You can use <code>tick</code> to apply the pending state changes immediately.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> items = []\n\t<span class=\"hljs-keyword\">let</span> list\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">manipulateList</span>(<span class=\"hljs-params\"></span>) {\n\t\t<span class=\"hljs-title function_\">tick</span>().<span class=\"hljs-title function_\">then</span>( <span class=\"hljs-function\">() =></span> {\n\t\t\tlist.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\".item\"</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =></span> {\n\t\t\t\titem.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">`Item <span class=\"hljs-subst\">${index + <span class=\"hljs-number\">1</span>}</span>`</span>\n\t\t\t})\n\t\t} )\n\t}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{manipulateList}</span>></span>Manipulate List<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">bind:this</span>=<span class=\"hljs-string\">{list}</span>></span>\n\t{#each items as item}\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span> class=\"item\">{item}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n\t{/each}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></code></pre>\n<h4>Example 2: Updating a component property after an animation</h4>\n<p>Suppose you have a Svelte component that contains an element that you want to animate. After the animation completes, you want to update a property of the component. You can use <code>tick</code> to apply the pending state changes before updating the property.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> isOpen = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">let</span> box\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toggleBox</span>(<span class=\"hljs-params\"></span>) {\n\tisOpen = !isOpen\n\tbox.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">height</span> = isOpen ? <span class=\"hljs-string\">\"200px\"</span> : <span class=\"hljs-string\">\"0\"</span>\n\t<span class=\"hljs-title function_\">tick</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =></span> {\n\t\tbox.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">background</span> = isOpen ? <span class=\"hljs-string\">\"green\"</span> : <span class=\"hljs-string\">\"red\"</span>;\n\t})\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{toggleBox}</span>></span>Toggle Box<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"box\"</span> <span class=\"hljs-attr\">bind:this</span>=<span class=\"hljs-string\">{box}</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\"> <span class=\"hljs-selector-class\">.box</span> { <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">background</span>: red; <span class=\"hljs-attribute\">transition</span>: height <span class=\"hljs-number\">0.3s</span>; } </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span></code></pre>\n<p>``</p>\n"},{"title":"Lifecycle of a component in svelte","date":null,"description":"","slug":"lifecycle-of-a-component-in-svelte","id":"lifecycle-of-a-component-in-svelte-395011","tags":[{"name":"svelte","id":"svelte-148766"}],"content":"<p>Svelte is a popular JavaScript framework that provides a powerful toolset for building dynamic web applications. One of the key features of Svelte is its component-based architecture, which allows developers to create reusable and modular UI elements. In this article, we will explore the lifecycle of a Svelte component and the various methods that are available to manage the component's state and behavior.</p>\n<h2>Component Lifecycle Overview</h2>\n<p>A Svelte component goes through several stages during its lifecycle, including creation, initialization, updates, and destruction. Each stage provides an opportunity for the developer to perform specific actions or update the component's state. Here is a high-level overview of the component lifecycle in Svelte:</p>\n<ol>\n<li><strong>Creation</strong>: The component is created and initialized with the initial state and properties.</li>\n<li><strong>Intialization</strong>: The <code>onMount</code> lifecycle method is called, allowing the developer to perform initial setup tasks, such as fetching data from an API or setting up event listeners.</li>\n<li><strong>Updates</strong>: The component's state or properties are updated, triggering the <code>beforeUpdate</code> and <code>afterUpdate</code> lifecycle methods.</li>\n<li><strong>Destruction</strong>: The component is removed from the DOM and the <code>onDestroy</code> lifecycle method is called, allowing the developer to perform cleanup tasks.</li>\n</ol>\n<h2>Creation</h2>\n<p>The creation stage is the first step in a component's lifecycle. During this stage, the component is created and initialized with the intial state and properties. In Svelte, the <code>export</code> statement is used to define the properties that a component expects to receive. For example:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">\"World\"</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Hello {name}! <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<p>In this example, the <code>name</code> property is defined using the <code>export</code> statement and is set to a default value of \"World\". When this component is used in a parent component, the <code>name</code> property can be overridden to display a custom greeting.</p>\n<h2>Intialization</h2>\n<p>The initialization stage is the next step in a component's lifecycle. During this stage, the component is mounted to the DOM and the <code>onMount</code> lifecycle method is called.  The <code>onMount</code> method is used to perform initial setup tasks, such as fetching data from the API or setting up event listeners.</p>\n<h2>Updates</h2>\n<p>The update stage is triggered whenever a component's state or properties are updated. During this stage, the <code>beforeUpdate</code> and <code>afterUpdate</code> lifecycle methods are called, allowing the developer to perform tasks before and after the update. Here is an example:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\"></span>){\n\t\tcount++;\n\t}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">beforeUpdate</span>(<span class=\"hljs-params\"></span>){\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Before Update\"</span>, count)\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterUpdate</span>(<span class=\"hljs-params\"></span>){\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"After Update\"</span>, count)\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{handleClick}</span>></span> Increment <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></code></pre>\n<h2>Destruction</h2>\n<p>The destruction stage is triggered when a component is removed from the DOM. During this stage, the <code>onDestroy</code> lifecycle method is called, allowing the developer to perform cleanup tasks, such as removing event listeners or cleaning up resources. Here is an example:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">import</span> {onDestroy, onMount} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">`svelte`</span>;\n\t\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\"></span>){\n\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"Button Clicked   \"</span>)\n\t}\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-params\"></span>){\n\t\t<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"button\"</span>)\n\t\tbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, handleClick)\n\t}\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeClickListener</span>(<span class=\"hljs-params\"></span>){\n\t\t<span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"button\"</span>)  \n\t\tbutton.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">\"click\"</span>, handleClick)\n\t}\n\n\t<span class=\"hljs-title function_\">onMount</span>(<span class=\"hljs-function\">() =></span> {\n\t\t<span class=\"hljs-title function_\">addEventListener</span>()\n\t})\n\t<span class=\"hljs-title function_\">onDestroy</span>(<span class=\"hljs-function\">() =></span> {\n\t\t<span class=\"hljs-title function_\">removeClickListener</span>()\n\t})   \n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span> Click Me <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></code></pre>\n"},{"title":"Reactivity in Svelte","date":null,"description":"","slug":"reactivity-in-svelte","id":"reactivity-in-svelte-72940","tags":[{"name":"svelte","id":"svelte-61922"}],"content":"<h2>Assignment</h2>\n<p>At the heart of Svelte is a powerful system of <em>reactivity</em> for keeping the DOM in sync with your application state - for example, in response to an event.</p>\n<p>For example:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">incrementCount</span>(<span class=\"hljs-params\"></span>) {\n\t\tcount += <span class=\"hljs-number\">1</span>\n\t}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{incrementCount}</span>></span>\n\tClicked {count} {count === 1 ? 'time' : 'times'}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></code></pre>\n<p>Svelte 'instruments' this assignment with some code that tells it the DOM will need to be updated.</p>\n<h2>Declarations</h2>\n<p>Svelte's reactivity not only keeps the DOM in sync with your application's variables, it cam also keep variables in sync with each other using reactive declarations. They look like this:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">$</span>: doubled = count * <span class=\"hljs-number\">2</span></code></pre>\n<p>Svelte interepts it to mean 're-run' this code whenever any of the referenced values change.</p>\n<p>Let's use <code>doubled</code> in our markup:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{count} doubled is {doubled} <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p>Ofcourse, you could just write <code>{count * 2}</code> in the markup instead - you do not have to use reactive values. Reactive values become particularly valuable when you need to reference them multiple times, or you have values that depend on <code>other</code> reactive values.</p>\n<p>Svelte does not re-render the entire component whenever the value of any variable changes. Instead, <strong>Svelte uses a technique called \"reactive declarations\" to track which parts of the component's template depend on which variables, and only updates those parts of the DOM when the corresponding values change</strong>.</p>\n<p>When a Svelte component is compiled, it generates optimized code that includes the reactive declarations for all the variables in the component. These reactive declarations create 'subscriptions' that track which parts of the component's template depend on each variable.</p>\n<p>When a variable changes, Svelte uses these subscriptions to determine which part of the template need to be updated. It then generates optimized DOM updates that only updates those parts of the template, instead of re-rendering the entire component.</p>\n<h2>Statements</h2>\n<p>We are not limited to declaring reactive values - we can also run aribitrary statements reactively. For example, we can log the value of <code>count</code> whenever it changes:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">$</span>: <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"the count is \"</span> + count)</code></pre>\n<p>You can easily group statements together with a block:</p>\n<pre><code class=\"hljs language-js\">$ : {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"the count is \"</span> + count)\n\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"I SAID THE COUNT IS \"</span> + count)\n}</code></pre>\n<p>You can even put the <code>$:</code> in front of things like <code>if</code> blocks:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">$</span>: <span class=\"hljs-keyword\">if</span> (count >= <span class=\"hljs-number\">10</span>){\n\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">\"count is dangerously high\"</span>)\n\tcount = <span class=\"hljs-number\">9</span>\n}</code></pre>\n<h2>Updating arrays and objects</h2>\n<p><strong>Svelte's reactivity is triggered by assignments.</strong> Methods that mutate arrays or objects will not trigger updates by themselves.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\n\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addNumber</span>(<span class=\"hljs-params\"></span>) {\n\t\tnumbers.<span class=\"hljs-title function_\">push</span>(numbers.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>);\n\t}\n\n\t<span class=\"hljs-attr\">$</span>: sum = numbers.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">t, n</span>) =></span> t + n, <span class=\"hljs-number\">0</span>);\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{numbers.join(' + ')} = {sum}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">{addNumber}</span>></span>\n\tAdd a number\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></code></pre>\n<p>In this example, clicking the \"Add a number\" button calls the <code>addNumber</code> function, which appends a number to the array but does not trigger the recalculation of <code>sum</code>.</p>\n<p>One way to fix this is to assign <code>numbers</code> to itself to tell the compiler it has changed:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addNumber</span>(<span class=\"hljs-params\"></span>){\n\tnumbers.<span class=\"hljs-title function_\">push</span>(numbers.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>)\n\tnumbers = numbers\n}</code></pre>\n<p>You could also write this more concisely using the ES6 spread syntax:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addNumber</span>(<span class=\"hljs-params\"></span>){\n\tnumbers = [...numbers, numbers.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>]\n}</code></pre>\n<p>The same rule applies to array methods such as <code>pop</code>, <code>shift</code>, and <code>splice</code> and to object methods such as <code>Map.set</code>, <code>Set.add</code>, etc.</p>\n<p>Assignments to <code>properties</code> of arrays and objects - e.g. <code>obj.foo += 1</code> or <code>array[i] = x</code> - work the same way as assignments to the value themselves.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addNumber</span>(<span class=\"hljs-params\"></span>) {\n\tnumbers[numbers.<span class=\"hljs-property\">length</span>] = numbers.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>\n}</code></pre>\n<p>However, indirect assignments to references such as this...</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> foo = obj.<span class=\"hljs-property\">foo</span>\nfoo.<span class=\"hljs-property\">bar</span> = <span class=\"hljs-string\">\"baz\"</span></code></pre>\n<p>or</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">quox</span>(<span class=\"hljs-params\">thing</span>){\n\tthing.<span class=\"hljs-property\">foo</span>.<span class=\"hljs-property\">bar</span> = <span class=\"hljs-string\">\"baz\"</span>\n}\n<span class=\"hljs-title function_\">quox</span>(obj)</code></pre>\n<p>...won't trigger reactivity on <code>obj.foo.bar</code>, unless you follow it up with <code>obj=obj</code></p>\n<p>A simple rule of thumb: the updated variable must directly appear on the left hand side of the assignment.</p>\n"},{"title":"Basic Concepts in SvelteKit","date":null,"description":"","slug":"basic-concepts-in-sveltekit","id":"basic-concepts-in-sveltekit-593015","tags":[{"name":"sveltekit","id":"sveltekit-176967"}],"content":"<h2>What is SvelteKit?</h2>\n<p>It is a framework for building high-performance apps. Whereas Svelte is <code>component framework</code>, SvelteKit is an <code>app framework</code> that solves the tricky problems of building something production-ready:</p>\n<ul>\n<li>Routing</li>\n<li>Server-side rendering</li>\n<li>Data fetching</li>\n<li>Service workers</li>\n<li>TypeScript integration</li>\n<li>Prerendering</li>\n<li>Single-page apps</li>\n<li>Library packaging</li>\n<li>Optimised production builds</li>\n<li>Deploying to different hosting providers</li>\n<li>...and so on</li>\n</ul>\n<p>SvelteKit apps are server-rendered by default( like traditional 'multi-page apps' or MPAs) for excellent first load performance and SEO characterstics, but then can then transition to client-side navigation (like modern 'single-page apps' or SPAs) to avoid jankily reloading everything (including things like third-party analytics code) when the user navigates.</p>\n<h2>Project structure</h2>\n<pre><code>my-sveltekit-project/\n├── src/\n│   ├── routes/\n│   │   ├── index.svelte\n│   │   └── about.svelte\n│   ├── lib/\n│   │   ├── api.js\n│   │   └── utils.js\n│   ├── components/\n│   │   ├── Button.svelte\n│   │   └── Card.svelte\n│   ├── app.html\n│   └── app.js\n├── static/\n│   ├── img/\n│   ├── css/\n│   └── js/\n├── package.json\n├── README.md\n├── .gitignore\n└── node_modules/\n</code></pre>\n<p>Let's break down the structure and its contents:</p>\n<ul>\n<li>\n<p><code>src/</code>: This directory contains all the source code of your SvelteKit project.</p>\n<ul>\n<li>\n<p><code>routes/</code>: This directory contains all the routes of your application. Each <code>.svelte</code> file in this directory will automatically become a page in your app.</p>\n</li>\n<li>\n<p><code>lib/</code>: This directory contains any reusable utility functions, constants, or API integrations.</p>\n</li>\n<li>\n<p><code>components/</code>: This directory contains all the reusable components that are used in your pages.</p>\n</li>\n<li>\n<p><code>app.html</code>: This file contains the HTML structure of your app, and any meta tags, scripts, or links you want to include in the head of your page.</p>\n</li>\n<li>\n<p><code>app.js</code>: This file contains the initialization code for your SvelteKit app.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>static/</code>: This directory contains all the static assets like images, CSS, and JavaScript files that need to be served as-is.</p>\n</li>\n<li>\n<p><code>package.json</code>: This file contains all the dependencies, scripts, and metadata of your project.</p>\n</li>\n<li>\n<p><code>README.md</code>: This file contains the documentation of your project.</p>\n</li>\n<li>\n<p><code>.gitignore</code>: This file specifies the files and directories that should be ignored by Git.</p>\n</li>\n<li>\n<p><code>node_modules/</code>: This directory contains all the installed dependencies of your project.</p>\n</li>\n</ul>\n<h2>Server and client</h2>\n<p>A SvelteKit app can be thought of as two distinct entities working in tandem - the <em>server</em> and the <em>client</em>.</p>\n<p>SvelteKit makes  the two communicate with each other seamlessly. On the initial page load, the server renders the HTML, meaning the content is visible as quickly as possible. The client then takes over in a process called <code>hydration</code>, so that subsequent naviagtions happen without full page reloads. It will request additonal code and data from the server as needed.</p>\n"},{"title":"Getting started with SvelteKit","date":null,"description":"","slug":"getting-started-with-sveltekit","id":"getting-started-with-sveltekit-455141","tags":[{"name":"sveltekit","id":"sveltekit-943557"}],"content":"<p>SvelteKit is a tool for building web applications using the Svelte framework.</p>\n<h2>Install Nodejs</h2>\n<p>To use SvelteKit, you need to have Node.js installed on your machine.</p>\n<h2>Create a SvelteKit project</h2>\n<p>To create a new SvelteKit project, you can use the <code>create-svelte</code> command-line tool. Run the following command in your terminal:</p>\n<pre><code>npx create-svelte@latest my-app\n</code></pre>\n<p>This will create a new SvelteKit project in a directory called <code>my-app</code>.</p>\n<h2>Choose a project template</h2>\n<p>When creating a new SvelteKit project, you can choose from several project templates, including a \"Skeleton\" project that provides a basic starting point for your application.</p>\n<h2>Start the Development Server</h2>\n<p>Once you have created your SvelteKit project, you can start the development server by running the folloowing command:</p>\n<pre><code>cd my-app\nnpm run dev\n</code></pre>\n<p>This will start the development server and open your app in a web browser at <code>http://localhost:3000</code></p>\n<h2>Build and deploy your app</h2>\n<p>When you are ready to develop your app, you can build using the following command:</p>\n<pre><code>npm run build\n</code></pre>\n<p>This will create a production-ready build of your app in a <code>build</code> directory. You can then build to a web server or hosting service of your choice.</p>\n"},{"title":"How to configure tailwind with sveltekit","date":null,"description":"","slug":"how-to-configure-tailwind-with-sveltekit","id":"how-to-configure-tailwind-with-sveltekit-898032","tags":[{"name":"sveltekit","id":"sveltekit-716700"}],"content":"<h3>Create your SvelteKit project</h3>\n<pre><code>npm init svelte@latest my-app\ncd my-app\n\n</code></pre>\n<h3>Install Tailwind CSS</h3>\n<pre><code>npm install -D tailwindcss postcss autoprefixer\n</code></pre>\n<p>Then, run the following command to generate both <code>tailwind.config.cjs</code> and <code>postcss.config.cjs</code>:</p>\n<pre><code>npx tailwindcss init -p\n</code></pre>\n<p>Next, change the created <code>tailwind.config.js</code> to a CommonJS module by renaming it to <code>tailwind.config.cjs</code>. You just need to change the extension to <code>cjs</code>.</p>\n<p>Next, change the created <code>tailwind.config.js</code> to a CommonJS module by renaming it to <code>tailwind.config.cjs</code>. You just need to change the extension to <code>cjs</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// tailwind.config.cjs</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">purge</span>: [<span class=\"hljs-string\">'src/app.html'</span>, <span class=\"hljs-string\">'src/**/*.svelte'</span>],\n    ...\n}</code></pre>\n<p>Create a <code>styles.css</code> file in the <code>src</code> folder with the following content:</p>\n<pre><code class=\"hljs language-css\">// ./<span class=\"hljs-attribute\">src</span>/style<span class=\"hljs-selector-class\">.css</span>\n<span class=\"hljs-keyword\">@tailwind</span> base;\n<span class=\"hljs-keyword\">@tailwind</span> components;\n<span class=\"hljs-keyword\">@tailwind</span> utilities;</code></pre>\n<p>Now, create a layout component to import the styles from:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ./src/routes/+layout.svelte </span>\n&#x3C;script> \n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../style.css'</span>; \n&#x3C;/script></code></pre>\n<h3>Add Tailwind includes to your Svelte App</h3>\n<p>In your <code>svelte.config.cjs</code> file, add postcss as a preprocessor:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// svelte.config.cjs</span>\n<span class=\"hljs-keyword\">const</span> sveltePreprocess = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'svelte-preprocess'</span>);\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">preprocess</span>: <span class=\"hljs-title function_\">sveltePreprocess</span>({\n        <span class=\"hljs-attr\">postcss</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">defaults</span>: {\n            <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">'postcss'</span>,\n        },\n    }),\n};\n</code></pre>\n<p>And create a <code>postcss.config.cjs</code> file in the root of the project:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// postcss.config.cjs</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">plugins</span>: {\n        <span class=\"hljs-string\">'tailwindcss'</span>: {},\n        <span class=\"hljs-attr\">autoprefixer</span>: {},\n    },\n};\n</code></pre>\n<p>In your Svelte app, add the following code to your <code>index.svelte</code> file or any other Svelte component:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">global</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"postcss\"</span>></span><span class=\"css\">\n    <span class=\"hljs-keyword\">@tailwind</span> base;\n    <span class=\"hljs-keyword\">@tailwind</span> components;\n    <span class=\"hljs-keyword\">@tailwind</span> utilities;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n</code></pre>\n"},{"title":"Loading Data in SvelteKit","date":null,"description":"","slug":"loading-data-in-sveltekit","id":"loading-data-in-sveltekit-540935","tags":[{"name":"sveltekit","id":"sveltekit-634899"}],"content":"<h2>Page Data</h2>\n<p>At its core, SvelteKit's job boils down to three things:</p>\n<ol>\n<li><strong>Routing</strong> -  figure out which route matches an incoming request</li>\n<li><strong>Loading</strong> - get the data needed by the route</li>\n<li><strong>Rendering</strong> -  generate some HTML (on the server) or update the DOM (in the browser)</li>\n</ol>\n<p>Every page of your app can declare a <code>load</code> function in a <code>+page.server.js</code> file alongside the <code>+page.svelte</code> file. As the file name suggests, this module only ever runs on the server, including for client-side navigations.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/routes/blog/+page.server.js</span>\n<span class=\"hljs-keyword\">import</span> { posts } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./data.js'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">load</span>(<span class=\"hljs-params\"></span>) {\n\t<span class=\"hljs-keyword\">return</span> {\n\t\t<span class=\"hljs-attr\">summaries</span>: posts.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =></span> ({\n\t\t\t<span class=\"hljs-attr\">slug</span>: post.<span class=\"hljs-property\">slug</span>,\n\t\t\t<span class=\"hljs-attr\">title</span>: post.<span class=\"hljs-property\">title</span>\n\t\t}))\n\t};\n}</code></pre>\n<blockquote>\n<p>For the sake of the tutorial, we're importing data from <code>src/routes/blog/data.js</code>. In a real app, you'd be more likely to load the data from a database or a CMS, but for now we'll do it like this.</p>\n</blockquote>\n<p>We can access this data in <code>src/routes/blog/+page.svelte</code> via the <code>data</code> prop:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> data;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>blog<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/blog/one\"</span>></span>one<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/blog/two\"</span>></span>two<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/blog/three\"</span>></span>three<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n\t{#each data.summaries as { slug, title }}\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/blog/{slug}\"</span>></span>{title}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n\t{/each}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></code></pre>\n<p>Now, let's do the same for the post page:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/routes/blog/[slug]/+page.server.js</span>\n<span class=\"hljs-keyword\">import</span> { posts } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../data.js'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">load</span>(<span class=\"hljs-params\">{ params }</span>) {\n\t<span class=\"hljs-keyword\">const</span> post = posts.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =></span> post.<span class=\"hljs-property\">slug</span> === params.<span class=\"hljs-property\">slug</span>);\n\t<span class=\"hljs-keyword\">return</span> {\n\t\tpost\n\t};\n}</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!--src/routes/blog/[slug]/+page.svelte--></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> data;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>blog post<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{data.post.title}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>{@html data.post.content}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<p>There's one last detail we need to take care of — the user might visit an invalid pathname like <code>/blog/nope</code>, in which case we'd like to respond with a 404 page:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/routes/blog/[slug]/+page.server.js</span>\n<span class=\"hljs-keyword\">import</span> { error } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@sveltejs/kit'</span>;\n<span class=\"hljs-keyword\">import</span> { posts } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../data.js'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">load</span>(<span class=\"hljs-params\">{ params }</span>) {\n\t<span class=\"hljs-keyword\">const</span> post = posts.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =></span> post.<span class=\"hljs-property\">slug</span> === params.<span class=\"hljs-property\">slug</span>);\n\n\t<span class=\"hljs-keyword\">if</span> (!post) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title function_\">error</span>(<span class=\"hljs-number\">404</span>);\n\n\t<span class=\"hljs-keyword\">return</span> {\n\t\tpost\n\t};\n}</code></pre>\n"},{"title":"Routing in SvelteKit","date":null,"description":"","slug":"routing-in-sveltekit","id":"routing-in-sveltekit-984938","tags":[{"name":"sveltekit","id":"sveltekit-122908"}],"content":"<h2>Pages</h2>\n<p>SvelteKit uses filesystem-based routing, which means that the <em>routes</em> of your app - in other words, what the app should do when a user navigates to a particular URL - are defined by the directories in your codebase.</p>\n<p>The routes are located within <code>src/routes</code>. Every directory within which contains a <code>+page.svelte</code> file creates a route in your app.</p>\n<p><code>src/routes/+page.svelte</code> maps to <code>/</code></p>\n<p><code>src/routes/about/+page.svelte</code> maps to <code>/about</code></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span>home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span></code></pre>\n<blockquote>\n<p>Unlike traditional multi-page apps, navigating to <code>/about</code> and back updates the contents of the current page, like a single-page app. This gives us the best of both worlds — fast server-rendered startup, then instant navigation. (This behaviour can be <a href=\"https://kit.svelte.dev/docs/page-options\">configured</a>.)</p>\n</blockquote>\n<h2>Layouts</h2>\n<p>Different routes of your app will often share common UI. Instead of repeating it in each <code>+page.svelte</code> component, we can use a <code>+layout.svelte</code> component that applies to all routes in the same directory.</p>\n<p>We have two routes, <code>src/routes/+page.svelte</code> and <code>src/routes/about/+page.svelte</code>, that contain the same navigation UI.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!--src/routes/+page.svelte--></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span>home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>this is the home page.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!--src/routes/about/+page.svelte--></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span>home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>this is the about page.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p>Let's create a new file <code>src/routes/+layout.svelte</code> and move the duplicated content from the <code>+page.svelte</code> files into the new <code>+layout.svelte</code> file. The <code>&#x3C;slot /></code> element is where the page content will be rendered:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!--src/routes/+layout.svelte--></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span>home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">slot</span> /></span></code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!--src/routes/+page.svelte--></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span> \n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>this is the home page.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!--src/routes/about/+page.svelte--></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>this is the about page.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p>A <code>+layout.svelte</code> file applies to every child route, including the sibling <code>+page.svelte</code> (if it exists). You can nest layouts to arbitrary depth.</p>\n<h2>Route parameters</h2>\n<p>To create routes with dynamic parameetrs, use square brackets around a valid variable name. For example, a file like <code>src/routes/blog/[slug]/+page.svelte</code> will create a route that matches <code>/blog/one</code>, <code>/blog/two</code>, <code>/blog/three</code> and so on.</p>\n<blockquote>\n<p>Multiple route parameters can appear <em>within</em> one URL segment, as long as they are separated by at least one static character: <code>foo/[bar]x[baz]</code> is a valid route where <code>[bar]</code> and <code>[baz]</code> are dynamic parameters.</p>\n</blockquote>\n"}]
        }
        export default data;
    