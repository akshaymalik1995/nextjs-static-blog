
        const data = {
            "posts": [{"title":"Getting current working directory in Node.js with process.cwd()","tags":[{"name":"nodejs","id":"nodejs-536016"},{"name":"javascript","id":"javascript-689055"}],"date":"2023-05-31 16:32","description":"process.cwd() is a method in the Node.js process module that returns the current working directory of the Node.js process.","slug":"current-working-directory-in-nodejs-with-processcwd","id":"getting-current-working-directory-in-nodejs-with-processcwd-53985","content":"<h2>process.cwd()</h2>\n<p><code>process.cwd()</code> is a method in the Node.js process module that returns the current working directory of the Node.js process. The method does not take any parameters.</p>\n<p>The difference between <code>process.cwd()</code> and <code>__dirname</code> is that <code>process.cwd()</code> returns the current working directory of the process, while <code>__dirname</code> returns the directory name of the current module or file. <code>__dirname</code> is a property of the module, whereas <code>process.cwd()</code> is a method of the global <code>process</code> object.</p>\n<p>Here are some use cases and examples of how to use <code>process.cwd()</code>:</p>\n<ul>\n<li>To print the current working directory of the Node.js process, you can simply call <code>process.cwd()</code>:</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(process.<span class=\"hljs-title function_\">cwd</span>());</code></pre>\n<ul>\n<li>To change the current working directory of the Node.js process, you can use the <code>process.chdir(directory)</code> method. This method changes the current working directory to <code>directory</code>.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\">process.<span class=\"hljs-title function_\">chdir</span>(<span class=\"hljs-string\">'/tmp'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(process.<span class=\"hljs-title function_\">cwd</span>());</code></pre>\n<ul>\n<li>You can use <code>process.cwd()</code> to create file paths relative to the current working directory of the Node.js process. For example:</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-keyword\">const</span> filePath = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">'data'</span>, <span class=\"hljs-string\">'file.txt'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(filePath);</code></pre>\n<p>This will print the file path <code>/path/to/current/working/directory/data/file.txt</code>.</p>\n<p>Note that <code>process.cwd()</code> returns the current working directory of the Node.js process, which may not necessarily be the same as the directory where the Node.js script is located. To get the directory where the script is located, you can use <code>__dirname</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(__dirname);</code></pre>\n<p>This will print the directory where the script is located.</p>\n<p>Overall, <code>process.cwd()</code> is a useful method for working with file paths and changing the current working directory of the Node.js process.</p>\n<p>Sources:</p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/node-js-process-cwd-method/\">GeeksforGeeks</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname\">Stack Overflow</a></li>\n<li><a href=\"https://blog.logrocket.com/understanding-using-globs-node-js/\">LogRocket</a></li>\n<li><a href=\"https://www.baeldung.com/linux/find-working-directory-of-running-process\">Baeldung</a></li>\n</ul>\n"},{"title":"Data Fetching with getStaticProps in Next.js","tags":[{"name":"nextjs","id":"nextjs-159868"}],"date":"2023-05-31 14:20","description":"","slug":"data-fetching-with-getstaticprops-in-nextjs","id":"data-fetching-with-getstaticprops-in-nextjs-793989","content":"<h1>getStaticProps</h1>\n<p>If you export a function called <code>getStaticProps</code> (Static Site Generation) from a page, Next.js will pre-render this page at build time using the props returned by <code>getStaticProps</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getStaticProps</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.github.com/repos/vercel/next.js'</span>);\n  <span class=\"hljs-keyword\">const</span> repo = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>();\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { repo } };\n};\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\">{ repo }</span>) {\n  <span class=\"hljs-keyword\">return</span> repo.<span class=\"hljs-property\">stargazers_count</span>;\n}</code></pre>\n<h2>When should I use getStaticProps?</h2>\n<p>You should use <code>getStaticProps</code> if:</p>\n<ul>\n<li>The data required to render the page is available at build time ahead of a user’s request.</li>\n<li>The data comes from a headless CMS.</li>\n<li>The data can be publicly cached (not user-specific). This condition can be bypassed in certain specific situation by using a Middleware to rewrite the path.</li>\n<li>The page must be pre-rendered (for SEO) and be very fast — <code>getStaticProps</code> generates HTML and JSON files, both of which can be cached by a CDN for performance.</li>\n</ul>\n<h2>When does getStaticProps run?</h2>\n<p><code>getStaticProps</code> always runs on the server and never on the client.</p>\n<ul>\n<li>\n<p><code>getStaticProps</code> always runs during next build</p>\n</li>\n<li>\n<p><code>getStaticProps</code> runs in the background when using <code>fallback: true</code></p>\n</li>\n<li>\n<p><code>getStaticProps</code> is called before initial render when using <code>fallback: blocking</code>\n<code>getStaticProps</code> runs in the background when using <code>revalidate</code>\n<code>getStaticProps</code> runs on-demand in the background when using <code>revalidate()</code></p>\n</li>\n</ul>\n<p>When combined with <strong>Incremental Static Regeneration</strong>, <code>getStaticProps</code> will run in the background while the stale page is being revalidated, and the fresh page served to the browser.</p>\n<p><code>getStaticProps</code> does not have access to the incoming request (such as query parameters or HTTP headers) as it generates static HTML. If you need access to the request for your page, consider using Middleware in addition to <code>getStaticProps</code>.</p>\n<h2>Statically generates both HTML and JSON</h2>\n<p>When a page with <code>getStaticProps</code> is pre-rendered at build time, in addition to the page HTML file, Next.js generates a JSON file holding the result of running getStaticProps.</p>\n<p>This JSON file will be used in client-side routing through <code>next/link</code> or <code>next/router</code>. When you navigate to a page that’s pre-rendered using <code>getStaticProps</code>, Next.js fetches this JSON file (pre-computed at build time) and uses it as the props for the page component. This means that client-side page transitions will not call <code>getStaticProps</code> as only the exported JSON is used.</p>\n<p>When using <strong>Incremental Static Generation</strong>, <code>getStaticProps</code> will be executed in the background to generate the JSON needed for client-side navigation. You may see this in the form of multiple requests being made for the same page, however, this is intended and has no impact on end-user performance.</p>\n<h2>Where can I use getStaticProps</h2>\n<p><code>getStaticProps</code> can only be exported from a page. You cannot export it from non-page files, <code>_app</code>, <code>_document</code>, or <code>_error</code>.</p>\n<p>One of the reasons for this restriction is that React needs to have all the required data before the page is rendered.</p>\n<p>Also, you must use export <code>getStaticProps</code> as a standalone function — it will not work if you add <code>getStaticProps</code> as a property of the page component.</p>\n<h2>Runs on every request in development</h2>\n<p>In development (next dev), getStaticProps will be called on every request.</p>\n"},{"title":"Introduction to routing in Next.js using App Router","date":"2023-06-01 20:18","tags":[{"name":"nextjs","id":"nextjs-511192"},{"name":"app-router","id":"app-router-688761"}],"description":"","slug":"introduction-to-routing-in-nextjs-using-app-router","id":"introduction-to-routing-in-nextjs-using-app-router-671810","content":"<p>The skeleton of every application is routing. This page will introduce you to the <strong>fundamental concepts</strong> of routing for the web and how to handle routing in Next.js.</p>\n<h2>Terminology</h2>\n<p>First, you will see these terms being used throughout the documentation. Here's a quick reference:</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fterminology-component-tree.png&#x26;w=1920&#x26;q=75\" alt=\"Terminology Component Tree\"></p>\n<ul>\n<li><strong>Tree:</strong> A convention for visualizing a hierarchical structure. For example, a component tree with parent and children components, a folder structure, etc.</li>\n<li><strong>Subtree:</strong> Part of a tree, starting at a new root (first) and ending at the leaves (last).</li>\n<li><strong>Root</strong>: The first node in a tree or subtree, such as a root layout.</li>\n<li><strong>Leaf:</strong> Nodes in a subtree that have no children, such as the last segment in a URL path.</li>\n</ul>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Fterminology-url-anatomy.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<ul>\n<li><strong>URL Segment:</strong> Part of the URL path delimited by slashes.</li>\n<li><strong>URL Path:</strong> Part of the URL that comes after the domain (composed of segments).</li>\n</ul>\n<h2>The app directory</h2>\n<p>In version 13, Next.js introduced a new <strong>App Router</strong> built on <a href=\"https://nextjs.org/docs/getting-started/react-essentials#server-components\">React Server Components</a>, which supports shared layouts, nested routing, loading states, error handling, and more.</p>\n<p>The App Router works in a new directory named <code>app</code>. The <code>app</code> directory works alongside the <code>pages</code> directory to allow for incremental adoption. This allows you to opt some routes of your application into the new behavior while keeping other routes in the <code>pages</code> directory for previous behavior. If your application uses the <code>pages</code> directory, please also see the <a href=\"https://nextjs.org/docs/pages/building-your-application/routing\">Pages Router</a> documentation.</p>\n<p>By default, components inside <code>app</code> are <a href=\"https://nextjs.org/docs/getting-started/react-essentials#server-components\">React Server Components</a>. This is a performance optimization and allows you to easily adopt them, and you can also use <a href=\"https://nextjs.org/docs/getting-started/react-essentials#client-components\">Client Components</a>.</p>\n<blockquote>\n<p><strong>Recommendation:</strong> Check out the <a href=\"https://nextjs.org/docs/getting-started/react-essentials\">Server and Client Components</a> page if you're new to Server Components.</p>\n</blockquote>\n<h2>Roles of Folders and Files</h2>\n<p>Next.js uses a file-system based router where:</p>\n<ul>\n<li><strong>Folders</strong> are used to define routes. A route is a single path of nested folders, following the file-system hierarchy from the <strong>root folder</strong> down to a final <strong>leaf folder</strong> that includes a <code>page.js</code> file. See <a href=\"https://nextjs.org/docs/app/building-your-application/routing/defining-routes\">Defining Routes</a>.</li>\n<li><strong>Files</strong> are used to create UI that is shown for a route segment. See <a href=\"https://nextjs.org/docs/app/building-your-application/routing#file-conventions\">special files</a>.</li>\n</ul>\n<h2>Route Segments</h2>\n<p>Each folder in a route represents a <strong>route segment</strong>. Each route segment is mapped to a corresponding <strong>segment</strong> in a <strong>URL path</strong>.</p>\n<p><img src=\"https://nextjs.org/_next/image?url=%2Fdocs%2Flight%2Froute-segments-to-path-segments.png&#x26;w=1920&#x26;q=75\" alt=\"\"></p>\n<h2>Nested Routes</h2>\n<p>To create a nested route, you can nest folders inside each other. For example, you can add a new <code>/dashboard/settings</code> route by nesting two new folders in the <code>app</code> directory.</p>\n<p>The <code>/dashboard/settings</code> route is composed of three segments:</p>\n<ul>\n<li><code>/</code> (Root segment)</li>\n<li><code>dashboard</code> (Segment)</li>\n<li><code>settings</code> (Leaf segment)</li>\n</ul>\n<h2>File Conventions</h2>\n<p>Next.js provides a set of special files to create UI with specific behavior in nested routes:</p>\n<ul>\n<li><strong>layout</strong> : Shared UI for a segment and its children</li>\n<li><strong>page</strong> :  Unique UI of a route and make routes publicly accessible</li>\n<li><strong>loading</strong> : Loading UI for a segment and its children</li>\n<li><strong>not-found</strong> : Not found UI for a segment and its children</li>\n<li><strong>error</strong> : Error UI for a segment and its children</li>\n<li><strong>global-error</strong> : Global error UI</li>\n<li><strong>route</strong> : Server-side API endpoint</li>\n<li><strong>template</strong> : Specialized re-rendered Layout UI</li>\n<li><strong>default</strong> : Fallback UI for <a href=\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes\">Parallel Routes</a></li>\n</ul>\n"},{"title":"Tutorial on reading a file in Nodejs","date":"2023-06-01 05:20","tags":[{"name":"nodejs","id":"nodejs-651164"},{"name":"javascript","id":"javascript-922885"}],"description":"","slug":"reading-a-file-in-nodejs","id":"tutorial-on-reading-a-file-in-nodejs-881510","content":"<h2>Introduction</h2>\n<p>In this tutorial, we will cover reading a file in Node.js using different approaches, including synchronous and asynchronous methods. We will discuss the use of <code>fs</code> module, which is a built-in module for handling file system operations in Node.js.</p>\n<h2>Synchronous Reading</h2>\n<p>The <code>fs.readFileSync</code> function is used for synchronous reading a file. It takes two arguments: the file path and the character encoding. If you do not provide the character encoding, the output will be shown as a buffer. Here is an example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n<span class=\"hljs-keyword\">const</span> textRead = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">\"./text/readFile.txt\"</span>, <span class=\"hljs-string\">'utf-8'</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(textRead)</code></pre>\n<p>In this example, we import the <code>fs</code> module and read a file located in the same directory in the <code>text</code> folder with the name <code>readfile.txt</code>. The <code>readFileSync</code>  returns the content of the file, which we save in the <code>textRead</code> variable and then print to the console.</p>\n<h2>Asynchronous Reading</h2>\n<p>For asynchronous reading, you can use the <code>fs.readFile()</code> method, which takes the file path, encoding, and a callback function that will be called with the file data and (and the error):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\nfs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">\"./text/readfile.txt\"</span>, <span class=\"hljs-string\">\"utf-8\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =></span> {\n\t<span class=\"hljs-keyword\">if</span> (err) {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err)\n\t<span class=\"hljs-keyword\">return</span>\n\t}\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n} )</code></pre>\n<p>In this example, we use the <code>fs.readFile()</code> function to read the same file as before. The callback function is called with the file data and an error object. If there is an error, we log it to the console. Otherwise, we print the file data to the console.</p>\n<h2>Promises</h2>\n<p>For a more modern approach, you can use the promise-based <code>fs.promises.readFile()</code> method or streams to read the file content.  This is especially useful when dealing with large files, as it helps to avoid consuming too much memory and impacting the speed of execution.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>).<span class=\"hljs-property\">promises</span>\nfs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">\"./text/readfile.txt\"</span>, <span class=\"hljs-string\">'utf-8'</span>)\n.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data)\n})\n.<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err)\n})</code></pre>\n<p>In this example, we use the <code>fs.promises.readFile()</code> method to read the file asynchronously. The function returns a promise that resolves with the file data. We use the <code>then()</code> method to handle the resolved promise and print the file data to the console. If there is an error, we handle it using the <code>catch()</code> method.</p>\n<h2>Conclusion</h2>\n<p>To sum up, you can read a file in Node.js using different  approaches like synchronous (<code>fs.readFileSync()</code>), asynchronous (<code>fs.readFile()</code>) , promise-based (f<code>fs.promises.readFile()</code>), and streams. Each approach has its own pros and cons, so choose the one that fits your specific use case.</p>\n"},{"title":"Tutorial on getStaticPaths in Nextjs","date":"2023-06-01 08:02","tags":[{"name":"nextjs","id":"nextjs-800185"}],"description":"","slug":"tutorial-on-getstaticpaths-in-nextjs","id":"tutorial-on-getstaticpaths-in-nextjs-625959","content":"<h2>Introduction</h2>\n<p><code>getStaticPaths</code> is a function used in Next.js to pre-generate static pages for dynamic routes. It is used in combination with <code>getStaticProps</code> to statically pre-render pages that use dynamic routes. The function should be exported from the page that uses dynamic routes.</p>\n<h2>When to use getStaticPaths</h2>\n<p>You should use <code>getStaticPaths</code> if:</p>\n<ul>\n<li>You are statically pre-rendering pages that use dynamic routes</li>\n<li>The page must be pre-rendered (for SEO) and be very fast.</li>\n<li>The data can be stored directly and is not client-specific.</li>\n</ul>\n<h2>getStaticPaths function</h2>\n<p>The <code>getStaticPaths</code> function in Next.js is used to pre-generate static pages for dynamic routes. It is during the build process in production, and it will not be called during runtime.</p>\n<p>The function returns an object with two properties:</p>\n<ul>\n<li><code>paths</code> : an array of the dynamic parameters of the pre-generated static pages.</li>\n<li><code>fallback</code> : a variable that controls the action when the user is trying to access a page whose dynamic parameter is not listed in the <code>paths</code> array. It has three values:\n<ul>\n<li><code>false</code>: The default value of the <code>fallback</code> property. If the request of the user is not listed in the <code>paths</code> array, Next.js will return a 404 page as the result.</li>\n<li><code>true</code>: Tells Next.js to generate the static version for the user's request on the fly.</li>\n<li><code>blocking</code> : This is similar to <code>fallback: true</code> in that it does not return a 404 page for paths that have not yet been generated. However, unlike <code>fallback: true</code>, there is no fallback page displayed to users. Instead, Next.js blocks or waits for the page to be generated before displaying anything to the user. Once the page has been generated, it will be cached, and all future visits will receive the generated page.</li>\n</ul>\n</li>\n</ul>\n<p>When using the <code>fallback: 'blocking'</code>, you do not need to check for <code>router.isFallback</code> in your component, as Next.js will wait for the page to be generated before sending a response to the user's browser.</p>\n<h2>Example</h2>\n<p>Here is an example of how to use <code>getStaticPaths</code> with a dynamic route <code>/user/[userId].js</code></p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) {\n\t<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-comment\">// fetch users data</span>\n\n\t<span class=\"hljs-comment\">// Generate the paths</span>\n\t<span class=\"hljs-keyword\">const</span> paths = users.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =></span> ({\n\t\tparams : { userId : user.<span class=\"hljs-property\">id</span> }\n\t}))\n\n\t<span class=\"hljs-keyword\">return</span> {\n\t\tpaths, \n\t\tfallback : <span class=\"hljs-literal\">true</span>\n\t}\n\n}</code></pre>\n<p>Here is an example of how to use <code>getStaticPaths</code> with <code>fallback: 'blocking'</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) {\n\n<span class=\"hljs-keyword\">return</span> {\n\tpaths : [],\n\tfallback : <span class=\"hljs-string\">\"blocking\"</span>\n}\n}</code></pre>\n<h2>Handling Fallback</h2>\n<p>When using <code>fallback</code> set to <code>true</code>, you need to render a fallback component in your page component to avoid errors when trying to access data from props. You can render a fallback like this:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> {useRouter} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/router'</span>\n<span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-title function_\">useRouter</span>()\n<span class=\"hljs-keyword\">if</span> (router.<span class=\"hljs-property\">isFallback</span>) {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>loading...<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n}</code></pre>\n<h2>Conclusion</h2>\n<p><code>getStaticPaths</code> is a powerful function in Nex.js that allows you to pre-generate static pages for dynamic routes. It is used in combination with <code>getStaticProps</code> and is called during the build process. By properly configuring the <code>paths</code> and <code>fallback</code> properties, you can optimize your application's performance and SEO.</p>\n"},{"title":"Tutorial on sorting an array of objects in JavaScript","date":"2023-06-01 04:11","tags":[{"name":"javascript","id":"javascript-51838"}],"description":"","slug":"tutorial-on-sorting-an-array-of-objects-in-javascript","id":"tutorial-on-sorting-an-array-of-objects-in-javascript-522975","content":"<h2>Introduction</h2>\n<p>In this tutorial, we will discuss how to sort an array of objects in JavaScript using the <code>Array.sort()</code> method and providing a comparison function that determines the order of the objects.</p>\n<p>First, let's create an array of objects:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> employees = [\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'John'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">27</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'December 15, 2017'</span> },\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">32</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'January 1, 2018'</span> },\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Mike'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Johnson'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">27</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'February 1, 2018'</span> },\n];\n</code></pre>\n<p>Now, let's sort this array by the <code>age</code> property in ascending order:</p>\n<pre><code class=\"hljs language-js\">employees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.<span class=\"hljs-property\">age</span> - b.<span class=\"hljs-property\">age</span>)</code></pre>\n<p>You can also sort the array in descending order by changing the order of subtraction:</p>\n<pre><code class=\"hljs language-js\">exmployees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a , b</span>) =></span> b.<span class=\"hljs-property\">age</span> - a.<span class=\"hljs-property\">age</span>)</code></pre>\n<p>If you want to sort the array by a different property, such as <code>lastName</code>, you can modify the comparison function accordingly:</p>\n<pre><code class=\"hljs language-js\">employees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a , b</span>) =></span> {\n\t<span class=\"hljs-keyword\">const</span> lA = a.<span class=\"hljs-property\">lastName</span>.<span class=\"hljs-title function_\">toUpperCase</span>()\n\t<span class=\"hljs-keyword\">const</span> lB = b.<span class=\"hljs-property\">lastName</span>.<span class=\"hljs-title function_\">toUpperCase</span>()\n\t<span class=\"hljs-keyword\">if</span> (lA &#x3C; lB) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">if</span> (lA > lB) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n})</code></pre>\n<h2>How does it work?</h2>\n<p>The <code>Array.prototype.sort()</code> method sorts the elements of an array in place and returns aa reference to the same array, now sorted.</p>\n<p>When the <code>sort()</code> method compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value. If the result is negative, <code>a</code> is sorted before <code>b</code>. If the result is positive, <code>b</code> is sorted before <code>a</code>. If the result is zero, no changes are done with the sort order of the two values.</p>\n<p>The <code>sort()</code> method accepts a compare function as an argument, which you can define to customize the sorting logic based on your requirements. The compare function should take two arguments, usually denoted as <code>a</code> and <code>b</code>, and return a positive, negative, or zero value depending on the desired order.</p>\n<h2>Conclusion</h2>\n<p>In conclusion, the <code>sort</code> method works by converting the array elements into strings and comparing their sequences of UTF-8 code unit values.</p>\n"},{"title":"Tutorial on the findIndex method of an Array","tags":[{"name":"javascript","id":"javascript-658903"}],"date":"2023-06-01 06:43","description":"","slug":"tutorial-on-the-findindex-method-of-an-array","id":"tutorial-on-the-findindex-method-of-an-array-624329","content":"<h2>Introduction</h2>\n<p>The <code>findIndex()</code> method in JavaScript is used to find the index of the first element in an array that satisfies a given condition. It returns the index of the first matching element, or -1 if no match is found. This method is particularly useful when working with complex data structures or when you need to locate a specific element based on certain criteria.</p>\n<h2>Syntax and Usage</h2>\n<p>The syntax for the <code>findIndex()</code> method is as follows:</p>\n<pre><code class=\"hljs language-js\">arr.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-title function_\">callback</span>(element, index, array), thisArg)</code></pre>\n<ul>\n<li><code>callback</code>: A function to execute on each value in the array until the function returns true, indicating that the satisfying element was found.</li>\n<li><code>thisArg</code>: Optional object to use as <code>this</code> when executing the callback.</li>\n<li><code>array</code> : Optional array in which the <code>findIndex</code> method is called.</li>\n</ul>\n<h2>Examples</h2>\n<p>Here are some examples of using the <code>findIndex()</code> method:</p>\n<p><strong>Example 1: Basic usage</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> lang = [<span class=\"hljs-string\">\"Java\"</span>, <span class=\"hljs-string\">\"JavaScript\"</span>]\nlang.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =></span> val === <span class=\"hljs-string\">'JavaScript'</span>) <span class=\"hljs-comment\">// 1</span>\nlang.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =></span> val === <span class=\"hljs-string\">'Python'</span>) <span class=\"hljs-comment\">// -1</span></code></pre>\n<p><strong>Example 2: Using <code>findIndex</code> with a more complex condition</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> ranks = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">7</span>]\n<span class=\"hljs-keyword\">let</span> index = ranks.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">rank, index</span>) =></span> rank === <span class=\"hljs-number\">7</span> &#x26;&#x26; index > <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index) <span class=\"hljs-comment\">// 5</span></code></pre>\n<p><strong>Example 3: Using <code>findIndex</code> with an array of objects</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> products = [\n{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Phone'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">999</span> },\n{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Computer'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">1999</span> },\n{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Tablet'</span>, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-number\">995</span> },\n]\n\n<span class=\"hljs-keyword\">const</span> index = products.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">product</span> =></span> product.<span class=\"hljs-property\">price</span> > <span class=\"hljs-number\">1000</span> )\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(index) <span class=\"hljs-comment\">// 1</span></code></pre>\n<h2>Trade-offs and Nuances</h2>\n<ul>\n<li>The <code>findIndex()</code> method is useful when you want to find the index of the first element that satisfies a given condition. However, if you need to find the indices of all elements that match the criteria, you should use the <code>reduce()</code> method instead of <code>findIndex()</code></li>\n<li>The <code>findIndex()</code> method is not supported in older browsers, such as Internet Explorer. If you need to support older browsers, you can use a polyfill or an alternative method like <code>Array.prototype.indexOf()</code></li>\n<li>The <code>findIndex()</code> method can be called on non-array objects, as long as they have a <code>length</code> property. However, the method may not work as expected, and you may need to use other methods like <code>Array.prototype.findIndex.call()</code></li>\n</ul>\n"},{"title":"Using Middleware in Next.js","date":"2023-06-01 12:06","tags":[{"name":"nextjs","id":"nextjs-654356"}],"description":"","slug":"using-middleware-in-nextjs","id":"using-middleware-in-nextjs-864311","content":"<h2>Introduction</h2>\n<p>Middleware allows you to run code before a request is completed. Then, based on the incoming request, you can either modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.</p>\n<p>Middleware runs before cached content and routes are matched.</p>\n<h2>Convention</h2>\n<p>Using the file <code>middleware.js</code> in the root of your project to define Middleware.</p>\n<h2>Example</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">NextResponse</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/server\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">req, res</span>) {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">redirect</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">\"/home\"</span>, request.<span class=\"hljs-property\">url</span> ))\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n\tmatcher : <span class=\"hljs-string\">\"/about/:path\"</span>\n}</code></pre>\n<h2>Matching Paths</h2>\n<p>Middleware will be invoked for <strong>every route in your project</strong>. The following is the execution order:</p>\n<ol>\n<li><code>headers</code> from <code>next.config.js</code></li>\n<li><code>redirects</code> from <code>next.config.js</code></li>\n<li>Middleware (<code>rewrites</code>, <code>redirects</code>, etc.)</li>\n<li><code>beforeFiles</code> (<code>rewrites</code> ) from <code>next.config.js</code></li>\n<li>Filesystem routes (<code>public/</code>, <code>_next/static/</code>, <code>pages/</code>, <code>app/</code>, etc.)</li>\n<li><code>afterFiles</code> (<code>rewrites</code> ) from <code>next.config.js</code></li>\n<li>Dynamic Routes (<code>/blog/[slug]</code>)</li>\n<li><code>fallback</code> (<code>rewrite</code> ) from <code>next.config.js</code></li>\n</ol>\n<p>There are two wats to define which paths Middleware will run on:</p>\n<ol>\n<li>Custom matcher config</li>\n<li>Conditional statements</li>\n</ol>\n<h3>Matcher</h3>\n<p><code>matcher</code> allows you to filter Middleware to run on specific paths.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n\tmatcher : <span class=\"hljs-string\">\"/about/:path\"</span>\n}</code></pre>\n<p>You can match a single path or multiple paths with an array syntax:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">matcher</span>: [<span class=\"hljs-string\">'/about/:path*'</span>, <span class=\"hljs-string\">'/dashboard/:path*'</span>],\n};</code></pre>\n<p>The <code>matcher</code> config allows you full regex so matching like negative lookaheads or character matching is supported. The regex must be enclosed within the parenthesis.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">matcher</span>: [\n    <span class=\"hljs-comment\">/*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */</span>\n    <span class=\"hljs-string\">'/((?!api|_next/static|_next/image|favicon.ico).*)'</span>,\n  ],\n};</code></pre>\n<p>Configured matches:</p>\n<ol>\n<li>MUST start with <code>/</code></li>\n<li>Can include named parameters: <code>/about/:path</code> matches <code>/about/a</code> and <code>/about/b</code> but not <code>/about/a/c</code></li>\n<li>Can have modifiers on named parameters (starting with <code>:</code>): <code>/about/:path*</code> matches <code>/about/a/b/c</code> because <code>*</code> is <em>zero or more</em>. <code>?</code> is <em>zero or one</em> and <code>+</code> <em>one or more</em></li>\n<li>Can use regular expression enclosed in parenthesis: <code>/about/(.*)</code> is the same as <code>/about/:path*</code></li>\n</ol>\n<h3>Conditional Statements</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n  <span class=\"hljs-keyword\">if</span> (request.<span class=\"hljs-property\">nextUrl</span>.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">'/about'</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">rewrite</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">'/about-2'</span>, request.<span class=\"hljs-property\">url</span>));\n  }\n \n  <span class=\"hljs-keyword\">if</span> (request.<span class=\"hljs-property\">nextUrl</span>.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">'/dashboard'</span>)) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">rewrite</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-string\">'/dashboard/user'</span>, request.<span class=\"hljs-property\">url</span>));\n  }\n}</code></pre>\n<h3>NextResponse</h3>\n<p>The <code>NextResponse</code> API allows you to:</p>\n<ul>\n<li><code>redirect</code> the incoming request to a different URL</li>\n<li><code>rewrite</code> the response by displaying a given URL</li>\n<li>Set request headers for API Routes, <code>getServerSideProps</code>, and <code>rewrite</code> destinations</li>\n<li>Set response cookies</li>\n<li>Set response headers</li>\n</ul>\n<p>To produce a response from Middleware, you can:</p>\n<ol>\n<li><code>rewrite</code> to a route (<a href=\"https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts\">Page</a> or <a href=\"https://nextjs.org/docs/pages/building-your-application/routing/api-routes\">Edge API Route</a>) that produces a response</li>\n<li>return a <code>NextResponse</code> directly. See <a href=\"https://nextjs.org/docs/pages/building-your-application/routing/middleware#producing-a-response\">Producing a Response</a></li>\n</ol>\n<h2>Using Cookies</h2>\n<p>Cookies are regular headers. On a <code>Request</code>, they are stored in the <code>Cookie</code> header. On a <code>Response</code> they are in the <code>Set-Cookie</code> header. Next.js provides a convenient way to access and manipulate these cookies through the <code>cookies</code> extension on <code>NextRequest</code> and <code>NextResponse</code></p>\n<ol>\n<li>For income requests, <code>cookies</code> comes with the following methods: <code>get</code>, <code>getAll</code>, <code>set</code> , and <code>delete</code> cookies. You can check for existence of a cookie with <code>has</code> or remove all cookies with <code>clear</code></li>\n<li>For outgoing responses, <code>cookies</code> have the following methods: <code>get</code>, <code>getAll</code>, <code>set</code>, and <code>delete</code>.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">NextResponse</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"next/server\"</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n\t<span class=\"hljs-keyword\">let</span> cookie = request.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"nextjs\"</span>)?.<span class=\"hljs-property\">value</span>\n\t<span class=\"hljs-keyword\">const</span> allCookies = request.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">getAll</span>()\n\trequest.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-string\">\"nextjs\"</span>)\n\trequest.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">\"nextjs\"</span>)\n\n\t<span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">next</span>()\n\tresponse.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">set</span>({\n\t\tname : <span class=\"hljs-string\">\"Vercel\"</span>,\n\t\tvalue : <span class=\"hljs-string\">\"fast\"</span>\n\t})\n\tcookie = response.<span class=\"hljs-property\">cookies</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"vercel\"</span>)\n\t<span class=\"hljs-keyword\">return</span> response\n}</code></pre>\n<h2>Setting Headers</h2>\n<p>You can set request and response headers using the <code>NextResponse</code> API (setting <em>request</em> headers is available since Next.js v13.0.0).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n  <span class=\"hljs-comment\">// Clone the request headers and set a new header `x-hello-from-middleware1`</span>\n  <span class=\"hljs-keyword\">const</span> requestHeaders = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Headers</span>(request.<span class=\"hljs-property\">headers</span>);\n  requestHeaders.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'x-hello-from-middleware1'</span>, <span class=\"hljs-string\">'hello'</span>);\n \n  <span class=\"hljs-comment\">// You can also set request headers in NextResponse.rewrite</span>\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-title class_\">NextResponse</span>.<span class=\"hljs-title function_\">next</span>({\n    <span class=\"hljs-attr\">request</span>: {\n      <span class=\"hljs-comment\">// New request headers</span>\n      <span class=\"hljs-attr\">headers</span>: requestHeaders,\n    },\n  });\n \n  <span class=\"hljs-comment\">// Set a new response header `x-hello-from-middleware2`</span>\n  response.<span class=\"hljs-property\">headers</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'x-hello-from-middleware2'</span>, <span class=\"hljs-string\">'hello'</span>);\n  <span class=\"hljs-keyword\">return</span> response;\n}</code></pre>\n<h3>Producing a Response</h3>\n<p>You can respond from Middleware directly by returning a <code>Response</code> or <code>NextResponse</code> instance. (This is available since <a href=\"https://nextjs.org/blog/next-13-1#nextjs-advanced-middleware\">Next.js v13.1.0</a>)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NextResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/server'</span>;\n<span class=\"hljs-keyword\">import</span> { isAuthenticated } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@lib/auth'</span>;\n \n<span class=\"hljs-comment\">// Limit the middleware to paths starting with `/api/`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> config = {\n  <span class=\"hljs-attr\">matcher</span>: <span class=\"hljs-string\">'/api/:function*'</span>,\n};\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">middleware</span>(<span class=\"hljs-params\">request</span>) {\n  <span class=\"hljs-comment\">// Call our authentication function to check the request</span>\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">isAuthenticated</span>(request)) {\n    <span class=\"hljs-comment\">// Respond with JSON indicating an error message</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NextResponse</span>(\n      <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ <span class=\"hljs-attr\">success</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'authentication failed'</span> }),\n      { <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">401</span>, <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">'content-type'</span>: <span class=\"hljs-string\">'application/json'</span> } },\n    );\n  }\n}</code></pre>\n"}]
        }
        export default data;
    