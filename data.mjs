
        const data = {
            "posts": [{"title":"Getting current working directory in Node.js with process.cwd()","tags":[{"name":"nodejs","id":"nodejs-372633"},{"name":"javascript","id":"javascript-339747"}],"date":"2023-05-31 16:32","description":"process.cwd() is a method in the Node.js process module that returns the current working directory of the Node.js process.","slug":"current-working-directory-in-nodejs-with-processcwd","id":"getting-current-working-directory-in-nodejs-with-processcwd-725655","content":"<h2>process.cwd()</h2>\n<p><code>process.cwd()</code> is a method in the Node.js process module that returns the current working directory of the Node.js process. The method does not take any parameters.</p>\n<p>The difference between <code>process.cwd()</code> and <code>__dirname</code> is that <code>process.cwd()</code> returns the current working directory of the process, while <code>__dirname</code> returns the directory name of the current module or file. <code>__dirname</code> is a property of the module, whereas <code>process.cwd()</code> is a method of the global <code>process</code> object.</p>\n<p>Here are some use cases and examples of how to use <code>process.cwd()</code>:</p>\n<ul>\n<li>To print the current working directory of the Node.js process, you can simply call <code>process.cwd()</code>:</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(process.<span class=\"hljs-title function_\">cwd</span>());</code></pre>\n<ul>\n<li>To change the current working directory of the Node.js process, you can use the <code>process.chdir(directory)</code> method. This method changes the current working directory to <code>directory</code>.</li>\n</ul>\n<pre><code class=\"hljs language-javascript\">process.<span class=\"hljs-title function_\">chdir</span>(<span class=\"hljs-string\">'/tmp'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(process.<span class=\"hljs-title function_\">cwd</span>());</code></pre>\n<ul>\n<li>You can use <code>process.cwd()</code> to create file paths relative to the current working directory of the Node.js process. For example:</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-keyword\">const</span> filePath = path.<span class=\"hljs-title function_\">join</span>(process.<span class=\"hljs-title function_\">cwd</span>(), <span class=\"hljs-string\">'data'</span>, <span class=\"hljs-string\">'file.txt'</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(filePath);</code></pre>\n<p>This will print the file path <code>/path/to/current/working/directory/data/file.txt</code>.</p>\n<p>Note that <code>process.cwd()</code> returns the current working directory of the Node.js process, which may not necessarily be the same as the directory where the Node.js script is located. To get the directory where the script is located, you can use <code>__dirname</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(__dirname);</code></pre>\n<p>This will print the directory where the script is located.</p>\n<p>Overall, <code>process.cwd()</code> is a useful method for working with file paths and changing the current working directory of the Node.js process.</p>\n<p>Sources:</p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/node-js-process-cwd-method/\">GeeksforGeeks</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname\">Stack Overflow</a></li>\n<li><a href=\"https://blog.logrocket.com/understanding-using-globs-node-js/\">LogRocket</a></li>\n<li><a href=\"https://www.baeldung.com/linux/find-working-directory-of-running-process\">Baeldung</a></li>\n</ul>\n"},{"title":"Data Fetching with getStaticProps in Next.js","tags":[{"name":"nextjs","id":"nextjs-737857"}],"date":"2023-05-31 14:20","description":"","slug":"data-fetching-with-getstaticprops-in-nextjs","id":"data-fetching-with-getstaticprops-in-nextjs-273833","content":"<h1>getStaticProps</h1>\n<p>If you export a function called <code>getStaticProps</code> (Static Site Generation) from a page, Next.js will pre-render this page at build time using the props returned by <code>getStaticProps</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getStaticProps</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">'https://api.github.com/repos/vercel/next.js'</span>);\n  <span class=\"hljs-keyword\">const</span> repo = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>();\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { repo } };\n};\n \n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\">{ repo }</span>) {\n  <span class=\"hljs-keyword\">return</span> repo.<span class=\"hljs-property\">stargazers_count</span>;\n}</code></pre>\n<h2>When should I use getStaticProps?</h2>\n<p>You should use <code>getStaticProps</code> if:</p>\n<ul>\n<li>The data required to render the page is available at build time ahead of a user’s request.</li>\n<li>The data comes from a headless CMS.</li>\n<li>The data can be publicly cached (not user-specific). This condition can be bypassed in certain specific situation by using a Middleware to rewrite the path.</li>\n<li>The page must be pre-rendered (for SEO) and be very fast — <code>getStaticProps</code> generates HTML and JSON files, both of which can be cached by a CDN for performance.</li>\n</ul>\n<h2>When does getStaticProps run?</h2>\n<p><code>getStaticProps</code> always runs on the server and never on the client.</p>\n<ul>\n<li>\n<p><code>getStaticProps</code> always runs during next build</p>\n</li>\n<li>\n<p><code>getStaticProps</code> runs in the background when using <code>fallback: true</code></p>\n</li>\n<li>\n<p><code>getStaticProps</code> is called before initial render when using <code>fallback: blocking</code>\n<code>getStaticProps</code> runs in the background when using <code>revalidate</code>\n<code>getStaticProps</code> runs on-demand in the background when using <code>revalidate()</code></p>\n</li>\n</ul>\n<p>When combined with <strong>Incremental Static Regeneration</strong>, <code>getStaticProps</code> will run in the background while the stale page is being revalidated, and the fresh page served to the browser.</p>\n<p><code>getStaticProps</code> does not have access to the incoming request (such as query parameters or HTTP headers) as it generates static HTML. If you need access to the request for your page, consider using Middleware in addition to <code>getStaticProps</code>.</p>\n<h2>Statically generates both HTML and JSON</h2>\n<p>When a page with <code>getStaticProps</code> is pre-rendered at build time, in addition to the page HTML file, Next.js generates a JSON file holding the result of running getStaticProps.</p>\n<p>This JSON file will be used in client-side routing through <code>next/link</code> or <code>next/router</code>. When you navigate to a page that’s pre-rendered using <code>getStaticProps</code>, Next.js fetches this JSON file (pre-computed at build time) and uses it as the props for the page component. This means that client-side page transitions will not call <code>getStaticProps</code> as only the exported JSON is used.</p>\n<p>When using <strong>Incremental Static Generation</strong>, <code>getStaticProps</code> will be executed in the background to generate the JSON needed for client-side navigation. You may see this in the form of multiple requests being made for the same page, however, this is intended and has no impact on end-user performance.</p>\n<h2>Where can I use getStaticProps</h2>\n<p><code>getStaticProps</code> can only be exported from a page. You cannot export it from non-page files, <code>_app</code>, <code>_document</code>, or <code>_error</code>.</p>\n<p>One of the reasons for this restriction is that React needs to have all the required data before the page is rendered.</p>\n<p>Also, you must use export <code>getStaticProps</code> as a standalone function — it will not work if you add <code>getStaticProps</code> as a property of the page component.</p>\n<h2>Runs on every request in development</h2>\n<p>In development (next dev), getStaticProps will be called on every request.</p>\n"},{"title":"Tutorial: Fallback Option of getStaticProps in Next.js","tags":[{"name":"nextjs","id":"nextjs-441721"}],"date":"2023-05-31 16:42","description":"`fallback` is an option in the `getStaticProps` function that determines how to generate pages for paths not returned by `getStaticPaths`. It is used in combination with `getStaticPaths` to enable Incremental Static Regeneration (ISR)","slug":"fallback-option-of-getstaticprops-in-nextjs","id":"tutorial-fallback-option-of-getstaticprops-in-nextjs-423181","content":"<p>In this tutorial, we will dive deep into the fallback option of <code>getStaticProps</code> in Next.js. We will cover the different types of fallbacks, their trade-offs, and how to implement them in your application.</p>\n<h2>What is fallback in getStaticProps?</h2>\n<p><code>fallback</code> is an option in the <code>getStaticProps</code> function that determines how to generate pages for paths not returned by <code>getStaticPaths</code>. It is used in combination with <code>getStaticPaths</code> to enable Incremental Static Regeneration (ISR) .</p>\n<h2>Fallback Options</h2>\n<p>There are three options for the <code>fallback</code> parameter:</p>\n<ol>\n<li>\n<p><code>fallback: true</code>: The default value. Pages not returned by <code>getStaticPaths</code> are generated on-demand, similar to Server-Side Rendering (SSR).</p>\n</li>\n<li>\n<p><code>fallback: false</code>: Pages not returned by <code>getStaticPaths</code> will result in a 404 error</p>\n</li>\n<li>\n<p><code>fallback: 'blocking'</code>: Introduced in Next.js 10, this option blocks rendering and serves a loading state while the data is being fetched in the background</p>\n</li>\n</ol>\n<h2>Implementing Fallback Options</h2>\n<h3>1. fallback: true</h3>\n<p>By default, when <code>fallback</code> is set to <code>true</code>, pages not returned by <code>getStaticPaths</code> are generated on-demand. This means that the data is fetched in the browser after the initial page load. This can result in a longer Time to First Byte (TTFB)</p>\n<p>Example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticProps</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Fetch data for some dynamic pages</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetchData</span>();\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      data,\n    },\n  };\n}</code></pre>\n<h3>2. fallback: false</h3>\n<p>When <code>fallback</code> is set to <code>false</code>, pages not returned by <code>getStaticPaths</code> will result in a 404 error. This means that you should ensure that all required paths are returned by <code>getStaticPaths</code></p>\n<p>Example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticProps</span>(<span class=\"hljs-params\">{ params }</span>) {\n  <span class=\"hljs-comment\">// Fetch data for all dynamic pages</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetchData</span>();\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      data,\n    },\n  };\n}</code></pre>\n<h3>3. fallback: 'blocking'</h3>\n<p>When <code>fallback</code> is set to <code>'blocking'</code>, a loading state is served while the data is being fetched in the background. This can result in a faster TTFB compared to <code>fallback: true</code></p>\n<p>Example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getStaticProps</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Fetch data for some dynamic pages</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetchData</span>();\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      data,\n    },\n    <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-string\">'blocking'</span>,\n  };\n}</code></pre>\n<h2>Trade-offs and Considerations</h2>\n<ul>\n<li><code>fallback: true</code> provides faster TTFB compared to <code>fallback: false</code>, but it can result in a slower initial rendering due to data fetching in the browser</li>\n<li><code>fallback: false</code> ensures that only valid paths are served, but it can result in a 404 error for pages not returned by <code>getStaticPaths</code>.</li>\n<li><code>fallback: 'blocking'</code> provides a faster TTFB.</li>\n</ul>\n<p>In summary, the choice of fallback option depends on your specific use case and performance requirements.</p>\n<h2>Conclusion</h2>\n<p>In this tutorial, we covered the different fallback options for <code>getStaticProps</code> in Next.\njs, their trade-offs, and how to implement them in your application.\nChoose the appropriate fallback option based on your performance requirements and the structure of your application.</p>\n<blockquote>\n<p>This article has been written by AI.</p>\n</blockquote>\n"},{"title":"Tutorial on sorting an array of objects in JavaScript","date":"2023-06-01 04:11","tags":[{"name":"javascript","id":"javascript-634160"}],"description":"","slug":"tutorial-on-sorting-an-array-of-objects-in-javascript","id":"tutorial-on-sorting-an-array-of-objects-in-javascript-56568","content":"<h2>Introduction</h2>\n<p>In this tutorial, we will discuss how to sort an array of objects in JavaScript using the <code>Array.sort()</code> method and providing a comparison function that determines the order of the objects.</p>\n<p>First, let's create an array of objects:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> employees = [\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'John'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">27</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'December 15, 2017'</span> },\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Jane'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Doe'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">32</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'January 1, 2018'</span> },\n  { <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">'Mike'</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">'Johnson'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">27</span>, <span class=\"hljs-attr\">joinedDate</span>: <span class=\"hljs-string\">'February 1, 2018'</span> },\n];\n</code></pre>\n<p>Now, let's sort this array by the <code>age</code> property in ascending order:</p>\n<pre><code class=\"hljs language-js\">employees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.<span class=\"hljs-property\">age</span> - b.<span class=\"hljs-property\">age</span>)</code></pre>\n<p>You can also sort the array in descending order by changing the order of subtraction:</p>\n<pre><code class=\"hljs language-js\">exmployees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a , b</span>) =></span> b.<span class=\"hljs-property\">age</span> - a.<span class=\"hljs-property\">age</span>)</code></pre>\n<p>If you want to sort the array by a different property, such as <code>lastName</code>, you can modify the comparison function accordingly:</p>\n<pre><code class=\"hljs language-js\">employees.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a , b</span>) =></span> {\n\t<span class=\"hljs-keyword\">const</span> lA = a.<span class=\"hljs-property\">lastName</span>.<span class=\"hljs-title function_\">toUpperCase</span>()\n\t<span class=\"hljs-keyword\">const</span> lB = b.<span class=\"hljs-property\">lastName</span>.<span class=\"hljs-title function_\">toUpperCase</span>()\n\t<span class=\"hljs-keyword\">if</span> (lA &#x3C; lB) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">if</span> (lA > lB) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n})</code></pre>\n<h2>How does it work?</h2>\n<p>The <code>Array.prototype.sort()</code> method sorts the elements of an array in place and returns aa reference to the same array, now sorted.</p>\n<p>When the <code>sort()</code> method compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value. If the result is negative, <code>a</code> is sorted before <code>b</code>. If the result is positive, <code>b</code> is sorted before <code>a</code>. If the result is zero, no changes are done with the sort order of the two values.</p>\n<p>The <code>sort()</code> method accepts a compare function as an argument, which you can define to customize the sorting logic based on your requirements. The compare function should take two arguments, usually denoted as <code>a</code> and <code>b</code>, and return a positive, negative, or zero value depending on the desired order.</p>\n<h2>Conclusion</h2>\n<p>In conclusion, the <code>sort</code> method works by converting the array elements into strings and comparing their sequences of UTF-8 code unit values.</p>\n"}]
        }
        export default data;
    